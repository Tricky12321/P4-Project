//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GiraphParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GiraphParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLOPERATOR=1, TYPE=2, GRAPHOBJ=3, VERTEXOBJ=4, EDGEOBJ=5, PLUS=6, MINUS=7, 
		DIVIDE=8, MULT=9, MODULO=10, NOT=11, AND=12, OR=13, SC=14, COMMA=15, COLON=16, 
		IF=17, LP=18, RP=19, LCB=20, RCB=21, LSB=22, RSB=23, DOT=24, SINGLEQUOTE=25, 
		EQUALS=26, QUOTE=27, ELSEIF=28, ELSE=29, TO=30, IN=31, FOR=32, FOREACH=33, 
		RETURN=34, WHILE=35, DO=36, SET=37, SELECT=38, SELECTALL=39, FROM=40, 
		WHERE=41, ADD=42, COLLECTION=43, RIGHTARROW=44, RUN=45, WITH=46, EXTEND=47, 
		PREDICATE=48, POP=49, PUSH=50, PEEK=51, ENQUEUE=52, DEQUEUE=53, CONDITIONSEP=54, 
		REMOVE=55, REMOVEALL=56, EXTRACTMIN=57, EXTRACTMAX=58, PRINT=59, UNDERSCORE=60, 
		COMMENTSTART=61, BOOL=62, COMPOUNDASSIGN=63, INTEGER=64, FLOATNUM=65, 
		VARIABLENAME=66, LETTER=67, LOWLETTER=68, CAPLETTER=69, ZERO=70, DIGITNZ=71, 
		FUNCTIONID=72, WhiteSpace=73, WS=74, STRING=75, SPECIALCHARS=76;
	public const int
		RULE_start = 0, RULE_program = 1, RULE_dcls = 2, RULE_objectDcl = 3, RULE_singleObjectDcl = 4, 
		RULE_variableDcl = 5, RULE_graphInitDcl = 6, RULE_graphDclBlock = 7, RULE_vertexDcls = 8, 
		RULE_vertexDcl = 9, RULE_edgeDcls = 10, RULE_edgeDcl = 11, RULE_assignment = 12, 
		RULE_expressionStart = 13, RULE_expressionAdvanced = 14, RULE_expression = 15, 
		RULE_simpleExpressionStart = 16, RULE_simpleExpressionAdvanced = 17, RULE_simpleExpression = 18, 
		RULE_operand = 19, RULE_simpleOperand = 20, RULE_query = 21, RULE_querySC = 22, 
		RULE_noReturnQuery = 23, RULE_returnQuery = 24, RULE_operator = 25, RULE_simpleOperators = 26, 
		RULE_advancedOperators = 27, RULE_predicateParams = 28, RULE_predicateParam = 29, 
		RULE_formalParams = 30, RULE_formalParam = 31, RULE_functionDcl = 32, 
		RULE_codeBlock = 33, RULE_returnBlock = 34, RULE_runFunction = 35, RULE_codeBlockContent = 36, 
		RULE_varOrConst = 37, RULE_variable = 38, RULE_constant = 39, RULE_string = 40, 
		RULE_integer = 41, RULE_floatnum = 42, RULE_bool = 43, RULE_objects = 44, 
		RULE_ifElseIfElse = 45, RULE_elseifCond = 46, RULE_elseCond = 47, RULE_boolCompOrExp = 48, 
		RULE_simpleBoolCompOrExp = 49, RULE_predicate = 50, RULE_predicateCall = 51, 
		RULE_where = 52, RULE_andOr = 53, RULE_extend = 54, RULE_select = 55, 
		RULE_selectAll = 56, RULE_addQuery = 57, RULE_addToGraph = 58, RULE_addToColl = 59, 
		RULE_collExpression = 60, RULE_collExpressionExt = 61, RULE_loopDcl = 62, 
		RULE_foreachLoop = 63, RULE_whileLoop = 64, RULE_forLoop = 65, RULE_forCondition = 66, 
		RULE_forConditionInside = 67, RULE_forConditionStart = 68, RULE_forConditionDcl = 69, 
		RULE_operation = 70, RULE_foreachCondition = 71, RULE_allType = 72, RULE_allTypeWithColl = 73, 
		RULE_collectionDcl = 74, RULE_collectionAssignment = 75, RULE_setQuery = 76, 
		RULE_setExpressionAtriSim = 77, RULE_setExpressionVari = 78, RULE_compoundAssign = 79, 
		RULE_attribute = 80, RULE_collNoReturnOps = 81, RULE_collReturnOps = 82, 
		RULE_enqueueOP = 83, RULE_dequeueOP = 84, RULE_popOP = 85, RULE_pushOP = 86, 
		RULE_extractMinOP = 87, RULE_extractMaxOP = 88, RULE_parameters = 89, 
		RULE_print = 90, RULE_dequeueOPOneLine = 91, RULE_commentLine = 92, RULE_comments = 93, 
		RULE_removeQuery = 94, RULE_removeAllQuery = 95;
	public static readonly string[] ruleNames = {
		"start", "program", "dcls", "objectDcl", "singleObjectDcl", "variableDcl", 
		"graphInitDcl", "graphDclBlock", "vertexDcls", "vertexDcl", "edgeDcls", 
		"edgeDcl", "assignment", "expressionStart", "expressionAdvanced", "expression", 
		"simpleExpressionStart", "simpleExpressionAdvanced", "simpleExpression", 
		"operand", "simpleOperand", "query", "querySC", "noReturnQuery", "returnQuery", 
		"operator", "simpleOperators", "advancedOperators", "predicateParams", 
		"predicateParam", "formalParams", "formalParam", "functionDcl", "codeBlock", 
		"returnBlock", "runFunction", "codeBlockContent", "varOrConst", "variable", 
		"constant", "string", "integer", "floatnum", "bool", "objects", "ifElseIfElse", 
		"elseifCond", "elseCond", "boolCompOrExp", "simpleBoolCompOrExp", "predicate", 
		"predicateCall", "where", "andOr", "extend", "select", "selectAll", "addQuery", 
		"addToGraph", "addToColl", "collExpression", "collExpressionExt", "loopDcl", 
		"foreachLoop", "whileLoop", "forLoop", "forCondition", "forConditionInside", 
		"forConditionStart", "forConditionDcl", "operation", "foreachCondition", 
		"allType", "allTypeWithColl", "collectionDcl", "collectionAssignment", 
		"setQuery", "setExpressionAtriSim", "setExpressionVari", "compoundAssign", 
		"attribute", "collNoReturnOps", "collReturnOps", "enqueueOP", "dequeueOP", 
		"popOP", "pushOP", "extractMinOP", "extractMaxOP", "parameters", "print", 
		"dequeueOPOneLine", "commentLine", "comments", "removeQuery", "removeAllQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'graph'", "'vertex'", "'edge'", "'+'", "'-'", "'/'", 
		"'*'", "'%'", "'!'", "'&'", "'|'", "';'", "','", "':'", "'if'", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'.'", "'''", "'='", "'\"'", "'elseif'", 
		"'else'", "'to'", "'in'", "'for'", "'foreach'", "'return'", "'while'", 
		"'do'", "'set'", "'select'", "'selectall'", "'from'", "'where'", "'add'", 
		"'collection'", "'->'", "'run'", "'with'", "'extend'", "'predicate'", 
		"'pop'", "'push'", "'peek'", "'enqueue'", "'dequeue'", null, "'remove'", 
		"'removeall'", "'extractmin'", "'extractmax'", "'print'", "'_'", "'//'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLOPERATOR", "TYPE", "GRAPHOBJ", "VERTEXOBJ", "EDGEOBJ", "PLUS", 
		"MINUS", "DIVIDE", "MULT", "MODULO", "NOT", "AND", "OR", "SC", "COMMA", 
		"COLON", "IF", "LP", "RP", "LCB", "RCB", "LSB", "RSB", "DOT", "SINGLEQUOTE", 
		"EQUALS", "QUOTE", "ELSEIF", "ELSE", "TO", "IN", "FOR", "FOREACH", "RETURN", 
		"WHILE", "DO", "SET", "SELECT", "SELECTALL", "FROM", "WHERE", "ADD", "COLLECTION", 
		"RIGHTARROW", "RUN", "WITH", "EXTEND", "PREDICATE", "POP", "PUSH", "PEEK", 
		"ENQUEUE", "DEQUEUE", "CONDITIONSEP", "REMOVE", "REMOVEALL", "EXTRACTMIN", 
		"EXTRACTMAX", "PRINT", "UNDERSCORE", "COMMENTSTART", "BOOL", "COMPOUNDASSIGN", 
		"INTEGER", "FLOATNUM", "VARIABLENAME", "LETTER", "LOWLETTER", "CAPLETTER", 
		"ZERO", "DIGITNZ", "FUNCTIONID", "WhiteSpace", "WS", "STRING", "SPECIALCHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GiraphParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GiraphParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GiraphParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GiraphParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GiraphParser.Eof, 0); }
		public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 192; program();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << COLLECTION) | (1L << EXTEND) | (1L << PREDICATE) | (1L << COMMENTSTART))) != 0) || _la==VARIABLENAME );
			State = 197; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunctionDclContext functionDcl() {
			return GetRuleContext<FunctionDclContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public ExtendContext extend() {
			return GetRuleContext<ExtendContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; functionDcl();
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; dcls();
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; extend();
				}
				break;
			case COMMENTSTART:
				EnterOuterAlt(_localctx, 4);
				{
				State = 202; comments();
				}
				break;
			case PREDICATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 203; predicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclsContext : ParserRuleContext {
		public ObjectDclContext objectDcl() {
			return GetRuleContext<ObjectDclContext>(0);
		}
		public CollectionDclContext collectionDcl() {
			return GetRuleContext<CollectionDclContext>(0);
		}
		public VariableDclContext variableDcl() {
			return GetRuleContext<VariableDclContext>(0);
		}
		public DclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclsContext dcls() {
		DclsContext _localctx = new DclsContext(Context, State);
		EnterRule(_localctx, 4, RULE_dcls);
		try {
			State = 209;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; objectDcl();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; collectionDcl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 208; variableDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDclContext : ParserRuleContext {
		public SingleObjectDclContext singleObjectDcl() {
			return GetRuleContext<SingleObjectDclContext>(0);
		}
		public GraphInitDclContext graphInitDcl() {
			return GetRuleContext<GraphInitDclContext>(0);
		}
		public ObjectDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDclContext objectDcl() {
		ObjectDclContext _localctx = new ObjectDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectDcl);
		try {
			State = 213;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 211; singleObjectDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; graphInitDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleObjectDclContext : ParserRuleContext {
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public SingleObjectDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleObjectDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleObjectDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleObjectDclContext singleObjectDcl() {
		SingleObjectDclContext _localctx = new SingleObjectDclContext(Context, State);
		EnterRule(_localctx, 8, RULE_singleObjectDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; objects();
			State = 216; variable();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 217; Match(EQUALS);
				{
				State = 218; boolCompOrExp(0);
				}
				}
			}

			{
			State = 221; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public VariableDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDclContext variableDcl() {
		VariableDclContext _localctx = new VariableDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(TYPE);
			State = 224; variable();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 225; Match(EQUALS);
				{
				State = 226; boolCompOrExp(0);
				}
				}
			}

			{
			State = 229; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphInitDclContext : ParserRuleContext {
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GraphDclBlockContext graphDclBlock() {
			return GetRuleContext<GraphDclBlockContext>(0);
		}
		public GraphInitDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphInitDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphInitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphInitDclContext graphInitDcl() {
		GraphInitDclContext _localctx = new GraphInitDclContext(Context, State);
		EnterRule(_localctx, 12, RULE_graphInitDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(GRAPHOBJ);
			State = 232; variable();
			State = 233; graphDclBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphDclBlockContext : ParserRuleContext {
		public ITerminalNode LSB() { return GetToken(GiraphParser.LSB, 0); }
		public ITerminalNode RSB() { return GetToken(GiraphParser.RSB, 0); }
		public VertexDclsContext[] vertexDcls() {
			return GetRuleContexts<VertexDclsContext>();
		}
		public VertexDclsContext vertexDcls(int i) {
			return GetRuleContext<VertexDclsContext>(i);
		}
		public EdgeDclsContext[] edgeDcls() {
			return GetRuleContexts<EdgeDclsContext>();
		}
		public EdgeDclsContext edgeDcls(int i) {
			return GetRuleContext<EdgeDclsContext>(i);
		}
		public ITerminalNode[] SC() { return GetTokens(GiraphParser.SC); }
		public ITerminalNode SC(int i) {
			return GetToken(GiraphParser.SC, i);
		}
		public GraphDclBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphDclBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphDclBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphDclBlockContext graphDclBlock() {
		GraphDclBlockContext _localctx = new GraphDclBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_graphDclBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(LSB);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VERTEXOBJ || _la==EDGEOBJ) {
				{
				{
				State = 238;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VERTEXOBJ:
					{
					State = 236; vertexDcls();
					}
					break;
				case EDGEOBJ:
					{
					State = 237; edgeDcls();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				{
				State = 240; Match(SC);
				}
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247; Match(RSB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public VertexDclContext[] vertexDcl() {
			return GetRuleContexts<VertexDclContext>();
		}
		public VertexDclContext vertexDcl(int i) {
			return GetRuleContext<VertexDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclsContext vertexDcls() {
		VertexDclsContext _localctx = new VertexDclsContext(Context, State);
		EnterRule(_localctx, 16, RULE_vertexDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(VERTEXOBJ);
			State = 250; vertexDcl();
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 251; Match(COMMA);
				State = 252; vertexDcl();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclContext vertexDcl() {
		VertexDclContext _localctx = new VertexDclContext(Context, State);
		EnterRule(_localctx, 18, RULE_vertexDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 258; variable();
				}
			}

			{
			State = 261; Match(LP);
			State = 270;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0) || _la==VARIABLENAME) {
				{
				State = 262; assignment();
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 263; Match(COMMA);
					State = 264; assignment();
					}
					}
					State = 269;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 272; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclsContext : ParserRuleContext {
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public EdgeDclContext[] edgeDcl() {
			return GetRuleContexts<EdgeDclContext>();
		}
		public EdgeDclContext edgeDcl(int i) {
			return GetRuleContext<EdgeDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public EdgeDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclsContext edgeDcls() {
		EdgeDclsContext _localctx = new EdgeDclsContext(Context, State);
		EnterRule(_localctx, 20, RULE_edgeDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(EDGEOBJ);
			State = 275; edgeDcl();
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 276; Match(COMMA);
				State = 277; edgeDcl();
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public EdgeDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclContext edgeDcl() {
		EdgeDclContext _localctx = new EdgeDclContext(Context, State);
		EnterRule(_localctx, 22, RULE_edgeDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 283; variable();
				}
			}

			{
			State = 286; Match(LP);
			State = 287; variable();
			{
			State = 288; Match(COMMA);
			}
			State = 289; variable();
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 290; Match(COMMA);
				State = 291; assignment();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 297; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) {
				{
				State = 299; allType();
				}
			}

			State = 302; variable();
			State = 303; compoundAssign();
			State = 304; boolCompOrExp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStartContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public SimpleOperatorsContext[] simpleOperators() {
			return GetRuleContexts<SimpleOperatorsContext>();
		}
		public SimpleOperatorsContext simpleOperators(int i) {
			return GetRuleContext<SimpleOperatorsContext>(i);
		}
		public ExpressionStartContext[] expressionStart() {
			return GetRuleContexts<ExpressionStartContext>();
		}
		public ExpressionStartContext expressionStart(int i) {
			return GetRuleContext<ExpressionStartContext>(i);
		}
		public AdvancedOperatorsContext advancedOperators() {
			return GetRuleContext<AdvancedOperatorsContext>(0);
		}
		public ExpressionAdvancedContext expressionAdvanced() {
			return GetRuleContext<ExpressionAdvancedContext>(0);
		}
		public ExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStartContext expressionStart() {
		ExpressionStartContext _localctx = new ExpressionStartContext(Context, State);
		EnterRule(_localctx, 26, RULE_expressionStart);
		try {
			int _alt;
			State = 323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306; operand();
				State = 310;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 307; simpleOperators();
						State = 308; expressionStart();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 312;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 314; operand();
				{
				State = 315; advancedOperators();
				State = 316; expressionAdvanced();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 318; operand();
				{
				State = 319; advancedOperators();
				State = 320; expressionStart();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; operand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionAdvancedContext : ParserRuleContext {
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public AdvancedOperatorsContext[] advancedOperators() {
			return GetRuleContexts<AdvancedOperatorsContext>();
		}
		public AdvancedOperatorsContext advancedOperators(int i) {
			return GetRuleContext<AdvancedOperatorsContext>(i);
		}
		public ExpressionAdvancedContext[] expressionAdvanced() {
			return GetRuleContexts<ExpressionAdvancedContext>();
		}
		public ExpressionAdvancedContext expressionAdvanced(int i) {
			return GetRuleContext<ExpressionAdvancedContext>(i);
		}
		public ExpressionAdvancedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionAdvanced; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdvanced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionAdvancedContext expressionAdvanced() {
		ExpressionAdvancedContext _localctx = new ExpressionAdvancedContext(Context, State);
		EnterRule(_localctx, 28, RULE_expressionAdvanced);
		try {
			int _alt;
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 325; operand();
				State = 329;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 326; advancedOperators();
						State = 327; expressionAdvanced();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 331;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 333; operand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionStartContext expressionStart() {
			return GetRuleContext<ExpressionStartContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; expressionStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionStartContext : ParserRuleContext {
		public SimpleOperandContext simpleOperand() {
			return GetRuleContext<SimpleOperandContext>(0);
		}
		public SimpleOperatorsContext[] simpleOperators() {
			return GetRuleContexts<SimpleOperatorsContext>();
		}
		public SimpleOperatorsContext simpleOperators(int i) {
			return GetRuleContext<SimpleOperatorsContext>(i);
		}
		public SimpleExpressionStartContext[] simpleExpressionStart() {
			return GetRuleContexts<SimpleExpressionStartContext>();
		}
		public SimpleExpressionStartContext simpleExpressionStart(int i) {
			return GetRuleContext<SimpleExpressionStartContext>(i);
		}
		public AdvancedOperatorsContext advancedOperators() {
			return GetRuleContext<AdvancedOperatorsContext>(0);
		}
		public SimpleExpressionAdvancedContext simpleExpressionAdvanced() {
			return GetRuleContext<SimpleExpressionAdvancedContext>(0);
		}
		public SimpleExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpressionStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionStartContext simpleExpressionStart() {
		SimpleExpressionStartContext _localctx = new SimpleExpressionStartContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleExpressionStart);
		try {
			int _alt;
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338; simpleOperand();
				State = 342;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 339; simpleOperators();
						State = 340; simpleExpressionStart();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 344;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 346; simpleOperand();
				{
				State = 347; advancedOperators();
				State = 348; simpleExpressionAdvanced();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; simpleOperand();
				{
				State = 351; advancedOperators();
				State = 352; simpleExpressionStart();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 354; simpleOperand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionAdvancedContext : ParserRuleContext {
		public SimpleOperandContext simpleOperand() {
			return GetRuleContext<SimpleOperandContext>(0);
		}
		public AdvancedOperatorsContext[] advancedOperators() {
			return GetRuleContexts<AdvancedOperatorsContext>();
		}
		public AdvancedOperatorsContext advancedOperators(int i) {
			return GetRuleContext<AdvancedOperatorsContext>(i);
		}
		public SimpleExpressionAdvancedContext[] simpleExpressionAdvanced() {
			return GetRuleContexts<SimpleExpressionAdvancedContext>();
		}
		public SimpleExpressionAdvancedContext simpleExpressionAdvanced(int i) {
			return GetRuleContext<SimpleExpressionAdvancedContext>(i);
		}
		public SimpleExpressionAdvancedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpressionAdvanced; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpressionAdvanced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionAdvancedContext simpleExpressionAdvanced() {
		SimpleExpressionAdvancedContext _localctx = new SimpleExpressionAdvancedContext(Context, State);
		EnterRule(_localctx, 34, RULE_simpleExpressionAdvanced);
		try {
			int _alt;
			State = 366;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; simpleOperand();
				State = 361;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 358; advancedOperators();
						State = 359; simpleExpressionAdvanced();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 363;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; simpleOperand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleExpressionStartContext simpleExpressionStart() {
			return GetRuleContext<SimpleExpressionStartContext>(0);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; simpleExpressionStart();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 38, RULE_operand);
		try {
			State = 383;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 372;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLENAME:
					{
					State = 370; variable();
					}
					break;
				case BOOL:
				case INTEGER:
				case FLOATNUM:
				case STRING:
					{
					State = 371; constant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 374; returnQuery();
				}
				break;
			case SINGLEQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 375; attribute();
				}
				break;
			case RUN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 376; runFunction();
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 377; Match(LP);
				State = 378; expression();
				State = 379; Match(RP);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 381; Match(MINUS);
				}
				State = 382; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleOperandContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SimpleOperandContext simpleOperand() {
			return GetRuleContext<SimpleOperandContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public SimpleOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleOperandContext simpleOperand() {
		SimpleOperandContext _localctx = new SimpleOperandContext(Context, State);
		EnterRule(_localctx, 40, RULE_simpleOperand);
		try {
			State = 396;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 387;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLENAME:
					{
					State = 385; variable();
					}
					break;
				case BOOL:
				case INTEGER:
				case FLOATNUM:
				case STRING:
					{
					State = 386; constant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SINGLEQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 389; attribute();
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 390; Match(LP);
				State = 391; simpleExpression();
				State = 392; Match(RP);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 394; Match(MINUS);
				}
				State = 395; simpleOperand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public NoReturnQueryContext noReturnQuery() {
			return GetRuleContext<NoReturnQueryContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 42, RULE_query);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case REMOVE:
			case REMOVEALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 398; noReturnQuery();
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 399; returnQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySCContext : ParserRuleContext {
		public NoReturnQueryContext noReturnQuery() {
			return GetRuleContext<NoReturnQueryContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public QuerySCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySC; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySCContext querySC() {
		QuerySCContext _localctx = new QuerySCContext(Context, State);
		EnterRule(_localctx, 44, RULE_querySC);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case REMOVE:
			case REMOVEALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402; noReturnQuery();
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 403; returnQuery();
				{
				State = 404; Match(SC);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoReturnQueryContext : ParserRuleContext {
		public SetQueryContext setQuery() {
			return GetRuleContext<SetQueryContext>(0);
		}
		public AddQueryContext addQuery() {
			return GetRuleContext<AddQueryContext>(0);
		}
		public RemoveAllQueryContext removeAllQuery() {
			return GetRuleContext<RemoveAllQueryContext>(0);
		}
		public RemoveQueryContext removeQuery() {
			return GetRuleContext<RemoveQueryContext>(0);
		}
		public NoReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noReturnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoReturnQueryContext noReturnQuery() {
		NoReturnQueryContext _localctx = new NoReturnQueryContext(Context, State);
		EnterRule(_localctx, 46, RULE_noReturnQuery);
		try {
			State = 412;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; setQuery();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409; addQuery();
				}
				break;
			case REMOVEALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410; removeAllQuery();
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 411; removeQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnQueryContext : ParserRuleContext {
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public SelectAllContext selectAll() {
			return GetRuleContext<SelectAllContext>(0);
		}
		public CollReturnOpsContext collReturnOps() {
			return GetRuleContext<CollReturnOpsContext>(0);
		}
		public ReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnQueryContext returnQuery() {
		ReturnQueryContext _localctx = new ReturnQueryContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnQuery);
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 414; select();
				}
				break;
			case SELECTALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 415; selectAll();
				}
				break;
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 416; collReturnOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public SimpleOperatorsContext simpleOperators() {
			return GetRuleContext<SimpleOperatorsContext>(0);
		}
		public AdvancedOperatorsContext advancedOperators() {
			return GetRuleContext<AdvancedOperatorsContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 50, RULE_operator);
		try {
			State = 421;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419; simpleOperators();
				}
				break;
			case DIVIDE:
			case MULT:
			case MODULO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 420; advancedOperators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleOperatorsContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(GiraphParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public SimpleOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleOperatorsContext simpleOperators() {
		SimpleOperatorsContext _localctx = new SimpleOperatorsContext(Context, State);
		EnterRule(_localctx, 52, RULE_simpleOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdvancedOperatorsContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(GiraphParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GiraphParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(GiraphParser.MODULO, 0); }
		public AdvancedOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advancedOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvancedOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdvancedOperatorsContext advancedOperators() {
		AdvancedOperatorsContext _localctx = new AdvancedOperatorsContext(Context, State);
		EnterRule(_localctx, 54, RULE_advancedOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateParamsContext : ParserRuleContext {
		public PredicateParamContext[] predicateParam() {
			return GetRuleContexts<PredicateParamContext>();
		}
		public PredicateParamContext predicateParam(int i) {
			return GetRuleContext<PredicateParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public PredicateParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateParamsContext predicateParams() {
		PredicateParamsContext _localctx = new PredicateParamsContext(Context, State);
		EnterRule(_localctx, 56, RULE_predicateParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; predicateParam();
			State = 432;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 428; Match(COMMA);
				State = 429; predicateParam();
				}
				}
				State = 434;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateParamContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PredicateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateParamContext predicateParam() {
		PredicateParamContext _localctx = new PredicateParamContext(Context, State);
		EnterRule(_localctx, 58, RULE_predicateParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; allType();
			State = 436; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamsContext : ParserRuleContext {
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public FormalParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamsContext formalParams() {
		FormalParamsContext _localctx = new FormalParamsContext(Context, State);
		EnterRule(_localctx, 60, RULE_formalParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 438; formalParam();
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 439; Match(COMMA);
				State = 440; formalParam();
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(Context, State);
		EnterRule(_localctx, 62, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; allTypeWithColl();
			State = 447; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDclContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode RIGHTARROW() { return GetToken(GiraphParser.RIGHTARROW, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public FormalParamsContext formalParams() {
			return GetRuleContext<FormalParamsContext>(0);
		}
		public FunctionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDclContext functionDcl() {
		FunctionDclContext _localctx = new FunctionDclContext(Context, State);
		EnterRule(_localctx, 64, RULE_functionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449; variable();
			State = 450; Match(RIGHTARROW);
			State = 451; allTypeWithColl();
			State = 452; Match(LP);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << COLLECTION))) != 0)) {
				{
				State = 453; formalParams();
				}
			}

			State = 456; Match(RP);
			State = 457; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public CodeBlockContentContext[] codeBlockContent() {
			return GetRuleContexts<CodeBlockContentContext>();
		}
		public CodeBlockContentContext codeBlockContent(int i) {
			return GetRuleContext<CodeBlockContentContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 66, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; Match(LCB);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << IF) | (1L << FOR) | (1L << FOREACH) | (1L << RETURN) | (1L << WHILE) | (1L << SET) | (1L << SELECT) | (1L << SELECTALL) | (1L << ADD) | (1L << COLLECTION) | (1L << RUN) | (1L << PREDICATE) | (1L << POP) | (1L << PUSH) | (1L << ENQUEUE) | (1L << DEQUEUE) | (1L << REMOVE) | (1L << REMOVEALL) | (1L << EXTRACTMIN) | (1L << EXTRACTMAX) | (1L << PRINT) | (1L << COMMENTSTART))) != 0)) {
				{
				{
				State = 460; codeBlockContent();
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 466; Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(GiraphParser.RETURN, 0); }
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(Context, State);
		EnterRule(_localctx, 68, RULE_returnBlock);
		try {
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 468; Match(RETURN);
				State = 469; runFunction();
				{
				State = 470; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472; Match(RETURN);
				State = 473; boolCompOrExp(0);
				{
				State = 474; Match(SC);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunFunctionContext : ParserRuleContext {
		public ITerminalNode RUN() { return GetToken(GiraphParser.RUN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(GiraphParser.WITH, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public RunFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunFunctionContext runFunction() {
		RunFunctionContext _localctx = new RunFunctionContext(Context, State);
		EnterRule(_localctx, 70, RULE_runFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; Match(RUN);
			State = 479; variable();
			State = 492;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 480; Match(WITH);
				State = 481; Match(LP);
				State = 482; varOrConst();
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 483; Match(COMMA);
					State = 484; varOrConst();
					}
					}
					State = 489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 490; Match(RP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContentContext : ParserRuleContext {
		public IfElseIfElseContext ifElseIfElse() {
			return GetRuleContext<IfElseIfElseContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public LoopDclContext loopDcl() {
			return GetRuleContext<LoopDclContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public QuerySCContext querySC() {
			return GetRuleContext<QuerySCContext>(0);
		}
		public CollNoReturnOpsContext collNoReturnOps() {
			return GetRuleContext<CollNoReturnOpsContext>(0);
		}
		public DequeueOPOneLineContext dequeueOPOneLine() {
			return GetRuleContext<DequeueOPOneLineContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public CodeBlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlockContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlockContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContentContext codeBlockContent() {
		CodeBlockContentContext _localctx = new CodeBlockContentContext(Context, State);
		EnterRule(_localctx, 72, RULE_codeBlockContent);
		try {
			State = 507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 494; ifElseIfElse();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 495; dcls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 496; loopDcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 497; predicate();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 498; returnBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 499; querySC();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 500; collNoReturnOps();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 501; dequeueOPOneLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 502; runFunction();
				{
				State = 503; Match(SC);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 505; print();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 506; comments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrConstContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VarOrConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrConstContext varOrConst() {
		VarOrConstContext _localctx = new VarOrConstContext(Context, State);
		EnterRule(_localctx, 74, RULE_varOrConst);
		try {
			State = 511;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 509; variable();
				}
				break;
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 510; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] VARIABLENAME() { return GetTokens(GiraphParser.VARIABLENAME); }
		public ITerminalNode VARIABLENAME(int i) {
			return GetToken(GiraphParser.VARIABLENAME, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(GiraphParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(GiraphParser.DOT, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 76, RULE_variable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513; Match(VARIABLENAME);
			State = 518;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 514; Match(DOT);
					{
					State = 515; Match(VARIABLENAME);
					}
					}
					} 
				}
				State = 520;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public FloatnumContext floatnum() {
			return GetRuleContext<FloatnumContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 78, RULE_constant);
		try {
			State = 525;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 521; integer();
				}
				break;
			case FLOATNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 522; floatnum();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 523; @bool();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 524; @string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 80, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GiraphParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 82, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatnumContext : ParserRuleContext {
		public ITerminalNode FLOATNUM() { return GetToken(GiraphParser.FLOATNUM, 0); }
		public FloatnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatnumContext floatnum() {
		FloatnumContext _localctx = new FloatnumContext(Context, State);
		EnterRule(_localctx, 84, RULE_floatnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 531; Match(FLOATNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(GiraphParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 86, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public ObjectsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objects; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjects(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectsContext objects() {
		ObjectsContext _localctx = new ObjectsContext(Context, State);
		EnterRule(_localctx, 88, RULE_objects);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfElseContext : ParserRuleContext {
		public ElseifCondContext elseif;
		public ElseCondContext g;
		public ITerminalNode IF() { return GetToken(GiraphParser.IF, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseifCondContext[] elseifCond() {
			return GetRuleContexts<ElseifCondContext>();
		}
		public ElseifCondContext elseifCond(int i) {
			return GetRuleContext<ElseifCondContext>(i);
		}
		public ElseCondContext elseCond() {
			return GetRuleContext<ElseCondContext>(0);
		}
		public IfElseIfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfElse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfElseContext ifElseIfElse() {
		IfElseIfElseContext _localctx = new IfElseIfElseContext(Context, State);
		EnterRule(_localctx, 90, RULE_ifElseIfElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 537; Match(IF);
			State = 538; boolCompOrExp(0);
			State = 539; codeBlock();
			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 540; _localctx.elseif = elseifCond();
				}
				}
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 547;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 546; _localctx.g = elseCond();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifCondContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(GiraphParser.ELSEIF, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseifCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifCond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifCondContext elseifCond() {
		ElseifCondContext _localctx = new ElseifCondContext(Context, State);
		EnterRule(_localctx, 92, RULE_elseifCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(ELSEIF);
			State = 550; boolCompOrExp(0);
			State = 551; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseCondContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(GiraphParser.ELSE, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseCondContext elseCond() {
		ElseCondContext _localctx = new ElseCondContext(Context, State);
		EnterRule(_localctx, 94, RULE_elseCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 553; Match(ELSE);
			State = 554; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolCompOrExpContext : ParserRuleContext {
		public BoolCompOrExpContext left;
		public IToken leftP;
		public IToken rightP;
		public IToken prefix;
		public ExpressionContext exp;
		public PredicateCallContext predi;
		public BoolCompOrExpContext right;
		public BoolCompOrExpContext[] boolCompOrExp() {
			return GetRuleContexts<BoolCompOrExpContext>();
		}
		public BoolCompOrExpContext boolCompOrExp(int i) {
			return GetRuleContext<BoolCompOrExpContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(GiraphParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateCallContext predicateCall() {
			return GetRuleContext<PredicateCallContext>(0);
		}
		public ITerminalNode BOOLOPERATOR() { return GetToken(GiraphParser.BOOLOPERATOR, 0); }
		public AndOrContext andOr() {
			return GetRuleContext<AndOrContext>(0);
		}
		public BoolCompOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolCompOrExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolCompOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolCompOrExpContext boolCompOrExp() {
		return boolCompOrExp(0);
	}

	private BoolCompOrExpContext boolCompOrExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolCompOrExpContext _localctx = new BoolCompOrExpContext(Context, _parentState);
		BoolCompOrExpContext _prevctx = _localctx;
		int _startState = 96;
		EnterRecursionRule(_localctx, 96, RULE_boolCompOrExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 557; _localctx.leftP = Match(LP);
				State = 558; boolCompOrExp(0);
				State = 559; _localctx.rightP = Match(RP);
				}
				break;
			case 2:
				{
				State = 561; _localctx.prefix = Match(NOT);
				State = 562; boolCompOrExp(4);
				}
				break;
			case 3:
				{
				State = 563; _localctx.exp = expression();
				}
				break;
			case 4:
				{
				State = 564; _localctx.predi = predicateCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 575;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolCompOrExpContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_boolCompOrExp);
					State = 567;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 570;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BOOLOPERATOR:
						{
						State = 568; Match(BOOLOPERATOR);
						}
						break;
					case AND:
					case OR:
						{
						State = 569; andOr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 572; _localctx.right = boolCompOrExp(4);
					}
					} 
				}
				State = 577;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,48,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleBoolCompOrExpContext : ParserRuleContext {
		public SimpleBoolCompOrExpContext left;
		public IToken leftP;
		public IToken rightP;
		public IToken prefix;
		public SimpleExpressionContext exp;
		public PredicateCallContext predi;
		public SimpleBoolCompOrExpContext right;
		public SimpleBoolCompOrExpContext[] simpleBoolCompOrExp() {
			return GetRuleContexts<SimpleBoolCompOrExpContext>();
		}
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp(int i) {
			return GetRuleContext<SimpleBoolCompOrExpContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(GiraphParser.NOT, 0); }
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public PredicateCallContext predicateCall() {
			return GetRuleContext<PredicateCallContext>(0);
		}
		public ITerminalNode BOOLOPERATOR() { return GetToken(GiraphParser.BOOLOPERATOR, 0); }
		public AndOrContext andOr() {
			return GetRuleContext<AndOrContext>(0);
		}
		public SimpleBoolCompOrExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleBoolCompOrExp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleBoolCompOrExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
		return simpleBoolCompOrExp(0);
	}

	private SimpleBoolCompOrExpContext simpleBoolCompOrExp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleBoolCompOrExpContext _localctx = new SimpleBoolCompOrExpContext(Context, _parentState);
		SimpleBoolCompOrExpContext _prevctx = _localctx;
		int _startState = 98;
		EnterRecursionRule(_localctx, 98, RULE_simpleBoolCompOrExp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 579; _localctx.leftP = Match(LP);
				State = 580; simpleBoolCompOrExp(0);
				State = 581; _localctx.rightP = Match(RP);
				}
				break;
			case 2:
				{
				State = 583; _localctx.prefix = Match(NOT);
				State = 584; simpleBoolCompOrExp(4);
				}
				break;
			case 3:
				{
				State = 585; _localctx.exp = simpleExpression();
				}
				break;
			case 4:
				{
				State = 586; _localctx.predi = predicateCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 597;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SimpleBoolCompOrExpContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_simpleBoolCompOrExp);
					State = 589;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 592;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BOOLOPERATOR:
						{
						State = 590; Match(BOOLOPERATOR);
						}
						break;
					case AND:
					case OR:
						{
						State = 591; andOr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 594; _localctx.right = simpleBoolCompOrExp(4);
					}
					} 
				}
				State = 599;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode PREDICATE() { return GetToken(GiraphParser.PREDICATE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
			return GetRuleContext<SimpleBoolCompOrExpContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PredicateParamsContext predicateParams() {
			return GetRuleContext<PredicateParamsContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 100, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(PREDICATE);
			State = 601; variable();
			State = 602; Match(LP);
			State = 604;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) {
				{
				State = 603; predicateParams();
				}
			}

			State = 606; Match(RP);
			State = 607; Match(COLON);
			State = 608; Match(LCB);
			State = 609; simpleBoolCompOrExp(0);
			State = 610; Match(RCB);
			{
			State = 611; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateCallContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public PredicateCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateCallContext predicateCall() {
		PredicateCallContext _localctx = new PredicateCallContext(Context, State);
		EnterRule(_localctx, 102, RULE_predicateCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 613; variable();
			{
			State = 614; Match(LP);
			}
			State = 616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << NOT) | (1L << LP) | (1L << SINGLEQUOTE) | (1L << BOOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTEGER - 64)) | (1L << (FLOATNUM - 64)) | (1L << (VARIABLENAME - 64)) | (1L << (STRING - 64)))) != 0)) {
				{
				State = 615; parameters();
				}
			}

			{
			State = 618; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(GiraphParser.WHERE, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
			return GetRuleContext<SimpleBoolCompOrExpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 104, RULE_where);
		try {
			State = 627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 620; Match(WHERE);
				State = 621; Match(LP);
				State = 622; simpleBoolCompOrExp(0);
				State = 623; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 625; Match(WHERE);
				State = 626; simpleBoolCompOrExp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOrContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(GiraphParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(GiraphParser.OR, 0); }
		public AndOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOrContext andOr() {
		AndOrContext _localctx = new AndOrContext(Context, State);
		EnterRule(_localctx, 106, RULE_andOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GiraphParser.EXTEND, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendContext extend() {
		ExtendContext _localctx = new ExtendContext(Context, State);
		EnterRule(_localctx, 108, RULE_extend);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(EXTEND);
			State = 632; objects();
			State = 633; allTypeWithColl();
			{
			State = 634; Match(SINGLEQUOTE);
			}
			State = 635; variable();
			{
			State = 636; Match(SINGLEQUOTE);
			}
			State = 646;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 637; Match(COLON);
				{
				State = 638; Match(SINGLEQUOTE);
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 639; variable();
					}
					}
					State = 642;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==VARIABLENAME );
				{
				State = 644; Match(SINGLEQUOTE);
				}
				}
			}

			{
			State = 648; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(GiraphParser.SELECT, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 110, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 650; Match(SELECT);
			State = 651; Match(FROM);
			State = 652; variable();
			State = 654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 653; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAllContext : ParserRuleContext {
		public ITerminalNode SELECTALL() { return GetToken(GiraphParser.SELECTALL, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SelectAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAll; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAllContext selectAll() {
		SelectAllContext _localctx = new SelectAllContext(Context, State);
		EnterRule(_localctx, 112, RULE_selectAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 656; Match(SELECTALL);
			State = 657; Match(FROM);
			State = 658; variable();
			State = 660;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 659; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddQueryContext : ParserRuleContext {
		public AddToGraphContext addToGraph() {
			return GetRuleContext<AddToGraphContext>(0);
		}
		public AddToCollContext addToColl() {
			return GetRuleContext<AddToCollContext>(0);
		}
		public AddQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddQueryContext addQuery() {
		AddQueryContext _localctx = new AddQueryContext(Context, State);
		EnterRule(_localctx, 114, RULE_addQuery);
		try {
			State = 664;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 662; addToGraph();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; addToColl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToGraphContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VertexDclsContext vertexDcls() {
			return GetRuleContext<VertexDclsContext>(0);
		}
		public EdgeDclsContext edgeDcls() {
			return GetRuleContext<EdgeDclsContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public AddToGraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToGraph; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToGraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToGraphContext addToGraph() {
		AddToGraphContext _localctx = new AddToGraphContext(Context, State);
		EnterRule(_localctx, 116, RULE_addToGraph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 666; Match(ADD);
			State = 669;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERTEXOBJ:
				{
				State = 667; vertexDcls();
				}
				break;
			case EDGEOBJ:
				{
				State = 668; edgeDcls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 671; Match(TO);
			State = 672; variable();
			{
			State = 673; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToCollContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public CollExpressionContext collExpression() {
			return GetRuleContext<CollExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public CollExpressionExtContext[] collExpressionExt() {
			return GetRuleContexts<CollExpressionExtContext>();
		}
		public CollExpressionExtContext collExpressionExt(int i) {
			return GetRuleContext<CollExpressionExtContext>(i);
		}
		public AddToCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToCollContext addToColl() {
		AddToCollContext _localctx = new AddToCollContext(Context, State);
		EnterRule(_localctx, 118, RULE_addToColl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675; Match(ADD);
			State = 676; collExpression();
			State = 680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 677; collExpressionExt();
				}
				}
				State = 682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 683; Match(TO);
			State = 684; variable();
			{
			State = 685; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollExpressionContext : ParserRuleContext {
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public CollExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollExpressionContext collExpression() {
		CollExpressionContext _localctx = new CollExpressionContext(Context, State);
		EnterRule(_localctx, 120, RULE_collExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; boolCompOrExp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollExpressionExtContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(GiraphParser.COMMA, 0); }
		public CollExpressionContext collExpression() {
			return GetRuleContext<CollExpressionContext>(0);
		}
		public CollExpressionExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collExpressionExt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollExpressionExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollExpressionExtContext collExpressionExt() {
		CollExpressionExtContext _localctx = new CollExpressionExtContext(Context, State);
		EnterRule(_localctx, 122, RULE_collExpressionExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 689; Match(COMMA);
			State = 690; collExpression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDclContext : ParserRuleContext {
		public ForeachLoopContext foreachLoop() {
			return GetRuleContext<ForeachLoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public LoopDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDclContext loopDcl() {
		LoopDclContext _localctx = new LoopDclContext(Context, State);
		EnterRule(_localctx, 124, RULE_loopDcl);
		try {
			State = 695;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 692; foreachLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693; whileLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 694; forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachLoopContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(GiraphParser.FOREACH, 0); }
		public ForeachConditionContext foreachCondition() {
			return GetRuleContext<ForeachConditionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ForeachLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachLoopContext foreachLoop() {
		ForeachLoopContext _localctx = new ForeachLoopContext(Context, State);
		EnterRule(_localctx, 126, RULE_foreachLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697; Match(FOREACH);
			State = 698; foreachCondition();
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 699; where();
				}
			}

			State = 702; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(GiraphParser.WHILE, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 128, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704; Match(WHILE);
			State = 705; boolCompOrExp(0);
			State = 706; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(GiraphParser.FOR, 0); }
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 130, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 708; Match(FOR);
			State = 709; forCondition();
			State = 710; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ForConditionInsideContext forConditionInside() {
			return GetRuleContext<ForConditionInsideContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 132, RULE_forCondition);
		try {
			State = 717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712; Match(LP);
				State = 713; forConditionInside();
				State = 714; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716; forConditionInside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionInsideContext : ParserRuleContext {
		public ForConditionStartContext forConditionStart() {
			return GetRuleContext<ForConditionStartContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ForConditionInsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionInside; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionInside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionInsideContext forConditionInside() {
		ForConditionInsideContext _localctx = new ForConditionInsideContext(Context, State);
		EnterRule(_localctx, 134, RULE_forConditionInside);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; forConditionStart();
			State = 720; Match(TO);
			State = 721; expression();
			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 722; Match(COLON);
				{
				State = 723; expression();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionStartContext : ParserRuleContext {
		public ForConditionDclContext forConditionDcl() {
			return GetRuleContext<ForConditionDclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionStartContext forConditionStart() {
		ForConditionStartContext _localctx = new ForConditionStartContext(Context, State);
		EnterRule(_localctx, 136, RULE_forConditionStart);
		try {
			State = 728;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 726; forConditionDcl();
				}
				break;
			case MINUS:
			case LP:
			case SINGLEQUOTE:
			case SELECT:
			case SELECTALL:
			case RUN:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 727; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionDclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
			return GetRuleContext<SimpleBoolCompOrExpContext>(0);
		}
		public ForConditionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionDclContext forConditionDcl() {
		ForConditionDclContext _localctx = new ForConditionDclContext(Context, State);
		EnterRule(_localctx, 138, RULE_forConditionDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 730; Match(TYPE);
			State = 731; variable();
			{
			State = 732; Match(EQUALS);
			State = 733; simpleBoolCompOrExp(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 140, RULE_operation);
		int _la;
		try {
			State = 756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 735; varOrConst();
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 736; @operator();
					State = 737; varOrConst();
					}
					}
					State = 743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744; Match(LP);
				{
				State = 745; varOrConst();
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 746; @operator();
					State = 747; varOrConst();
					}
					}
					State = 753;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 754; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ForeachConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachConditionContext foreachCondition() {
		ForeachConditionContext _localctx = new ForeachConditionContext(Context, State);
		EnterRule(_localctx, 142, RULE_foreachCondition);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 758; Match(LP);
				State = 759; allType();
				State = 760; variable();
				State = 761; Match(IN);
				State = 762; variable();
				State = 763; Match(RP);
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 765; allType();
				State = 766; variable();
				State = 767; Match(IN);
				State = 768; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public AllTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeContext allType() {
		AllTypeContext _localctx = new AllTypeContext(Context, State);
		EnterRule(_localctx, 144, RULE_allType);
		try {
			State = 774;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772; Match(TYPE);
				}
				break;
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773; objects();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeWithCollContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeWithCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypeWithColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypeWithColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeWithCollContext allTypeWithColl() {
		AllTypeWithCollContext _localctx = new AllTypeWithCollContext(Context, State);
		EnterRule(_localctx, 146, RULE_allTypeWithColl);
		try {
			State = 779;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 776; allType();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 777; Match(COLLECTION);
				State = 778; allType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDclContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public CollectionAssignmentContext collectionAssignment() {
			return GetRuleContext<CollectionAssignmentContext>(0);
		}
		public CollectionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDclContext collectionDcl() {
		CollectionDclContext _localctx = new CollectionDclContext(Context, State);
		EnterRule(_localctx, 148, RULE_collectionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 781; Match(COLLECTION);
			State = 782; allType();
			State = 783; variable();
			State = 786;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 784; Match(EQUALS);
				State = 785; collectionAssignment();
				}
			}

			{
			State = 788; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionAssignmentContext : ParserRuleContext {
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CollectionAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionAssignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionAssignmentContext collectionAssignment() {
		CollectionAssignmentContext _localctx = new CollectionAssignmentContext(Context, State);
		EnterRule(_localctx, 150, RULE_collectionAssignment);
		try {
			State = 792;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 790; returnQuery();
				}
				break;
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 791; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQueryContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(GiraphParser.SET, 0); }
		public SetExpressionAtriSimContext[] setExpressionAtriSim() {
			return GetRuleContexts<SetExpressionAtriSimContext>();
		}
		public SetExpressionAtriSimContext setExpressionAtriSim(int i) {
			return GetRuleContext<SetExpressionAtriSimContext>(i);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SetExpressionVariContext[] setExpressionVari() {
			return GetRuleContexts<SetExpressionVariContext>();
		}
		public SetExpressionVariContext setExpressionVari(int i) {
			return GetRuleContext<SetExpressionVariContext>(i);
		}
		public SetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQueryContext setQuery() {
		SetQueryContext _localctx = new SetQueryContext(Context, State);
		EnterRule(_localctx, 152, RULE_setQuery);
		int _la;
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 794; Match(SET);
				State = 795; setExpressionAtriSim();
				State = 800;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 796; Match(COMMA);
					State = 797; setExpressionAtriSim();
					}
					}
					State = 802;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 803; Match(IN);
				State = 804; variable();
				State = 806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 805; where();
					}
				}

				{
				State = 808; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810; Match(SET);
				State = 811; setExpressionVari();
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 812; Match(COMMA);
					State = 813; setExpressionVari();
					}
					}
					State = 818;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 819; where();
					}
				}

				{
				State = 822; Match(SC);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionAtriSimContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
			return GetRuleContext<SimpleBoolCompOrExpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SetExpressionAtriSimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpressionAtriSim; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpressionAtriSim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionAtriSimContext setExpressionAtriSim() {
		SetExpressionAtriSimContext _localctx = new SetExpressionAtriSimContext(Context, State);
		EnterRule(_localctx, 154, RULE_setExpressionAtriSim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 826; attribute();
			}
			{
			State = 827; compoundAssign();
			}
			State = 833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				{
				State = 828; Match(LP);
				State = 829; simpleBoolCompOrExp(0);
				State = 830; Match(RP);
				}
				}
				break;
			case 2:
				{
				{
				State = 832; simpleBoolCompOrExp(0);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionVariContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SetExpressionVariContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpressionVari; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpressionVari(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionVariContext setExpressionVari() {
		SetExpressionVariContext _localctx = new SetExpressionVariContext(Context, State);
		EnterRule(_localctx, 156, RULE_setExpressionVari);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 835; variable();
			}
			{
			State = 836; compoundAssign();
			}
			State = 842;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				{
				State = 837; Match(LP);
				State = 838; boolCompOrExp(0);
				State = 839; Match(RP);
				}
				}
				break;
			case 2:
				{
				{
				State = 841; boolCompOrExp(0);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ITerminalNode COMPOUNDASSIGN() { return GetToken(GiraphParser.COMPOUNDASSIGN, 0); }
		public CompoundAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignContext compoundAssign() {
		CompoundAssignContext _localctx = new CompoundAssignContext(Context, State);
		EnterRule(_localctx, 158, RULE_compoundAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 844;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPOUNDASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 160, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 846; Match(SINGLEQUOTE);
			}
			State = 847; variable();
			{
			State = 848; Match(SINGLEQUOTE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollNoReturnOpsContext : ParserRuleContext {
		public EnqueueOPContext enqueueOP() {
			return GetRuleContext<EnqueueOPContext>(0);
		}
		public PushOPContext pushOP() {
			return GetRuleContext<PushOPContext>(0);
		}
		public CollNoReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collNoReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollNoReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollNoReturnOpsContext collNoReturnOps() {
		CollNoReturnOpsContext _localctx = new CollNoReturnOpsContext(Context, State);
		EnterRule(_localctx, 162, RULE_collNoReturnOps);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850; enqueueOP();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851; pushOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollReturnOpsContext : ParserRuleContext {
		public DequeueOPContext dequeueOP() {
			return GetRuleContext<DequeueOPContext>(0);
		}
		public PopOPContext popOP() {
			return GetRuleContext<PopOPContext>(0);
		}
		public ExtractMinOPContext extractMinOP() {
			return GetRuleContext<ExtractMinOPContext>(0);
		}
		public ExtractMaxOPContext extractMaxOP() {
			return GetRuleContext<ExtractMaxOPContext>(0);
		}
		public CollReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollReturnOpsContext collReturnOps() {
		CollReturnOpsContext _localctx = new CollReturnOpsContext(Context, State);
		EnterRule(_localctx, 164, RULE_collReturnOps);
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854; dequeueOP();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855; popOP();
				}
				break;
			case EXTRACTMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856; extractMinOP();
				}
				break;
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 857; extractMaxOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnqueueOPContext : ParserRuleContext {
		public ITerminalNode ENQUEUE() { return GetToken(GiraphParser.ENQUEUE, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public EnqueueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enqueueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnqueueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnqueueOPContext enqueueOP() {
		EnqueueOPContext _localctx = new EnqueueOPContext(Context, State);
		EnterRule(_localctx, 166, RULE_enqueueOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860; Match(ENQUEUE);
			State = 861; boolCompOrExp(0);
			State = 862; Match(TO);
			State = 863; variable();
			{
			State = 864; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DequeueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPContext dequeueOP() {
		DequeueOPContext _localctx = new DequeueOPContext(Context, State);
		EnterRule(_localctx, 168, RULE_dequeueOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; Match(DEQUEUE);
			State = 867; Match(FROM);
			State = 868; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopOPContext : ParserRuleContext {
		public ITerminalNode POP() { return GetToken(GiraphParser.POP, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PopOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PopOPContext popOP() {
		PopOPContext _localctx = new PopOPContext(Context, State);
		EnterRule(_localctx, 170, RULE_popOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; Match(POP);
			State = 871; Match(FROM);
			State = 872; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushOPContext : ParserRuleContext {
		public ITerminalNode PUSH() { return GetToken(GiraphParser.PUSH, 0); }
		public BoolCompOrExpContext boolCompOrExp() {
			return GetRuleContext<BoolCompOrExpContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PushOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pushOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushOPContext pushOP() {
		PushOPContext _localctx = new PushOPContext(Context, State);
		EnterRule(_localctx, 172, RULE_pushOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(PUSH);
			State = 875; boolCompOrExp(0);
			State = 876; Match(TO);
			State = 877; variable();
			{
			State = 878; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMinOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMIN() { return GetToken(GiraphParser.EXTRACTMIN, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMinOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMinOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMinOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMinOPContext extractMinOP() {
		ExtractMinOPContext _localctx = new ExtractMinOPContext(Context, State);
		EnterRule(_localctx, 174, RULE_extractMinOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; Match(EXTRACTMIN);
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 881; attribute();
				}
			}

			State = 884; Match(FROM);
			State = 885; variable();
			State = 887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 886; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMaxOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMAX() { return GetToken(GiraphParser.EXTRACTMAX, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMaxOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMaxOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMaxOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMaxOPContext extractMaxOP() {
		ExtractMaxOPContext _localctx = new ExtractMaxOPContext(Context, State);
		EnterRule(_localctx, 176, RULE_extractMaxOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889; Match(EXTRACTMAX);
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 890; attribute();
				}
			}

			State = 893; Match(FROM);
			State = 894; variable();
			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 895; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public SimpleBoolCompOrExpContext[] simpleBoolCompOrExp() {
			return GetRuleContexts<SimpleBoolCompOrExpContext>();
		}
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp(int i) {
			return GetRuleContext<SimpleBoolCompOrExpContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 178, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; simpleBoolCompOrExp(0);
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 899; Match(COMMA);
				State = 900; simpleBoolCompOrExp(0);
				}
				}
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(GiraphParser.PRINT, 0); }
		public SimpleBoolCompOrExpContext simpleBoolCompOrExp() {
			return GetRuleContext<SimpleBoolCompOrExpContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 180, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906; Match(PRINT);
			State = 907; simpleBoolCompOrExp(0);
			{
			State = 908; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPOneLineContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public DequeueOPOneLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOPOneLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOPOneLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPOneLineContext dequeueOPOneLine() {
		DequeueOPOneLineContext _localctx = new DequeueOPOneLineContext(Context, State);
		EnterRule(_localctx, 182, RULE_dequeueOPOneLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 910; Match(DEQUEUE);
			State = 911; Match(FROM);
			State = 912; variable();
			State = 914;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 913; where();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLineContext : ParserRuleContext {
		public ITerminalNode COMMENTSTART() { return GetToken(GiraphParser.COMMENTSTART, 0); }
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public CommentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLineContext commentLine() {
		CommentLineContext _localctx = new CommentLineContext(Context, State);
		EnterRule(_localctx, 184, RULE_commentLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916; Match(COMMENTSTART);
			State = 917; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		public CommentLineContext commentLine() {
			return GetRuleContext<CommentLineContext>(0);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 186, RULE_comments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 919; commentLine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveQueryContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(GiraphParser.REMOVE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public RemoveQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveQueryContext removeQuery() {
		RemoveQueryContext _localctx = new RemoveQueryContext(Context, State);
		EnterRule(_localctx, 188, RULE_removeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921; Match(REMOVE);
			State = 922; Match(FROM);
			State = 923; variable();
			State = 925;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 924; where();
				}
			}

			State = 927; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveAllQueryContext : ParserRuleContext {
		public ITerminalNode REMOVEALL() { return GetToken(GiraphParser.REMOVEALL, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public RemoveAllQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeAllQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveAllQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveAllQueryContext removeAllQuery() {
		RemoveAllQueryContext _localctx = new RemoveAllQueryContext(Context, State);
		EnterRule(_localctx, 190, RULE_removeAllQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(REMOVEALL);
			State = 930; Match(FROM);
			State = 931; variable();
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 932; where();
				}
			}

			State = 935; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 48: return boolCompOrExp_sempred((BoolCompOrExpContext)_localctx, predIndex);
		case 49: return simpleBoolCompOrExp_sempred((SimpleBoolCompOrExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolCompOrExp_sempred(BoolCompOrExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool simpleBoolCompOrExp_sempred(SimpleBoolCompOrExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'N', '\x3AC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x3', '\x2', '\x6', '\x2', '\xC4', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\xC5', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\xCF', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xD4', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xD8', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'\xDE', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x5', '\a', '\xE6', '\n', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xF1', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', '\xF5', '\n', '\t', '\f', '\t', '\xE', 
		'\t', '\xF8', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x100', '\n', '\n', '\f', 
		'\n', '\xE', '\n', '\x103', '\v', '\n', '\x3', '\v', '\x5', '\v', '\x106', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', 
		'\v', '\x10C', '\n', '\v', '\f', '\v', '\xE', '\v', '\x10F', '\v', '\v', 
		'\x5', '\v', '\x111', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x119', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x11C', '\v', '\f', '\x3', '\r', '\x5', '\r', 
		'\x11F', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\a', '\r', '\x127', '\n', '\r', '\f', '\r', 
		'\xE', '\r', '\x12A', '\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x5', '\xE', '\x12F', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x6', '\xF', '\x139', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\x13A', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', 
		'\xF', '\x146', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x6', '\x10', '\x14C', '\n', '\x10', '\r', '\x10', '\xE', 
		'\x10', '\x14D', '\x3', '\x10', '\x5', '\x10', '\x151', '\n', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x6', '\x12', '\x159', '\n', '\x12', '\r', '\x12', '\xE', 
		'\x12', '\x15A', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\x166', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x6', '\x13', '\x16C', '\n', '\x13', '\r', '\x13', 
		'\xE', '\x13', '\x16D', '\x3', '\x13', '\x5', '\x13', '\x171', '\n', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', 
		'\x177', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x182', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x186', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', 
		'\x16', '\x18F', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\x193', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x199', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x19F', '\n', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x1A4', '\n', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1A8', '\n', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\x1B1', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\x1B4', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1BC', '\n', 
		' ', '\f', ' ', '\xE', ' ', '\x1BF', '\v', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x5', '\"', '\x1C9', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '#', '\x3', '#', '\a', '#', '\x1D0', '\n', '#', '\f', '#', 
		'\xE', '#', '\x1D3', '\v', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x1DF', '\n', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\a', '%', '\x1E8', '\n', 
		'%', '\f', '%', '\xE', '%', '\x1EB', '\v', '%', '\x3', '%', '\x3', '%', 
		'\x5', '%', '\x1EF', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1FE', '\n', '&', 
		'\x3', '\'', '\x3', '\'', '\x5', '\'', '\x202', '\n', '\'', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\a', '(', '\x207', '\n', '(', '\f', '(', '\xE', 
		'(', '\x20A', '\v', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x210', '\n', ')', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x220', 
		'\n', '/', '\f', '/', '\xE', '/', '\x223', '\v', '/', '\x3', '/', '\x5', 
		'/', '\x226', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x238', '\n', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x23D', 
		'\n', '\x32', '\x3', '\x32', '\a', '\x32', '\x240', '\n', '\x32', '\f', 
		'\x32', '\xE', '\x32', '\x243', '\v', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x24E', '\n', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x253', '\n', '\x33', 
		'\x3', '\x33', '\a', '\x33', '\x256', '\n', '\x33', '\f', '\x33', '\xE', 
		'\x33', '\x259', '\v', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x5', '\x34', '\x25F', '\n', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x26B', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x5', '\x36', '\x276', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x6', '\x38', '\x283', 
		'\n', '\x38', '\r', '\x38', '\xE', '\x38', '\x284', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x289', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', 
		'\x291', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x5', ':', '\x297', '\n', ':', '\x3', ';', '\x3', ';', '\x5', ';', '\x29B', 
		'\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x2A0', '\n', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\a', '=', '\x2A9', '\n', '=', '\f', '=', '\xE', '=', 
		'\x2AC', '\v', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x2BA', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x2BF', '\n', '\x41', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x2D0', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x2D7', '\n', '\x45', '\x3', '\x46', 
		'\x3', '\x46', '\x5', '\x46', '\x2DB', '\n', '\x46', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\a', 'H', '\x2E6', '\n', 'H', '\f', 'H', '\xE', 'H', 
		'\x2E9', '\v', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\a', 'H', '\x2F0', '\n', 'H', '\f', 'H', '\xE', 'H', '\x2F3', '\v', 
		'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x2F7', '\n', 'H', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', 
		'\x305', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x309', '\n', 
		'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x30E', '\n', 'K', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', 
		'\x315', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x31B', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\a', 'N', '\x321', '\n', 'N', '\f', 'N', '\xE', 'N', '\x324', '\v', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x329', '\n', 'N', '\x3', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\a', 
		'N', '\x331', '\n', 'N', '\f', 'N', '\xE', 'N', '\x334', '\v', 'N', '\x3', 
		'N', '\x5', 'N', '\x337', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', 
		'\x33B', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x344', '\n', 'O', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x5', 'P', '\x34D', '\n', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', '\x3', 
		'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x357', 
		'\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x35D', '\n', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'Y', '\x3', 'Y', '\x5', 
		'Y', '\x375', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', 
		'\x37A', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x37E', '\n', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x383', '\n', 'Z', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\a', '[', '\x388', '\n', '[', '\f', 
		'[', '\xE', '[', '\x38B', '\v', '[', '\x3', '\\', '\x3', '\\', '\x3', 
		'\\', '\x3', '\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x5', 
		']', '\x395', '\n', ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '_', 
		'\x3', '_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5', '`', 
		'\x3A0', '\n', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x3A8', '\n', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x2', '\x4', '\x62', '\x64', '\x62', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', 
		'\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 
		't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\x2', '\a', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\n', '\f', 
		'\x3', '\x2', '\x5', '\a', '\x3', '\x2', '\xE', '\xF', '\x4', '\x2', '\x1C', 
		'\x1C', '\x41', '\x41', '\x2', '\x3CA', '\x2', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\xCE', '\x3', '\x2', '\x2', '\x2', '\x6', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\xD7', '\x3', '\x2', '\x2', '\x2', '\n', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x10', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x14', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x145', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x150', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x165', '\x3', '\x2', '\x2', '\x2', '$', '\x170', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x172', '\x3', '\x2', '\x2', '\x2', '(', '\x181', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x18E', '\x3', '\x2', '\x2', '\x2', 
		',', '\x192', '\x3', '\x2', '\x2', '\x2', '.', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1AB', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x1AD', '\x3', '\x2', '\x2', '\x2', '<', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x1B8', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x42', '\x1C3', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x46', '\x1DE', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x1E0', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x1FD', '\x3', '\x2', '\x2', '\x2', 'L', '\x201', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x203', '\x3', '\x2', '\x2', '\x2', 'P', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x213', '\x3', '\x2', '\x2', '\x2', 'V', '\x215', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x217', '\x3', '\x2', '\x2', '\x2', 'Z', '\x219', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x227', '\x3', '\x2', '\x2', '\x2', '`', '\x22B', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x237', '\x3', '\x2', '\x2', '\x2', '\x64', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x25A', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x267', '\x3', '\x2', '\x2', '\x2', 'j', '\x275', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x277', '\x3', '\x2', '\x2', '\x2', 'n', '\x279', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x28C', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x292', '\x3', '\x2', '\x2', '\x2', 't', '\x29A', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x29C', '\x3', '\x2', '\x2', '\x2', 'x', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x2B1', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x2B3', '\x3', '\x2', '\x2', '\x2', '~', '\x2B9', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x82', '\x2C2', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x88', '\x2D1', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x2DA', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x2DC', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x2F6', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x304', '\x3', '\x2', '\x2', '\x2', '\x92', '\x308', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x30D', '\x3', '\x2', '\x2', '\x2', '\x96', '\x30F', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x33C', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x345', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x34E', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\x350', '\x3', '\x2', '\x2', '\x2', 
		'\xA4', '\x356', '\x3', '\x2', '\x2', '\x2', '\xA6', '\x35C', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\x35E', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\x368', '\x3', '\x2', '\x2', '\x2', 
		'\xAE', '\x36C', '\x3', '\x2', '\x2', '\x2', '\xB0', '\x372', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\x37B', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\xB8', '\x390', '\x3', '\x2', '\x2', '\x2', '\xBA', '\x396', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\x399', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x39B', 
		'\x3', '\x2', '\x2', '\x2', '\xC0', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC4', '\x5', '\x4', '\x3', '\x2', '\xC3', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x2', 
		'\x2', '\x3', '\xC8', '\x3', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCF', 
		'\x5', '\x42', '\"', '\x2', '\xCA', '\xCF', '\x5', '\x6', '\x4', '\x2', 
		'\xCB', '\xCF', '\x5', 'n', '\x38', '\x2', '\xCC', '\xCF', '\x5', '\xBC', 
		'_', '\x2', '\xCD', '\xCF', '\x5', '\x66', '\x34', '\x2', '\xCE', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCA', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD4', '\x5', '\b', '\x5', '\x2', 
		'\xD1', '\xD4', '\x5', '\x96', 'L', '\x2', '\xD2', '\xD4', '\x5', '\f', 
		'\a', '\x2', '\xD3', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\a', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD8', '\x5', '\n', 
		'\x6', '\x2', '\xD6', '\xD8', '\x5', '\xE', '\b', '\x2', '\xD7', '\xD5', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\t', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', '\x5', 'Z', 
		'.', '\x2', '\xDA', '\xDD', '\x5', 'N', '(', '\x2', '\xDB', '\xDC', '\a', 
		'\x1C', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x62', '\x32', '\x2', '\xDD', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', '\a', 
		'\x10', '\x2', '\x2', '\xE0', '\v', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE2', '\a', '\x4', '\x2', '\x2', '\xE2', '\xE5', '\x5', 'N', '(', '\x2', 
		'\xE3', '\xE4', '\a', '\x1C', '\x2', '\x2', '\xE4', '\xE6', '\x5', '\x62', 
		'\x32', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE6', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\a', '\x10', '\x2', '\x2', '\xE8', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\x5', '\x2', '\x2', '\xEA', '\xEB', 
		'\x5', 'N', '(', '\x2', '\xEB', '\xEC', '\x5', '\x10', '\t', '\x2', '\xEC', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xED', '\xF6', '\a', '\x18', '\x2', 
		'\x2', '\xEE', '\xF1', '\x5', '\x12', '\n', '\x2', '\xEF', '\xF1', '\x5', 
		'\x16', '\f', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF3', '\a', '\x10', '\x2', '\x2', '\xF3', '\xF5', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\a', '\x19', '\x2', '\x2', '\xFA', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xFB', '\xFC', '\a', '\x6', '\x2', '\x2', '\xFC', '\x101', '\x5', 
		'\x14', '\v', '\x2', '\xFD', '\xFE', '\a', '\x11', '\x2', '\x2', '\xFE', 
		'\x100', '\x5', '\x14', '\v', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x103', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFF', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x13', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x106', '\x5', 'N', '(', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x110', 
		'\a', '\x14', '\x2', '\x2', '\x108', '\x10D', '\x5', '\x1A', '\xE', '\x2', 
		'\x109', '\x10A', '\a', '\x11', '\x2', '\x2', '\x10A', '\x10C', '\x5', 
		'\x1A', '\xE', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x108', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x113', '\a', '\x15', '\x2', '\x2', '\x113', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x115', '\a', '\a', '\x2', '\x2', '\x115', '\x11A', '\x5', 
		'\x18', '\r', '\x2', '\x116', '\x117', '\a', '\x11', '\x2', '\x2', '\x117', 
		'\x119', '\x5', '\x18', '\r', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11F', '\x5', 'N', '(', '\x2', '\x11E', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x120', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', 
		'\a', '\x14', '\x2', '\x2', '\x121', '\x122', '\x5', 'N', '(', '\x2', 
		'\x122', '\x123', '\a', '\x11', '\x2', '\x2', '\x123', '\x128', '\x5', 
		'N', '(', '\x2', '\x124', '\x125', '\a', '\x11', '\x2', '\x2', '\x125', 
		'\x127', '\x5', '\x1A', '\xE', '\x2', '\x126', '\x124', '\x3', '\x2', 
		'\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x128', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x15', '\x2', '\x2', '\x12C', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', '\x92', 'J', 
		'\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x131', '\x5', 'N', '(', '\x2', '\x131', '\x132', '\x5', '\xA0', 
		'Q', '\x2', '\x132', '\x133', '\x5', '\x62', '\x32', '\x2', '\x133', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x138', '\x5', '(', '\x15', '\x2', 
		'\x135', '\x136', '\x5', '\x36', '\x1C', '\x2', '\x136', '\x137', '\x5', 
		'\x1C', '\xF', '\x2', '\x137', '\x139', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\x5', '(', '\x15', '\x2', '\x13D', '\x13E', '\x5', 
		'\x38', '\x1D', '\x2', '\x13E', '\x13F', '\x5', '\x1E', '\x10', '\x2', 
		'\x13F', '\x146', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x5', 
		'(', '\x15', '\x2', '\x141', '\x142', '\x5', '\x38', '\x1D', '\x2', '\x142', 
		'\x143', '\x5', '\x1C', '\xF', '\x2', '\x143', '\x146', '\x3', '\x2', 
		'\x2', '\x2', '\x144', '\x146', '\x5', '(', '\x15', '\x2', '\x145', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x140', '\x3', '\x2', '\x2', '\x2', '\x145', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x147', 
		'\x14B', '\x5', '(', '\x15', '\x2', '\x148', '\x149', '\x5', '\x38', '\x1D', 
		'\x2', '\x149', '\x14A', '\x5', '\x1E', '\x10', '\x2', '\x14A', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x151', '\x5', '(', '\x15', 
		'\x2', '\x150', '\x147', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x151', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x153', '\x5', '\x1C', '\xF', '\x2', '\x153', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x154', '\x158', '\x5', '*', '\x16', '\x2', '\x155', '\x156', 
		'\x5', '\x36', '\x1C', '\x2', '\x156', '\x157', '\x5', '\"', '\x12', '\x2', 
		'\x157', '\x159', '\x3', '\x2', '\x2', '\x2', '\x158', '\x155', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x166', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x5', '*', '\x16', '\x2', '\x15D', '\x15E', '\x5', '\x38', '\x1D', '\x2', 
		'\x15E', '\x15F', '\x5', '$', '\x13', '\x2', '\x15F', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x5', '*', '\x16', '\x2', '\x161', 
		'\x162', '\x5', '\x38', '\x1D', '\x2', '\x162', '\x163', '\x5', '\"', 
		'\x12', '\x2', '\x163', '\x166', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x166', '\x5', '*', '\x16', '\x2', '\x165', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x165', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x164', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '#', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16B', '\x5', '*', 
		'\x16', '\x2', '\x168', '\x169', '\x5', '\x38', '\x1D', '\x2', '\x169', 
		'\x16A', '\x5', '$', '\x13', '\x2', '\x16A', '\x16C', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x171', '\x5', '*', '\x16', '\x2', '\x170', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x171', '%', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x5', 
		'\"', '\x12', '\x2', '\x173', '\'', '\x3', '\x2', '\x2', '\x2', '\x174', 
		'\x177', '\x5', 'N', '(', '\x2', '\x175', '\x177', '\x5', 'P', ')', '\x2', 
		'\x176', '\x174', '\x3', '\x2', '\x2', '\x2', '\x176', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x182', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x182', '\x5', '\x32', '\x1A', '\x2', '\x179', '\x182', '\x5', '\xA2', 
		'R', '\x2', '\x17A', '\x182', '\x5', 'H', '%', '\x2', '\x17B', '\x17C', 
		'\a', '\x14', '\x2', '\x2', '\x17C', '\x17D', '\x5', ' ', '\x11', '\x2', 
		'\x17D', '\x17E', '\a', '\x15', '\x2', '\x2', '\x17E', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x17F', '\x180', '\a', '\t', '\x2', '\x2', '\x180', 
		'\x182', '\x5', '(', '\x15', '\x2', '\x181', '\x176', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x178', '\x3', '\x2', '\x2', '\x2', '\x181', '\x179', 
		'\x3', '\x2', '\x2', '\x2', '\x181', '\x17A', '\x3', '\x2', '\x2', '\x2', 
		'\x181', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x181', '\x17F', '\x3', 
		'\x2', '\x2', '\x2', '\x182', ')', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x186', '\x5', 'N', '(', '\x2', '\x184', '\x186', '\x5', 'P', ')', '\x2', 
		'\x185', '\x183', '\x3', '\x2', '\x2', '\x2', '\x185', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x18F', '\x5', '\xA2', 'R', '\x2', '\x188', '\x189', '\a', '\x14', '\x2', 
		'\x2', '\x189', '\x18A', '\x5', '&', '\x14', '\x2', '\x18A', '\x18B', 
		'\a', '\x15', '\x2', '\x2', '\x18B', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\a', '\t', '\x2', '\x2', '\x18D', '\x18F', '\x5', '*', 
		'\x16', '\x2', '\x18E', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x187', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x188', '\x3', '\x2', '\x2', 
		'\x2', '\x18E', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18F', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x193', '\x5', '\x30', '\x19', '\x2', '\x191', 
		'\x193', '\x5', '\x32', '\x1A', '\x2', '\x192', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x193', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x199', '\x5', '\x30', '\x19', '\x2', 
		'\x195', '\x196', '\x5', '\x32', '\x1A', '\x2', '\x196', '\x197', '\a', 
		'\x10', '\x2', '\x2', '\x197', '\x199', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x198', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '/', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19F', '\x5', 
		'\x9A', 'N', '\x2', '\x19B', '\x19F', '\x5', 't', ';', '\x2', '\x19C', 
		'\x19F', '\x5', '\xC0', '\x61', '\x2', '\x19D', '\x19F', '\x5', '\xBE', 
		'`', '\x2', '\x19E', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x1A0', '\x1A4', '\x5', 'p', '\x39', '\x2', '\x1A1', 
		'\x1A4', '\x5', 'r', ':', '\x2', '\x1A2', '\x1A4', '\x5', '\xA6', 'T', 
		'\x2', '\x1A3', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A4', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A8', '\x5', 
		'\x36', '\x1C', '\x2', '\x1A6', '\x1A8', '\x5', '\x38', '\x1D', '\x2', 
		'\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A6', '\x3', 
		'\x2', '\x2', '\x2', '\x1A8', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1AA', '\t', '\x2', '\x2', '\x2', '\x1AA', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1AC', '\t', '\x3', '\x2', '\x2', '\x1AC', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1B2', '\x5', '<', '\x1F', '\x2', '\x1AE', 
		'\x1AF', '\a', '\x11', '\x2', '\x2', '\x1AF', '\x1B1', '\x5', '<', '\x1F', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B4', 
		'\x3', '\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\x5', '\x92', 'J', '\x2', '\x1B6', '\x1B7', '\x5', 'N', '(', '\x2', '\x1B7', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BD', '\x5', '@', '!', '\x2', 
		'\x1B9', '\x1BA', '\a', '\x11', '\x2', '\x2', '\x1BA', '\x1BC', '\x5', 
		'@', '!', '\x2', '\x1BB', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C0', 
		'\x1C1', '\x5', '\x94', 'K', '\x2', '\x1C1', '\x1C2', '\x5', 'N', '(', 
		'\x2', '\x1C2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', 
		'\x5', 'N', '(', '\x2', '\x1C4', '\x1C5', '\a', '.', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\x5', '\x94', 'K', '\x2', '\x1C6', '\x1C8', '\a', '\x14', '\x2', 
		'\x2', '\x1C7', '\x1C9', '\x5', '>', ' ', '\x2', '\x1C8', '\x1C7', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\a', '\x15', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\x5', '\x44', '#', '\x2', '\x1CC', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1CD', '\x1D1', '\a', '\x16', '\x2', '\x2', '\x1CE', 
		'\x1D0', '\x5', 'J', '&', '\x2', '\x1CF', '\x1CE', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x1D5', '\a', '\x17', '\x2', '\x2', '\x1D5', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\a', '$', '\x2', 
		'\x2', '\x1D7', '\x1D8', '\x5', 'H', '%', '\x2', '\x1D8', '\x1D9', '\a', 
		'\x10', '\x2', '\x2', '\x1D9', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DB', '\a', '$', '\x2', '\x2', '\x1DB', '\x1DC', '\x5', '\x62', '\x32', 
		'\x2', '\x1DC', '\x1DD', '\a', '\x10', '\x2', '\x2', '\x1DD', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DF', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x1E0', '\x1E1', '\a', '/', '\x2', '\x2', '\x1E1', '\x1EE', 
		'\x5', 'N', '(', '\x2', '\x1E2', '\x1E3', '\a', '\x30', '\x2', '\x2', 
		'\x1E3', '\x1E4', '\a', '\x14', '\x2', '\x2', '\x1E4', '\x1E9', '\x5', 
		'L', '\'', '\x2', '\x1E5', '\x1E6', '\a', '\x11', '\x2', '\x2', '\x1E6', 
		'\x1E8', '\x5', 'L', '\'', '\x2', '\x1E7', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E7', 
		'\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E9', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x15', '\x2', '\x2', '\x1ED', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1E2', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1EF', 'I', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1FE', '\x5', '\\', '/', '\x2', '\x1F1', 
		'\x1FE', '\x5', '\x6', '\x4', '\x2', '\x1F2', '\x1FE', '\x5', '~', '@', 
		'\x2', '\x1F3', '\x1FE', '\x5', '\x66', '\x34', '\x2', '\x1F4', '\x1FE', 
		'\x5', '\x46', '$', '\x2', '\x1F5', '\x1FE', '\x5', '.', '\x18', '\x2', 
		'\x1F6', '\x1FE', '\x5', '\xA4', 'S', '\x2', '\x1F7', '\x1FE', '\x5', 
		'\xB8', ']', '\x2', '\x1F8', '\x1F9', '\x5', 'H', '%', '\x2', '\x1F9', 
		'\x1FA', '\a', '\x10', '\x2', '\x2', '\x1FA', '\x1FE', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FE', '\x5', '\xB6', '\\', '\x2', '\x1FC', '\x1FE', 
		'\x5', '\xBC', '_', '\x2', '\x1FD', '\x1F0', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1FD', 
		'\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F5', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD', '\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F7', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', 'K', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x202', '\x5', 'N', '(', '\x2', '\x200', '\x202', '\x5', 'P', ')', '\x2', 
		'\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x200', '\x3', 
		'\x2', '\x2', '\x2', '\x202', 'M', '\x3', '\x2', '\x2', '\x2', '\x203', 
		'\x208', '\a', '\x44', '\x2', '\x2', '\x204', '\x205', '\a', '\x1A', '\x2', 
		'\x2', '\x205', '\x207', '\a', '\x44', '\x2', '\x2', '\x206', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x206', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\x3', 
		'\x2', '\x2', '\x2', '\x209', 'O', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x208', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x210', '\x5', 'T', '+', 
		'\x2', '\x20C', '\x210', '\x5', 'V', ',', '\x2', '\x20D', '\x210', '\x5', 
		'X', '-', '\x2', '\x20E', '\x210', '\x5', 'R', '*', '\x2', '\x20F', '\x20B', 
		'\x3', '\x2', '\x2', '\x2', '\x20F', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x20E', '\x3', 
		'\x2', '\x2', '\x2', '\x210', 'Q', '\x3', '\x2', '\x2', '\x2', '\x211', 
		'\x212', '\a', 'M', '\x2', '\x2', '\x212', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x213', '\x214', '\a', '\x42', '\x2', '\x2', '\x214', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x215', '\x216', '\a', '\x43', '\x2', '\x2', '\x216', 'W', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x218', '\a', '@', '\x2', '\x2', 
		'\x218', 'Y', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\t', '\x4', 
		'\x2', '\x2', '\x21A', '[', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\a', '\x13', '\x2', '\x2', '\x21C', '\x21D', '\x5', '\x62', '\x32', '\x2', 
		'\x21D', '\x221', '\x5', '\x44', '#', '\x2', '\x21E', '\x220', '\x5', 
		'^', '\x30', '\x2', '\x21F', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x223', '\x3', '\x2', '\x2', '\x2', '\x221', '\x21F', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', '\x222', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x223', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x224', '\x226', '\x5', '`', '\x31', '\x2', '\x225', '\x224', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', '\x226', 
		']', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\a', '\x1E', '\x2', 
		'\x2', '\x228', '\x229', '\x5', '\x62', '\x32', '\x2', '\x229', '\x22A', 
		'\x5', '\x44', '#', '\x2', '\x22A', '_', '\x3', '\x2', '\x2', '\x2', '\x22B', 
		'\x22C', '\a', '\x1F', '\x2', '\x2', '\x22C', '\x22D', '\x5', '\x44', 
		'#', '\x2', '\x22D', '\x61', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', 
		'\b', '\x32', '\x1', '\x2', '\x22F', '\x230', '\a', '\x14', '\x2', '\x2', 
		'\x230', '\x231', '\x5', '\x62', '\x32', '\x2', '\x231', '\x232', '\a', 
		'\x15', '\x2', '\x2', '\x232', '\x238', '\x3', '\x2', '\x2', '\x2', '\x233', 
		'\x234', '\a', '\r', '\x2', '\x2', '\x234', '\x238', '\x5', '\x62', '\x32', 
		'\x6', '\x235', '\x238', '\x5', ' ', '\x11', '\x2', '\x236', '\x238', 
		'\x5', 'h', '\x35', '\x2', '\x237', '\x22E', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x233', '\x3', '\x2', '\x2', '\x2', '\x237', '\x235', '\x3', 
		'\x2', '\x2', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23C', '\f', '\x5', '\x2', 
		'\x2', '\x23A', '\x23D', '\a', '\x3', '\x2', '\x2', '\x23B', '\x23D', 
		'\x5', 'l', '\x37', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', 
		'\x23C', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23E', '\x240', '\x5', '\x62', '\x32', '\x6', '\x23F', 
		'\x239', '\x3', '\x2', '\x2', '\x2', '\x240', '\x243', '\x3', '\x2', '\x2', 
		'\x2', '\x241', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', 
		'\x3', '\x2', '\x2', '\x2', '\x242', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x241', '\x3', '\x2', '\x2', '\x2', '\x244', '\x245', '\b', 
		'\x33', '\x1', '\x2', '\x245', '\x246', '\a', '\x14', '\x2', '\x2', '\x246', 
		'\x247', '\x5', '\x64', '\x33', '\x2', '\x247', '\x248', '\a', '\x15', 
		'\x2', '\x2', '\x248', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x249', '\x24A', 
		'\a', '\r', '\x2', '\x2', '\x24A', '\x24E', '\x5', '\x64', '\x33', '\x6', 
		'\x24B', '\x24E', '\x5', '&', '\x14', '\x2', '\x24C', '\x24E', '\x5', 
		'h', '\x35', '\x2', '\x24D', '\x244', '\x3', '\x2', '\x2', '\x2', '\x24D', 
		'\x249', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', '\x3', '\x2', '\x2', 
		'\x2', '\x24D', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x257', 
		'\x3', '\x2', '\x2', '\x2', '\x24F', '\x252', '\f', '\x5', '\x2', '\x2', 
		'\x250', '\x253', '\a', '\x3', '\x2', '\x2', '\x251', '\x253', '\x5', 
		'l', '\x37', '\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', 
		'\x251', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x256', '\x5', '\x64', '\x33', '\x6', '\x255', '\x24F', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x257', '\x255', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', 
		'\x2', '\x2', '\x2', '\x258', '\x65', '\x3', '\x2', '\x2', '\x2', '\x259', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', '\a', '\x32', '\x2', 
		'\x2', '\x25B', '\x25C', '\x5', 'N', '(', '\x2', '\x25C', '\x25E', '\a', 
		'\x14', '\x2', '\x2', '\x25D', '\x25F', '\x5', ':', '\x1E', '\x2', '\x25E', 
		'\x25D', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', 
		'\a', '\x15', '\x2', '\x2', '\x261', '\x262', '\a', '\x12', '\x2', '\x2', 
		'\x262', '\x263', '\a', '\x16', '\x2', '\x2', '\x263', '\x264', '\x5', 
		'\x64', '\x33', '\x2', '\x264', '\x265', '\a', '\x17', '\x2', '\x2', '\x265', 
		'\x266', '\a', '\x10', '\x2', '\x2', '\x266', 'g', '\x3', '\x2', '\x2', 
		'\x2', '\x267', '\x268', '\x5', 'N', '(', '\x2', '\x268', '\x26A', '\a', 
		'\x14', '\x2', '\x2', '\x269', '\x26B', '\x5', '\xB4', '[', '\x2', '\x26A', 
		'\x269', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26D', 
		'\a', '\x15', '\x2', '\x2', '\x26D', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x26F', '\a', '+', '\x2', '\x2', '\x26F', '\x270', '\a', '\x14', 
		'\x2', '\x2', '\x270', '\x271', '\x5', '\x64', '\x33', '\x2', '\x271', 
		'\x272', '\a', '\x15', '\x2', '\x2', '\x272', '\x276', '\x3', '\x2', '\x2', 
		'\x2', '\x273', '\x274', '\a', '+', '\x2', '\x2', '\x274', '\x276', '\x5', 
		'\x64', '\x33', '\x2', '\x275', '\x26E', '\x3', '\x2', '\x2', '\x2', '\x275', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x276', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x277', '\x278', '\t', '\x5', '\x2', '\x2', '\x278', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x279', '\x27A', '\a', '\x31', '\x2', '\x2', '\x27A', 
		'\x27B', '\x5', 'Z', '.', '\x2', '\x27B', '\x27C', '\x5', '\x94', 'K', 
		'\x2', '\x27C', '\x27D', '\a', '\x1B', '\x2', '\x2', '\x27D', '\x27E', 
		'\x5', 'N', '(', '\x2', '\x27E', '\x288', '\a', '\x1B', '\x2', '\x2', 
		'\x27F', '\x280', '\a', '\x12', '\x2', '\x2', '\x280', '\x282', '\a', 
		'\x1B', '\x2', '\x2', '\x281', '\x283', '\x5', 'N', '(', '\x2', '\x282', 
		'\x281', '\x3', '\x2', '\x2', '\x2', '\x283', '\x284', '\x3', '\x2', '\x2', 
		'\x2', '\x284', '\x282', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', 
		'\x3', '\x2', '\x2', '\x2', '\x285', '\x286', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x287', '\a', '\x1B', '\x2', '\x2', '\x287', '\x289', '\x3', 
		'\x2', '\x2', '\x2', '\x288', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x288', 
		'\x289', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x28A', '\x28B', '\a', '\x10', '\x2', '\x2', '\x28B', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28D', '\a', '(', '\x2', '\x2', '\x28D', 
		'\x28E', '\a', '*', '\x2', '\x2', '\x28E', '\x290', '\x5', 'N', '(', '\x2', 
		'\x28F', '\x291', '\x5', 'j', '\x36', '\x2', '\x290', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x291', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\a', ')', '\x2', '\x2', 
		'\x293', '\x294', '\a', '*', '\x2', '\x2', '\x294', '\x296', '\x5', 'N', 
		'(', '\x2', '\x295', '\x297', '\x5', 'j', '\x36', '\x2', '\x296', '\x295', 
		'\x3', '\x2', '\x2', '\x2', '\x296', '\x297', '\x3', '\x2', '\x2', '\x2', 
		'\x297', 's', '\x3', '\x2', '\x2', '\x2', '\x298', '\x29B', '\x5', 'v', 
		'<', '\x2', '\x299', '\x29B', '\x5', 'x', '=', '\x2', '\x29A', '\x298', 
		'\x3', '\x2', '\x2', '\x2', '\x29A', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x29B', 'u', '\x3', '\x2', '\x2', '\x2', '\x29C', '\x29F', '\a', ',', 
		'\x2', '\x2', '\x29D', '\x2A0', '\x5', '\x12', '\n', '\x2', '\x29E', '\x2A0', 
		'\x5', '\x16', '\f', '\x2', '\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x29E', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\a', ' ', '\x2', '\x2', '\x2A2', 
		'\x2A3', '\x5', 'N', '(', '\x2', '\x2A3', '\x2A4', '\a', '\x10', '\x2', 
		'\x2', '\x2A4', 'w', '\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', 
		',', '\x2', '\x2', '\x2A6', '\x2AA', '\x5', 'z', '>', '\x2', '\x2A7', 
		'\x2A9', '\x5', '|', '?', '\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', 
		'\x2', '\x2A9', '\x2AC', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', 
		'\x2AB', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AA', '\x3', 
		'\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\a', ' ', '\x2', '\x2', '\x2AE', 
		'\x2AF', '\x5', 'N', '(', '\x2', '\x2AF', '\x2B0', '\a', '\x10', '\x2', 
		'\x2', '\x2B0', 'y', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', 
		'\x62', '\x32', '\x2', '\x2B2', '{', '\x3', '\x2', '\x2', '\x2', '\x2B3', 
		'\x2B4', '\a', '\x11', '\x2', '\x2', '\x2B4', '\x2B5', '\x5', 'z', '>', 
		'\x2', '\x2B5', '}', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2BA', '\x5', 
		'\x80', '\x41', '\x2', '\x2B7', '\x2BA', '\x5', '\x82', '\x42', '\x2', 
		'\x2B8', '\x2BA', '\x5', '\x84', '\x43', '\x2', '\x2B9', '\x2B6', '\x3', 
		'\x2', '\x2', '\x2', '\x2B9', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x2BB', '\x2BC', '\a', '#', '\x2', '\x2', '\x2BC', '\x2BE', '\x5', 
		'\x90', 'I', '\x2', '\x2BD', '\x2BF', '\x5', 'j', '\x36', '\x2', '\x2BE', 
		'\x2BD', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BF', '\x3', '\x2', '\x2', 
		'\x2', '\x2BF', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2C1', 
		'\x5', '\x44', '#', '\x2', '\x2C1', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x2C2', '\x2C3', '\a', '%', '\x2', '\x2', '\x2C3', '\x2C4', '\x5', '\x62', 
		'\x32', '\x2', '\x2C4', '\x2C5', '\x5', '\x44', '#', '\x2', '\x2C5', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C7', '\a', '\"', '\x2', '\x2', 
		'\x2C7', '\x2C8', '\x5', '\x86', '\x44', '\x2', '\x2C8', '\x2C9', '\x5', 
		'\x44', '#', '\x2', '\x2C9', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2CA', 
		'\x2CB', '\a', '\x14', '\x2', '\x2', '\x2CB', '\x2CC', '\x5', '\x88', 
		'\x45', '\x2', '\x2CC', '\x2CD', '\a', '\x15', '\x2', '\x2', '\x2CD', 
		'\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2CE', '\x2D0', '\x5', '\x88', 
		'\x45', '\x2', '\x2CF', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CF', 
		'\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2D2', '\x5', '\x8A', '\x46', '\x2', '\x2D2', '\x2D3', 
		'\a', ' ', '\x2', '\x2', '\x2D3', '\x2D6', '\x5', ' ', '\x11', '\x2', 
		'\x2D4', '\x2D5', '\a', '\x12', '\x2', '\x2', '\x2D5', '\x2D7', '\x5', 
		' ', '\x11', '\x2', '\x2D6', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2DB', '\x5', '\x8C', 'G', '\x2', '\x2D9', '\x2DB', 
		'\x5', ' ', '\x11', '\x2', '\x2DA', '\x2D8', '\x3', '\x2', '\x2', '\x2', 
		'\x2DA', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x8B', '\x3', 
		'\x2', '\x2', '\x2', '\x2DC', '\x2DD', '\a', '\x4', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\x5', 'N', '(', '\x2', '\x2DE', '\x2DF', '\a', '\x1C', '\x2', 
		'\x2', '\x2DF', '\x2E0', '\x5', '\x64', '\x33', '\x2', '\x2E0', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E7', '\x5', 'L', '\'', '\x2', 
		'\x2E2', '\x2E3', '\x5', '\x34', '\x1B', '\x2', '\x2E3', '\x2E4', '\x5', 
		'L', '\'', '\x2', '\x2E4', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E5', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2E6', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2E7', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2F7', '\x3', '\x2', '\x2', '\x2', 
		'\x2E9', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2EB', '\a', 
		'\x14', '\x2', '\x2', '\x2EB', '\x2F1', '\x5', 'L', '\'', '\x2', '\x2EC', 
		'\x2ED', '\x5', '\x34', '\x1B', '\x2', '\x2ED', '\x2EE', '\x5', 'L', '\'', 
		'\x2', '\x2EE', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2EC', 
		'\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F2', '\x3', 
		'\x2', '\x2', '\x2', '\x2F2', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F4', '\x2F5', '\a', '\x15', '\x2', 
		'\x2', '\x2F5', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\x2F7', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\a', '\x14', 
		'\x2', '\x2', '\x2F9', '\x2FA', '\x5', '\x92', 'J', '\x2', '\x2FA', '\x2FB', 
		'\x5', 'N', '(', '\x2', '\x2FB', '\x2FC', '\a', '!', '\x2', '\x2', '\x2FC', 
		'\x2FD', '\x5', 'N', '(', '\x2', '\x2FD', '\x2FE', '\a', '\x15', '\x2', 
		'\x2', '\x2FE', '\x305', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', 
		'\x5', '\x92', 'J', '\x2', '\x300', '\x301', '\x5', 'N', '(', '\x2', '\x301', 
		'\x302', '\a', '!', '\x2', '\x2', '\x302', '\x303', '\x5', 'N', '(', '\x2', 
		'\x303', '\x305', '\x3', '\x2', '\x2', '\x2', '\x304', '\x2F8', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x305', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x306', '\x309', '\a', '\x4', '\x2', 
		'\x2', '\x307', '\x309', '\x5', 'Z', '.', '\x2', '\x308', '\x306', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x307', '\x3', '\x2', '\x2', '\x2', '\x309', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30E', '\x5', '\x92', 'J', 
		'\x2', '\x30B', '\x30C', '\a', '-', '\x2', '\x2', '\x30C', '\x30E', '\x5', 
		'\x92', 'J', '\x2', '\x30D', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30D', 
		'\x30B', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x310', '\a', '-', '\x2', '\x2', '\x310', '\x311', '\x5', 
		'\x92', 'J', '\x2', '\x311', '\x314', '\x5', 'N', '(', '\x2', '\x312', 
		'\x313', '\a', '\x1C', '\x2', '\x2', '\x313', '\x315', '\x5', '\x98', 
		'M', '\x2', '\x314', '\x312', '\x3', '\x2', '\x2', '\x2', '\x314', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\x3', '\x2', '\x2', '\x2', 
		'\x316', '\x317', '\a', '\x10', '\x2', '\x2', '\x317', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x318', '\x31B', '\x5', '\x32', '\x1A', '\x2', '\x319', 
		'\x31B', '\x5', 'N', '(', '\x2', '\x31A', '\x318', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', '\x319', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\a', '\'', '\x2', '\x2', 
		'\x31D', '\x322', '\x5', '\x9C', 'O', '\x2', '\x31E', '\x31F', '\a', '\x11', 
		'\x2', '\x2', '\x31F', '\x321', '\x5', '\x9C', 'O', '\x2', '\x320', '\x31E', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x324', '\x3', '\x2', '\x2', '\x2', 
		'\x322', '\x320', '\x3', '\x2', '\x2', '\x2', '\x322', '\x323', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x325', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\a', '!', '\x2', 
		'\x2', '\x326', '\x328', '\x5', 'N', '(', '\x2', '\x327', '\x329', '\x5', 
		'j', '\x36', '\x2', '\x328', '\x327', '\x3', '\x2', '\x2', '\x2', '\x328', 
		'\x329', '\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32A', '\x32B', '\a', '\x10', '\x2', '\x2', '\x32B', '\x33B', 
		'\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', '\a', '\'', '\x2', '\x2', 
		'\x32D', '\x332', '\x5', '\x9E', 'P', '\x2', '\x32E', '\x32F', '\a', '\x11', 
		'\x2', '\x2', '\x32F', '\x331', '\x5', '\x9E', 'P', '\x2', '\x330', '\x32E', 
		'\x3', '\x2', '\x2', '\x2', '\x331', '\x334', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x330', '\x3', '\x2', '\x2', '\x2', '\x332', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x333', '\x336', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x332', '\x3', '\x2', '\x2', '\x2', '\x335', '\x337', '\x5', 'j', '\x36', 
		'\x2', '\x336', '\x335', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x337', '\x338', '\x3', '\x2', '\x2', '\x2', 
		'\x338', '\x339', '\a', '\x10', '\x2', '\x2', '\x339', '\x33B', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x32C', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x33C', '\x33D', '\x5', '\xA2', 'R', '\x2', '\x33D', '\x343', 
		'\x5', '\xA0', 'Q', '\x2', '\x33E', '\x33F', '\a', '\x14', '\x2', '\x2', 
		'\x33F', '\x340', '\x5', '\x64', '\x33', '\x2', '\x340', '\x341', '\a', 
		'\x15', '\x2', '\x2', '\x341', '\x344', '\x3', '\x2', '\x2', '\x2', '\x342', 
		'\x344', '\x5', '\x64', '\x33', '\x2', '\x343', '\x33E', '\x3', '\x2', 
		'\x2', '\x2', '\x343', '\x342', '\x3', '\x2', '\x2', '\x2', '\x344', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x345', '\x346', '\x5', 'N', '(', '\x2', 
		'\x346', '\x34C', '\x5', '\xA0', 'Q', '\x2', '\x347', '\x348', '\a', '\x14', 
		'\x2', '\x2', '\x348', '\x349', '\x5', '\x62', '\x32', '\x2', '\x349', 
		'\x34A', '\a', '\x15', '\x2', '\x2', '\x34A', '\x34D', '\x3', '\x2', '\x2', 
		'\x2', '\x34B', '\x34D', '\x5', '\x62', '\x32', '\x2', '\x34C', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x34C', '\x34B', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34F', '\t', '\x6', 
		'\x2', '\x2', '\x34F', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', 
		'\a', '\x1B', '\x2', '\x2', '\x351', '\x352', '\x5', 'N', '(', '\x2', 
		'\x352', '\x353', '\a', '\x1B', '\x2', '\x2', '\x353', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x354', '\x357', '\x5', '\xA8', 'U', '\x2', '\x355', 
		'\x357', '\x5', '\xAE', 'X', '\x2', '\x356', '\x354', '\x3', '\x2', '\x2', 
		'\x2', '\x356', '\x355', '\x3', '\x2', '\x2', '\x2', '\x357', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x358', '\x35D', '\x5', '\xAA', 'V', '\x2', 
		'\x359', '\x35D', '\x5', '\xAC', 'W', '\x2', '\x35A', '\x35D', '\x5', 
		'\xB0', 'Y', '\x2', '\x35B', '\x35D', '\x5', '\xB2', 'Z', '\x2', '\x35C', 
		'\x358', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x359', '\x3', '\x2', '\x2', 
		'\x2', '\x35C', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35B', 
		'\x3', '\x2', '\x2', '\x2', '\x35D', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x35E', '\x35F', '\a', '\x36', '\x2', '\x2', '\x35F', '\x360', '\x5', 
		'\x62', '\x32', '\x2', '\x360', '\x361', '\a', ' ', '\x2', '\x2', '\x361', 
		'\x362', '\x5', 'N', '(', '\x2', '\x362', '\x363', '\a', '\x10', '\x2', 
		'\x2', '\x363', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x364', '\x365', 
		'\a', '\x37', '\x2', '\x2', '\x365', '\x366', '\a', '*', '\x2', '\x2', 
		'\x366', '\x367', '\x5', 'N', '(', '\x2', '\x367', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\x368', '\x369', '\a', '\x33', '\x2', '\x2', '\x369', '\x36A', 
		'\a', '*', '\x2', '\x2', '\x36A', '\x36B', '\x5', 'N', '(', '\x2', '\x36B', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', '\a', '\x34', '\x2', 
		'\x2', '\x36D', '\x36E', '\x5', '\x62', '\x32', '\x2', '\x36E', '\x36F', 
		'\a', ' ', '\x2', '\x2', '\x36F', '\x370', '\x5', 'N', '(', '\x2', '\x370', 
		'\x371', '\a', '\x10', '\x2', '\x2', '\x371', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x372', '\x374', '\a', ';', '\x2', '\x2', '\x373', '\x375', '\x5', 
		'\xA2', 'R', '\x2', '\x374', '\x373', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', '\x3', '\x2', '\x2', 
		'\x2', '\x376', '\x377', '\a', '*', '\x2', '\x2', '\x377', '\x379', '\x5', 
		'N', '(', '\x2', '\x378', '\x37A', '\x5', 'j', '\x36', '\x2', '\x379', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', '\x3', '\x2', '\x2', 
		'\x2', '\x37A', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37D', 
		'\a', '<', '\x2', '\x2', '\x37C', '\x37E', '\x5', '\xA2', 'R', '\x2', 
		'\x37D', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', 
		'\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', 
		'\x380', '\a', '*', '\x2', '\x2', '\x380', '\x382', '\x5', 'N', '(', '\x2', 
		'\x381', '\x383', '\x5', 'j', '\x36', '\x2', '\x382', '\x381', '\x3', 
		'\x2', '\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\x384', '\x389', '\x5', '\x64', '\x33', 
		'\x2', '\x385', '\x386', '\a', '\x11', '\x2', '\x2', '\x386', '\x388', 
		'\x5', '\x64', '\x33', '\x2', '\x387', '\x385', '\x3', '\x2', '\x2', '\x2', 
		'\x388', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x389', '\x387', '\x3', 
		'\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', 
		'\x2', '\x38C', '\x38D', '\a', '=', '\x2', '\x2', '\x38D', '\x38E', '\x5', 
		'\x64', '\x33', '\x2', '\x38E', '\x38F', '\a', '\x10', '\x2', '\x2', '\x38F', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\x390', '\x391', '\a', '\x37', '\x2', 
		'\x2', '\x391', '\x392', '\a', '*', '\x2', '\x2', '\x392', '\x394', '\x5', 
		'N', '(', '\x2', '\x393', '\x395', '\x5', 'j', '\x36', '\x2', '\x394', 
		'\x393', '\x3', '\x2', '\x2', '\x2', '\x394', '\x395', '\x3', '\x2', '\x2', 
		'\x2', '\x395', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', 
		'\a', '?', '\x2', '\x2', '\x397', '\x398', '\a', 'M', '\x2', '\x2', '\x398', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\x399', '\x39A', '\x5', '\xBA', '^', 
		'\x2', '\x39A', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', 
		'\a', '\x39', '\x2', '\x2', '\x39C', '\x39D', '\a', '*', '\x2', '\x2', 
		'\x39D', '\x39F', '\x5', 'N', '(', '\x2', '\x39E', '\x3A0', '\x5', 'j', 
		'\x36', '\x2', '\x39F', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39F', 
		'\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', '\x3', '\x2', '\x2', 
		'\x2', '\x3A1', '\x3A2', '\a', '\x10', '\x2', '\x2', '\x3A2', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\a', ':', '\x2', '\x2', 
		'\x3A4', '\x3A5', '\a', '*', '\x2', '\x2', '\x3A5', '\x3A7', '\x5', 'N', 
		'(', '\x2', '\x3A6', '\x3A8', '\x5', 'j', '\x36', '\x2', '\x3A7', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\x3A8', '\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\a', 
		'\x10', '\x2', '\x2', '\x3AA', '\xC1', '\x3', '\x2', '\x2', '\x2', '^', 
		'\xC5', '\xCE', '\xD3', '\xD7', '\xDD', '\xE5', '\xF0', '\xF6', '\x101', 
		'\x105', '\x10D', '\x110', '\x11A', '\x11E', '\x128', '\x12E', '\x13A', 
		'\x145', '\x14D', '\x150', '\x15A', '\x165', '\x16D', '\x170', '\x176', 
		'\x181', '\x185', '\x18E', '\x192', '\x198', '\x19E', '\x1A3', '\x1A7', 
		'\x1B2', '\x1BD', '\x1C8', '\x1D1', '\x1DE', '\x1E9', '\x1EE', '\x1FD', 
		'\x201', '\x208', '\x20F', '\x221', '\x225', '\x237', '\x23C', '\x241', 
		'\x24D', '\x252', '\x257', '\x25E', '\x26A', '\x275', '\x284', '\x288', 
		'\x290', '\x296', '\x29A', '\x29F', '\x2AA', '\x2B9', '\x2BE', '\x2CF', 
		'\x2D6', '\x2DA', '\x2E7', '\x2F1', '\x2F6', '\x304', '\x308', '\x30D', 
		'\x314', '\x31A', '\x322', '\x328', '\x332', '\x336', '\x33A', '\x343', 
		'\x34C', '\x356', '\x35C', '\x374', '\x379', '\x37D', '\x382', '\x389', 
		'\x394', '\x39F', '\x3A7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
