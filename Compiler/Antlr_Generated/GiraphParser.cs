//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GiraphParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GiraphParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLOPERATOR=1, TYPE=2, GRAPHOBJ=3, VERTEXOBJ=4, EDGEOBJ=5, PLUS=6, MINUS=7, 
		DIVIDE=8, MULT=9, MODULO=10, NOT=11, AND=12, OR=13, SC=14, COMMA=15, COLON=16, 
		IF=17, LP=18, RP=19, LCB=20, RCB=21, LSB=22, RSB=23, DOT=24, SINGLEQUOTE=25, 
		EQUALS=26, QUOTE=27, ELSEIF=28, ELSE=29, TO=30, IN=31, FOR=32, FOREACH=33, 
		RETURN=34, WHILE=35, DO=36, SET=37, SELECT=38, SELECTALL=39, FROM=40, 
		WHERE=41, ADD=42, COLLECTION=43, RIGHTARROW=44, RUN=45, WITH=46, EXTEND=47, 
		PREDICATE=48, POP=49, PUSH=50, PEEK=51, ENQUEUE=52, DEQUEUE=53, CONDITIONSEP=54, 
		REMOVE=55, REMOVEALL=56, EXTRACTMIN=57, EXTRACTMAX=58, PRINT=59, INF=60, 
		UNDERSCORE=61, COMMENTSTART=62, BOOL=63, COMPOUNDASSIGN=64, INTEGER=65, 
		FLOATNUM=66, VARIABLENAME=67, LETTER=68, LOWLETTER=69, CAPLETTER=70, ZERO=71, 
		DIGITNZ=72, FUNCTIONID=73, WhiteSpace=74, WS=75, STRING=76, SPECIALCHARS=77;
	public const int
		RULE_start = 0, RULE_program = 1, RULE_dcls = 2, RULE_objectDcl = 3, RULE_singleObjectDcl = 4, 
		RULE_variableDcl = 5, RULE_graphInitDcl = 6, RULE_graphDclBlock = 7, RULE_vertexDcls = 8, 
		RULE_vertexDcl = 9, RULE_edgeDcls = 10, RULE_edgeDcl = 11, RULE_assignment = 12, 
		RULE_expression = 13, RULE_simpleExpression = 14, RULE_operand = 15, RULE_simpleOperand = 16, 
		RULE_query = 17, RULE_querySC = 18, RULE_noReturnQuery = 19, RULE_returnQuery = 20, 
		RULE_operator = 21, RULE_simpleOperators = 22, RULE_advancedOperators = 23, 
		RULE_formalParams = 24, RULE_formalParam = 25, RULE_functionDcl = 26, 
		RULE_codeBlock = 27, RULE_returnBlock = 28, RULE_runFunction = 29, RULE_codeBlockContent = 30, 
		RULE_varOrConst = 31, RULE_variable = 32, RULE_constant = 33, RULE_string = 34, 
		RULE_integer = 35, RULE_floatnum = 36, RULE_bool = 37, RULE_objects = 38, 
		RULE_ifElseIfElse = 39, RULE_elseifCond = 40, RULE_elseCond = 41, RULE_boolComparisons = 42, 
		RULE_simpleBoolComparison = 43, RULE_predicate = 44, RULE_predicateCall = 45, 
		RULE_where = 46, RULE_andOr = 47, RULE_extend = 48, RULE_select = 49, 
		RULE_selectAll = 50, RULE_addQuery = 51, RULE_addToGraph = 52, RULE_addToColl = 53, 
		RULE_collExpression = 54, RULE_collExpressionExt = 55, RULE_loopDcl = 56, 
		RULE_foreachLoop = 57, RULE_whileLoop = 58, RULE_doWhileLoop = 59, RULE_forLoop = 60, 
		RULE_forCondition = 61, RULE_forConditionInside = 62, RULE_forConditionStart = 63, 
		RULE_forConditionDcl = 64, RULE_operation = 65, RULE_inlineDcl = 66, RULE_foreachCondition = 67, 
		RULE_allType = 68, RULE_allTypeWithColl = 69, RULE_collectionDcl = 70, 
		RULE_collectionAssignment = 71, RULE_setQuery = 72, RULE_graphSetQuery = 73, 
		RULE_setExpressionAtri = 74, RULE_setExpressionAtriSim = 75, RULE_setExpressionVari = 76, 
		RULE_compoundAssign = 77, RULE_attribute = 78, RULE_setOneAttri = 79, 
		RULE_collNoReturnOps = 80, RULE_collReturnOps = 81, RULE_enqueueOP = 82, 
		RULE_dequeueOP = 83, RULE_popOP = 84, RULE_pushOP = 85, RULE_extractMinOP = 86, 
		RULE_extractMaxOP = 87, RULE_parameters = 88, RULE_printOptions = 89, 
		RULE_printOption = 90, RULE_print = 91, RULE_dequeueOPOneLine = 92, RULE_commentLine = 93, 
		RULE_comments = 94, RULE_removeQuery = 95, RULE_removeAllQuery = 96;
	public static readonly string[] ruleNames = {
		"start", "program", "dcls", "objectDcl", "singleObjectDcl", "variableDcl", 
		"graphInitDcl", "graphDclBlock", "vertexDcls", "vertexDcl", "edgeDcls", 
		"edgeDcl", "assignment", "expression", "simpleExpression", "operand", 
		"simpleOperand", "query", "querySC", "noReturnQuery", "returnQuery", "operator", 
		"simpleOperators", "advancedOperators", "formalParams", "formalParam", 
		"functionDcl", "codeBlock", "returnBlock", "runFunction", "codeBlockContent", 
		"varOrConst", "variable", "constant", "string", "integer", "floatnum", 
		"bool", "objects", "ifElseIfElse", "elseifCond", "elseCond", "boolComparisons", 
		"simpleBoolComparison", "predicate", "predicateCall", "where", "andOr", 
		"extend", "select", "selectAll", "addQuery", "addToGraph", "addToColl", 
		"collExpression", "collExpressionExt", "loopDcl", "foreachLoop", "whileLoop", 
		"doWhileLoop", "forLoop", "forCondition", "forConditionInside", "forConditionStart", 
		"forConditionDcl", "operation", "inlineDcl", "foreachCondition", "allType", 
		"allTypeWithColl", "collectionDcl", "collectionAssignment", "setQuery", 
		"graphSetQuery", "setExpressionAtri", "setExpressionAtriSim", "setExpressionVari", 
		"compoundAssign", "attribute", "setOneAttri", "collNoReturnOps", "collReturnOps", 
		"enqueueOP", "dequeueOP", "popOP", "pushOP", "extractMinOP", "extractMaxOP", 
		"parameters", "printOptions", "printOption", "print", "dequeueOPOneLine", 
		"commentLine", "comments", "removeQuery", "removeAllQuery"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'graph'", "'vertex'", "'edge'", "'+'", "'-'", "'/'", 
		"'*'", "'%'", "'!'", "'&'", "'|'", "';'", "','", "':'", "'if'", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'.'", "'''", "'='", "'\"'", "'elseif'", 
		"'else'", "'to'", "'in'", "'for'", "'foreach'", "'return'", "'while'", 
		"'do'", "'set'", "'select'", "'selectall'", "'from'", "'where'", "'add'", 
		"'collection'", "'->'", "'run'", "'with'", "'extend'", "'predicate'", 
		"'pop'", "'push'", "'peek'", "'enqueue'", "'dequeue'", null, "'remove'", 
		"'removeall'", "'extractmin'", "'extractmax'", "'print'", "'inf'", "'_'", 
		"'//'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLOPERATOR", "TYPE", "GRAPHOBJ", "VERTEXOBJ", "EDGEOBJ", "PLUS", 
		"MINUS", "DIVIDE", "MULT", "MODULO", "NOT", "AND", "OR", "SC", "COMMA", 
		"COLON", "IF", "LP", "RP", "LCB", "RCB", "LSB", "RSB", "DOT", "SINGLEQUOTE", 
		"EQUALS", "QUOTE", "ELSEIF", "ELSE", "TO", "IN", "FOR", "FOREACH", "RETURN", 
		"WHILE", "DO", "SET", "SELECT", "SELECTALL", "FROM", "WHERE", "ADD", "COLLECTION", 
		"RIGHTARROW", "RUN", "WITH", "EXTEND", "PREDICATE", "POP", "PUSH", "PEEK", 
		"ENQUEUE", "DEQUEUE", "CONDITIONSEP", "REMOVE", "REMOVEALL", "EXTRACTMIN", 
		"EXTRACTMAX", "PRINT", "INF", "UNDERSCORE", "COMMENTSTART", "BOOL", "COMPOUNDASSIGN", 
		"INTEGER", "FLOATNUM", "VARIABLENAME", "LETTER", "LOWLETTER", "CAPLETTER", 
		"ZERO", "DIGITNZ", "FUNCTIONID", "WhiteSpace", "WS", "STRING", "SPECIALCHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GiraphParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GiraphParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GiraphParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GiraphParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GiraphParser.Eof, 0); }
		public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 194; program();
				}
				}
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << COLLECTION) | (1L << EXTEND) | (1L << PREDICATE) | (1L << COMMENTSTART))) != 0) || _la==VARIABLENAME );
			State = 199; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunctionDclContext functionDcl() {
			return GetRuleContext<FunctionDclContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public ExtendContext extend() {
			return GetRuleContext<ExtendContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			State = 206;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; functionDcl();
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; dcls();
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 203; extend();
				}
				break;
			case COMMENTSTART:
				EnterOuterAlt(_localctx, 4);
				{
				State = 204; comments();
				}
				break;
			case PREDICATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 205; predicate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclsContext : ParserRuleContext {
		public ObjectDclContext objectDcl() {
			return GetRuleContext<ObjectDclContext>(0);
		}
		public CollectionDclContext collectionDcl() {
			return GetRuleContext<CollectionDclContext>(0);
		}
		public VariableDclContext variableDcl() {
			return GetRuleContext<VariableDclContext>(0);
		}
		public DclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclsContext dcls() {
		DclsContext _localctx = new DclsContext(Context, State);
		EnterRule(_localctx, 4, RULE_dcls);
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 208; objectDcl();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 209; collectionDcl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 210; variableDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDclContext : ParserRuleContext {
		public SingleObjectDclContext singleObjectDcl() {
			return GetRuleContext<SingleObjectDclContext>(0);
		}
		public GraphInitDclContext graphInitDcl() {
			return GetRuleContext<GraphInitDclContext>(0);
		}
		public ObjectDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDclContext objectDcl() {
		ObjectDclContext _localctx = new ObjectDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectDcl);
		try {
			State = 215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213; singleObjectDcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; graphInitDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleObjectDclContext : ParserRuleContext {
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SingleObjectDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleObjectDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleObjectDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleObjectDclContext singleObjectDcl() {
		SingleObjectDclContext _localctx = new SingleObjectDclContext(Context, State);
		EnterRule(_localctx, 8, RULE_singleObjectDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; objects();
			State = 218; variable();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 219; Match(EQUALS);
				State = 222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 220; expression();
					}
					break;
				case 2:
					{
					State = 221; variable();
					}
					break;
				}
				}
			}

			{
			State = 226; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDclContext variableDcl() {
		VariableDclContext _localctx = new VariableDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_variableDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(TYPE);
			State = 229; variable();
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 230; Match(EQUALS);
				State = 231; expression();
				}
			}

			{
			State = 234; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphInitDclContext : ParserRuleContext {
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GraphDclBlockContext graphDclBlock() {
			return GetRuleContext<GraphDclBlockContext>(0);
		}
		public GraphInitDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphInitDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphInitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphInitDclContext graphInitDcl() {
		GraphInitDclContext _localctx = new GraphInitDclContext(Context, State);
		EnterRule(_localctx, 12, RULE_graphInitDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236; Match(GRAPHOBJ);
			State = 237; variable();
			State = 238; graphDclBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphDclBlockContext : ParserRuleContext {
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public GraphSetQueryContext[] graphSetQuery() {
			return GetRuleContexts<GraphSetQueryContext>();
		}
		public GraphSetQueryContext graphSetQuery(int i) {
			return GetRuleContext<GraphSetQueryContext>(i);
		}
		public VertexDclsContext[] vertexDcls() {
			return GetRuleContexts<VertexDclsContext>();
		}
		public VertexDclsContext vertexDcls(int i) {
			return GetRuleContext<VertexDclsContext>(i);
		}
		public EdgeDclsContext[] edgeDcls() {
			return GetRuleContexts<EdgeDclsContext>();
		}
		public EdgeDclsContext edgeDcls(int i) {
			return GetRuleContext<EdgeDclsContext>(i);
		}
		public ITerminalNode[] SC() { return GetTokens(GiraphParser.SC); }
		public ITerminalNode SC(int i) {
			return GetToken(GiraphParser.SC, i);
		}
		public GraphDclBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphDclBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphDclBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphDclBlockContext graphDclBlock() {
		GraphDclBlockContext _localctx = new GraphDclBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_graphDclBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(LCB);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << SET))) != 0)) {
				{
				State = 248;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 241; graphSetQuery();
					}
					break;
				case VERTEXOBJ:
					{
					{
					State = 242; vertexDcls();
					{
					State = 243; Match(SC);
					}
					}
					}
					break;
				case EDGEOBJ:
					{
					{
					State = 245; edgeDcls();
					{
					State = 246; Match(SC);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 252;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 253; Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public VertexDclContext[] vertexDcl() {
			return GetRuleContexts<VertexDclContext>();
		}
		public VertexDclContext vertexDcl(int i) {
			return GetRuleContext<VertexDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclsContext vertexDcls() {
		VertexDclsContext _localctx = new VertexDclsContext(Context, State);
		EnterRule(_localctx, 16, RULE_vertexDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255; Match(VERTEXOBJ);
			State = 256; vertexDcl();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 257; Match(COMMA);
				State = 258; vertexDcl();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclContext vertexDcl() {
		VertexDclContext _localctx = new VertexDclContext(Context, State);
		EnterRule(_localctx, 18, RULE_vertexDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 264; variable();
				}
			}

			{
			State = 267; Match(LP);
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0) || _la==VARIABLENAME) {
				{
				State = 268; assignment();
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 269; Match(COMMA);
					State = 270; assignment();
					}
					}
					State = 275;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 278; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclsContext : ParserRuleContext {
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public EdgeDclContext[] edgeDcl() {
			return GetRuleContexts<EdgeDclContext>();
		}
		public EdgeDclContext edgeDcl(int i) {
			return GetRuleContext<EdgeDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public EdgeDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclsContext edgeDcls() {
		EdgeDclsContext _localctx = new EdgeDclsContext(Context, State);
		EnterRule(_localctx, 20, RULE_edgeDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280; Match(EDGEOBJ);
			State = 281; edgeDcl();
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 282; Match(COMMA);
				State = 283; edgeDcl();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public EdgeDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclContext edgeDcl() {
		EdgeDclContext _localctx = new EdgeDclContext(Context, State);
		EnterRule(_localctx, 22, RULE_edgeDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 289; variable();
				}
			}

			{
			State = 292; Match(LP);
			State = 293; variable();
			{
			State = 294; Match(COMMA);
			}
			State = 295; variable();
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 296; Match(COMMA);
				State = 297; assignment();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 303; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) {
				{
				State = 305; allType();
				}
			}

			State = 308; variable();
			State = 309; compoundAssign();
			State = 310; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312; operand();
			State = 318;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 313; @operator();
					State = 314; operand();
					}
					} 
				}
				State = 320;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpressionContext : ParserRuleContext {
		public SimpleOperandContext[] simpleOperand() {
			return GetRuleContexts<SimpleOperandContext>();
		}
		public SimpleOperandContext simpleOperand(int i) {
			return GetRuleContext<SimpleOperandContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public SimpleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpressionContext simpleExpression() {
		SimpleExpressionContext _localctx = new SimpleExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_simpleExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; simpleOperand();
			State = 327;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 322; @operator();
					State = 323; simpleOperand();
					}
					} 
				}
				State = 329;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public OperandContext operand() {
			return GetRuleContext<OperandContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		OperandContext _localctx = new OperandContext(Context, State);
		EnterRule(_localctx, 30, RULE_operand);
		try {
			State = 343;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLENAME:
					{
					State = 330; variable();
					}
					break;
				case INF:
				case BOOL:
				case INTEGER:
				case FLOATNUM:
				case STRING:
					{
					State = 331; constant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 334; returnQuery();
				}
				break;
			case SINGLEQUOTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 335; attribute();
				}
				break;
			case RUN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 336; runFunction();
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 5);
				{
				State = 337; Match(LP);
				State = 338; operand();
				State = 339; Match(RP);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 341; Match(MINUS);
				}
				State = 342; operand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleOperandContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleOperandContext simpleOperand() {
			return GetRuleContext<SimpleOperandContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public SimpleOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleOperandContext simpleOperand() {
		SimpleOperandContext _localctx = new SimpleOperandContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleOperand);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLENAME:
					{
					State = 345; variable();
					}
					break;
				case INF:
				case BOOL:
				case INTEGER:
				case FLOATNUM:
				case STRING:
					{
					State = 346; constant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SINGLEQUOTE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; attribute();
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; Match(LP);
				State = 351; simpleOperand();
				State = 352; Match(RP);
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 354; Match(MINUS);
				}
				State = 355; simpleOperand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public NoReturnQueryContext noReturnQuery() {
			return GetRuleContext<NoReturnQueryContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 34, RULE_query);
		try {
			State = 360;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case REMOVE:
			case REMOVEALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 358; noReturnQuery();
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 359; returnQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySCContext : ParserRuleContext {
		public NoReturnQueryContext noReturnQuery() {
			return GetRuleContext<NoReturnQueryContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public QuerySCContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySC; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuerySC(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuerySCContext querySC() {
		QuerySCContext _localctx = new QuerySCContext(Context, State);
		EnterRule(_localctx, 36, RULE_querySC);
		try {
			State = 366;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
			case REMOVE:
			case REMOVEALL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 362; noReturnQuery();
				}
				break;
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; returnQuery();
				{
				State = 364; Match(SC);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoReturnQueryContext : ParserRuleContext {
		public SetQueryContext setQuery() {
			return GetRuleContext<SetQueryContext>(0);
		}
		public AddQueryContext addQuery() {
			return GetRuleContext<AddQueryContext>(0);
		}
		public RemoveAllQueryContext removeAllQuery() {
			return GetRuleContext<RemoveAllQueryContext>(0);
		}
		public RemoveQueryContext removeQuery() {
			return GetRuleContext<RemoveQueryContext>(0);
		}
		public NoReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noReturnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoReturnQueryContext noReturnQuery() {
		NoReturnQueryContext _localctx = new NoReturnQueryContext(Context, State);
		EnterRule(_localctx, 38, RULE_noReturnQuery);
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 368; setQuery();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 369; addQuery();
				}
				break;
			case REMOVEALL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 370; removeAllQuery();
				}
				break;
			case REMOVE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 371; removeQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnQueryContext : ParserRuleContext {
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public SelectAllContext selectAll() {
			return GetRuleContext<SelectAllContext>(0);
		}
		public CollReturnOpsContext collReturnOps() {
			return GetRuleContext<CollReturnOpsContext>(0);
		}
		public ReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnQueryContext returnQuery() {
		ReturnQueryContext _localctx = new ReturnQueryContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnQuery);
		try {
			State = 377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 374; select();
				}
				break;
			case SELECTALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; selectAll();
				}
				break;
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376; collReturnOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public SimpleOperatorsContext simpleOperators() {
			return GetRuleContext<SimpleOperatorsContext>(0);
		}
		public AdvancedOperatorsContext advancedOperators() {
			return GetRuleContext<AdvancedOperatorsContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_operator);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; simpleOperators();
				}
				break;
			case DIVIDE:
			case MULT:
			case MODULO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; advancedOperators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleOperatorsContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(GiraphParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public SimpleOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleOperatorsContext simpleOperators() {
		SimpleOperatorsContext _localctx = new SimpleOperatorsContext(Context, State);
		EnterRule(_localctx, 44, RULE_simpleOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 383;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdvancedOperatorsContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(GiraphParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GiraphParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(GiraphParser.MODULO, 0); }
		public AdvancedOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advancedOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvancedOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdvancedOperatorsContext advancedOperators() {
		AdvancedOperatorsContext _localctx = new AdvancedOperatorsContext(Context, State);
		EnterRule(_localctx, 46, RULE_advancedOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamsContext : ParserRuleContext {
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public FormalParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamsContext formalParams() {
		FormalParamsContext _localctx = new FormalParamsContext(Context, State);
		EnterRule(_localctx, 48, RULE_formalParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 387; formalParam();
			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 388; Match(COMMA);
				State = 389; formalParam();
				}
				}
				State = 394;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(Context, State);
		EnterRule(_localctx, 50, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; allTypeWithColl();
			State = 396; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDclContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode RIGHTARROW() { return GetToken(GiraphParser.RIGHTARROW, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public FormalParamsContext formalParams() {
			return GetRuleContext<FormalParamsContext>(0);
		}
		public FunctionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDclContext functionDcl() {
		FunctionDclContext _localctx = new FunctionDclContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; variable();
			State = 399; Match(RIGHTARROW);
			State = 400; allTypeWithColl();
			State = 401; Match(LP);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << COLLECTION))) != 0)) {
				{
				State = 402; formalParams();
				}
			}

			State = 405; Match(RP);
			State = 406; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public CodeBlockContentContext[] codeBlockContent() {
			return GetRuleContexts<CodeBlockContentContext>();
		}
		public CodeBlockContentContext codeBlockContent(int i) {
			return GetRuleContext<CodeBlockContentContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(LCB);
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << IF) | (1L << FOR) | (1L << FOREACH) | (1L << RETURN) | (1L << WHILE) | (1L << DO) | (1L << SET) | (1L << SELECT) | (1L << SELECTALL) | (1L << ADD) | (1L << COLLECTION) | (1L << RUN) | (1L << PREDICATE) | (1L << POP) | (1L << PUSH) | (1L << ENQUEUE) | (1L << DEQUEUE) | (1L << REMOVE) | (1L << REMOVEALL) | (1L << EXTRACTMIN) | (1L << EXTRACTMAX) | (1L << PRINT) | (1L << COMMENTSTART))) != 0)) {
				{
				{
				State = 409; codeBlockContent();
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 415; Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(GiraphParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(Context, State);
		EnterRule(_localctx, 56, RULE_returnBlock);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 417; Match(RETURN);
				State = 418; expression();
				{
				State = 419; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 421; Match(RETURN);
				State = 422; runFunction();
				{
				State = 423; Match(SC);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 425; Match(RETURN);
				State = 426; boolComparisons(0);
				{
				State = 427; Match(SC);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunFunctionContext : ParserRuleContext {
		public ITerminalNode RUN() { return GetToken(GiraphParser.RUN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(GiraphParser.WITH, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public RunFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunFunctionContext runFunction() {
		RunFunctionContext _localctx = new RunFunctionContext(Context, State);
		EnterRule(_localctx, 58, RULE_runFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431; Match(RUN);
			State = 432; variable();
			State = 445;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 433; Match(WITH);
				State = 434; Match(LP);
				State = 435; varOrConst();
				State = 440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 436; Match(COMMA);
					State = 437; varOrConst();
					}
					}
					State = 442;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 443; Match(RP);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContentContext : ParserRuleContext {
		public IfElseIfElseContext ifElseIfElse() {
			return GetRuleContext<IfElseIfElseContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public LoopDclContext loopDcl() {
			return GetRuleContext<LoopDclContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public QuerySCContext querySC() {
			return GetRuleContext<QuerySCContext>(0);
		}
		public CollNoReturnOpsContext collNoReturnOps() {
			return GetRuleContext<CollNoReturnOpsContext>(0);
		}
		public DequeueOPOneLineContext dequeueOPOneLine() {
			return GetRuleContext<DequeueOPOneLineContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public CodeBlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlockContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlockContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContentContext codeBlockContent() {
		CodeBlockContentContext _localctx = new CodeBlockContentContext(Context, State);
		EnterRule(_localctx, 60, RULE_codeBlockContent);
		try {
			State = 460;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; ifElseIfElse();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448; dcls();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 449; loopDcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 450; predicate();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 451; returnBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 452; querySC();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 453; collNoReturnOps();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 454; dequeueOPOneLine();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 455; runFunction();
				{
				State = 456; Match(SC);
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 458; print();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 459; comments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrConstContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VarOrConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrConstContext varOrConst() {
		VarOrConstContext _localctx = new VarOrConstContext(Context, State);
		EnterRule(_localctx, 62, RULE_varOrConst);
		try {
			State = 464;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 462; variable();
				}
				break;
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 463; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] VARIABLENAME() { return GetTokens(GiraphParser.VARIABLENAME); }
		public ITerminalNode VARIABLENAME(int i) {
			return GetToken(GiraphParser.VARIABLENAME, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(GiraphParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(GiraphParser.DOT, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 466; Match(VARIABLENAME);
			State = 471;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 467; Match(DOT);
					{
					State = 468; Match(VARIABLENAME);
					}
					}
					} 
				}
				State = 473;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public FloatnumContext floatnum() {
			return GetRuleContext<FloatnumContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode INF() { return GetToken(GiraphParser.INF, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 66, RULE_constant);
		try {
			State = 479;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 474; integer();
				}
				break;
			case FLOATNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 475; floatnum();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 476; @bool();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 477; @string();
				}
				break;
			case INF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 478; Match(INF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 68, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GiraphParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 70, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 483; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatnumContext : ParserRuleContext {
		public ITerminalNode FLOATNUM() { return GetToken(GiraphParser.FLOATNUM, 0); }
		public FloatnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatnumContext floatnum() {
		FloatnumContext _localctx = new FloatnumContext(Context, State);
		EnterRule(_localctx, 72, RULE_floatnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 485; Match(FLOATNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(GiraphParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 74, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public ObjectsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objects; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjects(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectsContext objects() {
		ObjectsContext _localctx = new ObjectsContext(Context, State);
		EnterRule(_localctx, 76, RULE_objects);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfElseContext : ParserRuleContext {
		public ElseifCondContext elseif;
		public ElseCondContext g;
		public ITerminalNode IF() { return GetToken(GiraphParser.IF, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseifCondContext[] elseifCond() {
			return GetRuleContexts<ElseifCondContext>();
		}
		public ElseifCondContext elseifCond(int i) {
			return GetRuleContext<ElseifCondContext>(i);
		}
		public ElseCondContext elseCond() {
			return GetRuleContext<ElseCondContext>(0);
		}
		public IfElseIfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfElse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfElseContext ifElseIfElse() {
		IfElseIfElseContext _localctx = new IfElseIfElseContext(Context, State);
		EnterRule(_localctx, 78, RULE_ifElseIfElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 491; Match(IF);
			State = 492; boolComparisons(0);
			State = 493; codeBlock();
			State = 497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 494; _localctx.elseif = elseifCond();
				}
				}
				State = 499;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 500; _localctx.g = elseCond();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseifCondContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(GiraphParser.ELSEIF, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseifCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseifCond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseifCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseifCondContext elseifCond() {
		ElseifCondContext _localctx = new ElseifCondContext(Context, State);
		EnterRule(_localctx, 80, RULE_elseifCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; Match(ELSEIF);
			State = 504; boolComparisons(0);
			State = 505; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseCondContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(GiraphParser.ELSE, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ElseCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCond; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseCondContext elseCond() {
		ElseCondContext _localctx = new ElseCondContext(Context, State);
		EnterRule(_localctx, 82, RULE_elseCond);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 507; Match(ELSE);
			State = 508; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolComparisonsContext : ParserRuleContext {
		public BoolComparisonsContext left;
		public IToken leftP;
		public IToken rightP;
		public IToken prefix;
		public ExpressionContext exp;
		public PredicateCallContext predi;
		public BoolComparisonsContext right;
		public BoolComparisonsContext[] boolComparisons() {
			return GetRuleContexts<BoolComparisonsContext>();
		}
		public BoolComparisonsContext boolComparisons(int i) {
			return GetRuleContext<BoolComparisonsContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(GiraphParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PredicateCallContext predicateCall() {
			return GetRuleContext<PredicateCallContext>(0);
		}
		public ITerminalNode BOOLOPERATOR() { return GetToken(GiraphParser.BOOLOPERATOR, 0); }
		public AndOrContext andOr() {
			return GetRuleContext<AndOrContext>(0);
		}
		public BoolComparisonsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolComparisons; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolComparisons(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolComparisonsContext boolComparisons() {
		return boolComparisons(0);
	}

	private BoolComparisonsContext boolComparisons(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolComparisonsContext _localctx = new BoolComparisonsContext(Context, _parentState);
		BoolComparisonsContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_boolComparisons, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 519;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 511; _localctx.leftP = Match(LP);
				State = 512; boolComparisons(0);
				State = 513; _localctx.rightP = Match(RP);
				}
				break;
			case 2:
				{
				State = 515; _localctx.prefix = Match(NOT);
				State = 516; boolComparisons(4);
				}
				break;
			case 3:
				{
				State = 517; _localctx.exp = expression();
				}
				break;
			case 4:
				{
				State = 518; _localctx.predi = predicateCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 529;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BoolComparisonsContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_boolComparisons);
					State = 521;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 524;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BOOLOPERATOR:
						{
						State = 522; Match(BOOLOPERATOR);
						}
						break;
					case AND:
					case OR:
						{
						State = 523; andOr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 526; _localctx.right = boolComparisons(4);
					}
					} 
				}
				State = 531;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleBoolComparisonContext : ParserRuleContext {
		public SimpleBoolComparisonContext left;
		public IToken leftP;
		public IToken rightP;
		public IToken prefix;
		public SimpleExpressionContext exp;
		public PredicateCallContext predi;
		public SimpleBoolComparisonContext right;
		public SimpleBoolComparisonContext[] simpleBoolComparison() {
			return GetRuleContexts<SimpleBoolComparisonContext>();
		}
		public SimpleBoolComparisonContext simpleBoolComparison(int i) {
			return GetRuleContext<SimpleBoolComparisonContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(GiraphParser.NOT, 0); }
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public PredicateCallContext predicateCall() {
			return GetRuleContext<PredicateCallContext>(0);
		}
		public ITerminalNode BOOLOPERATOR() { return GetToken(GiraphParser.BOOLOPERATOR, 0); }
		public AndOrContext andOr() {
			return GetRuleContext<AndOrContext>(0);
		}
		public SimpleBoolComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleBoolComparison; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleBoolComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleBoolComparisonContext simpleBoolComparison() {
		return simpleBoolComparison(0);
	}

	private SimpleBoolComparisonContext simpleBoolComparison(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleBoolComparisonContext _localctx = new SimpleBoolComparisonContext(Context, _parentState);
		SimpleBoolComparisonContext _prevctx = _localctx;
		int _startState = 86;
		EnterRecursionRule(_localctx, 86, RULE_simpleBoolComparison, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 533; _localctx.leftP = Match(LP);
				State = 534; simpleBoolComparison(0);
				State = 535; _localctx.rightP = Match(RP);
				}
				break;
			case 2:
				{
				State = 537; _localctx.prefix = Match(NOT);
				State = 538; simpleBoolComparison(4);
				}
				break;
			case 3:
				{
				State = 539; _localctx.exp = simpleExpression();
				}
				break;
			case 4:
				{
				State = 540; _localctx.predi = predicateCall();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 551;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SimpleBoolComparisonContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_simpleBoolComparison);
					State = 543;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 546;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case BOOLOPERATOR:
						{
						State = 544; Match(BOOLOPERATOR);
						}
						break;
					case AND:
					case OR:
						{
						State = 545; andOr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 548; _localctx.right = simpleBoolComparison(4);
					}
					} 
				}
				State = 553;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode PREDICATE() { return GetToken(GiraphParser.PREDICATE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public FormalParamsContext formalParams() {
			return GetRuleContext<FormalParamsContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public SimpleBoolComparisonContext simpleBoolComparison() {
			return GetRuleContext<SimpleBoolComparisonContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 88, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; Match(PREDICATE);
			State = 555; variable();
			State = 556; Match(LP);
			State = 557; formalParams();
			State = 558; Match(RP);
			State = 559; Match(COLON);
			State = 560; Match(LCB);
			State = 561; simpleBoolComparison(0);
			State = 562; Match(RCB);
			{
			State = 563; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateCallContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public PredicateCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateCallContext predicateCall() {
		PredicateCallContext _localctx = new PredicateCallContext(Context, State);
		EnterRule(_localctx, 90, RULE_predicateCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565; variable();
			{
			State = 566; Match(LP);
			}
			State = 567; parameters();
			{
			State = 568; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(GiraphParser.WHERE, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleBoolComparisonContext simpleBoolComparison() {
			return GetRuleContext<SimpleBoolComparisonContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 92, RULE_where);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 570; Match(WHERE);
				State = 571; Match(LP);
				State = 572; simpleBoolComparison(0);
				State = 573; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 575; Match(WHERE);
				State = 576; simpleBoolComparison(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOrContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(GiraphParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(GiraphParser.OR, 0); }
		public AndOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOrContext andOr() {
		AndOrContext _localctx = new AndOrContext(Context, State);
		EnterRule(_localctx, 94, RULE_andOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GiraphParser.EXTEND, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendContext extend() {
		ExtendContext _localctx = new ExtendContext(Context, State);
		EnterRule(_localctx, 96, RULE_extend);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(EXTEND);
			State = 582; objects();
			State = 583; allTypeWithColl();
			{
			State = 584; Match(SINGLEQUOTE);
			}
			State = 585; variable();
			{
			State = 586; Match(SINGLEQUOTE);
			}
			State = 596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 587; Match(COLON);
				{
				State = 588; Match(SINGLEQUOTE);
				}
				State = 590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 589; variable();
					}
					}
					State = 592;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==VARIABLENAME );
				{
				State = 594; Match(SINGLEQUOTE);
				}
				}
			}

			State = 600;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 598; Match(EQUALS);
				State = 599; constant();
				}
			}

			{
			State = 602; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(GiraphParser.SELECT, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 98, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; Match(SELECT);
			State = 605; Match(FROM);
			State = 606; variable();
			State = 608;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 607; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAllContext : ParserRuleContext {
		public ITerminalNode SELECTALL() { return GetToken(GiraphParser.SELECTALL, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SelectAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAll; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAllContext selectAll() {
		SelectAllContext _localctx = new SelectAllContext(Context, State);
		EnterRule(_localctx, 100, RULE_selectAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 610; Match(SELECTALL);
			State = 611; Match(FROM);
			State = 612; variable();
			State = 614;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				{
				State = 613; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddQueryContext : ParserRuleContext {
		public AddToGraphContext addToGraph() {
			return GetRuleContext<AddToGraphContext>(0);
		}
		public AddToCollContext addToColl() {
			return GetRuleContext<AddToCollContext>(0);
		}
		public AddQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddQueryContext addQuery() {
		AddQueryContext _localctx = new AddQueryContext(Context, State);
		EnterRule(_localctx, 102, RULE_addQuery);
		try {
			State = 618;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 616; addToGraph();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 617; addToColl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToGraphContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VertexDclsContext vertexDcls() {
			return GetRuleContext<VertexDclsContext>(0);
		}
		public EdgeDclsContext edgeDcls() {
			return GetRuleContext<EdgeDclsContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public AddToGraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToGraph; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToGraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToGraphContext addToGraph() {
		AddToGraphContext _localctx = new AddToGraphContext(Context, State);
		EnterRule(_localctx, 104, RULE_addToGraph);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; Match(ADD);
			State = 623;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERTEXOBJ:
				{
				State = 621; vertexDcls();
				}
				break;
			case EDGEOBJ:
				{
				State = 622; edgeDcls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 625; Match(TO);
			State = 626; variable();
			{
			State = 627; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToCollContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public CollExpressionContext collExpression() {
			return GetRuleContext<CollExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public CollExpressionExtContext[] collExpressionExt() {
			return GetRuleContexts<CollExpressionExtContext>();
		}
		public CollExpressionExtContext collExpressionExt(int i) {
			return GetRuleContext<CollExpressionExtContext>(i);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public AddToCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToCollContext addToColl() {
		AddToCollContext _localctx = new AddToCollContext(Context, State);
		EnterRule(_localctx, 106, RULE_addToColl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 629; Match(ADD);
			State = 630; collExpression();
			State = 634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 631; collExpressionExt();
				}
				}
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 637; Match(TO);
			State = 638; variable();
			{
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 639; where();
				}
			}

			}
			{
			State = 642; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public CollExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollExpressionContext collExpression() {
		CollExpressionContext _localctx = new CollExpressionContext(Context, State);
		EnterRule(_localctx, 108, RULE_collExpression);
		try {
			State = 649;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 644; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 645; Match(LP);
				State = 646; expression();
				State = 647; Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollExpressionExtContext : ParserRuleContext {
		public ITerminalNode COMMA() { return GetToken(GiraphParser.COMMA, 0); }
		public CollExpressionContext collExpression() {
			return GetRuleContext<CollExpressionContext>(0);
		}
		public CollExpressionExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collExpressionExt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollExpressionExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollExpressionExtContext collExpressionExt() {
		CollExpressionExtContext _localctx = new CollExpressionExtContext(Context, State);
		EnterRule(_localctx, 110, RULE_collExpressionExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 651; Match(COMMA);
			State = 652; collExpression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDclContext : ParserRuleContext {
		public ForeachLoopContext foreachLoop() {
			return GetRuleContext<ForeachLoopContext>(0);
		}
		public WhileLoopContext whileLoop() {
			return GetRuleContext<WhileLoopContext>(0);
		}
		public DoWhileLoopContext doWhileLoop() {
			return GetRuleContext<DoWhileLoopContext>(0);
		}
		public ForLoopContext forLoop() {
			return GetRuleContext<ForLoopContext>(0);
		}
		public LoopDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDclContext loopDcl() {
		LoopDclContext _localctx = new LoopDclContext(Context, State);
		EnterRule(_localctx, 112, RULE_loopDcl);
		try {
			State = 658;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOREACH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 654; foreachLoop();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 655; whileLoop();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 656; doWhileLoop();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 4);
				{
				State = 657; forLoop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachLoopContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(GiraphParser.FOREACH, 0); }
		public ForeachConditionContext foreachCondition() {
			return GetRuleContext<ForeachConditionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ForeachLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachLoopContext foreachLoop() {
		ForeachLoopContext _localctx = new ForeachLoopContext(Context, State);
		EnterRule(_localctx, 114, RULE_foreachLoop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; Match(FOREACH);
			State = 661; foreachCondition();
			State = 663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 662; where();
				}
			}

			State = 665; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileLoopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(GiraphParser.WHILE, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public WhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileLoopContext whileLoop() {
		WhileLoopContext _localctx = new WhileLoopContext(Context, State);
		EnterRule(_localctx, 116, RULE_whileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667; Match(WHILE);
			State = 668; boolComparisons(0);
			State = 669; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileLoopContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(GiraphParser.DO, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(GiraphParser.WHILE, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public DoWhileLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileLoopContext doWhileLoop() {
		DoWhileLoopContext _localctx = new DoWhileLoopContext(Context, State);
		EnterRule(_localctx, 118, RULE_doWhileLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671; Match(DO);
			State = 672; codeBlock();
			State = 673; Match(WHILE);
			State = 674; boolComparisons(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForLoopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(GiraphParser.FOR, 0); }
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ForLoopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forLoop; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForLoop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForLoopContext forLoop() {
		ForLoopContext _localctx = new ForLoopContext(Context, State);
		EnterRule(_localctx, 120, RULE_forLoop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 676; Match(FOR);
			State = 677; forCondition();
			State = 678; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ForConditionInsideContext forConditionInside() {
			return GetRuleContext<ForConditionInsideContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 122, RULE_forCondition);
		try {
			State = 685;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 680; Match(LP);
				State = 681; forConditionInside();
				State = 682; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 684; forConditionInside();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionInsideContext : ParserRuleContext {
		public ForConditionStartContext forConditionStart() {
			return GetRuleContext<ForConditionStartContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ForConditionInsideContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionInside; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionInside(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionInsideContext forConditionInside() {
		ForConditionInsideContext _localctx = new ForConditionInsideContext(Context, State);
		EnterRule(_localctx, 124, RULE_forConditionInside);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687; forConditionStart();
			State = 688; Match(TO);
			State = 689; expression();
			State = 692;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 690; Match(COLON);
				{
				State = 691; expression();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionStartContext : ParserRuleContext {
		public ForConditionDclContext forConditionDcl() {
			return GetRuleContext<ForConditionDclContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionStart; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionStartContext forConditionStart() {
		ForConditionStartContext _localctx = new ForConditionStartContext(Context, State);
		EnterRule(_localctx, 126, RULE_forConditionStart);
		try {
			State = 696;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 694; forConditionDcl();
				}
				break;
			case MINUS:
			case LP:
			case SINGLEQUOTE:
			case SELECT:
			case SELECTALL:
			case RUN:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 695; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionDclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForConditionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forConditionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForConditionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionDclContext forConditionDcl() {
		ForConditionDclContext _localctx = new ForConditionDclContext(Context, State);
		EnterRule(_localctx, 128, RULE_forConditionDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 698; Match(TYPE);
			State = 699; variable();
			{
			State = 700; Match(EQUALS);
			State = 701; expression();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperationContext : ParserRuleContext {
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public OperatorContext[] @operator() {
			return GetRuleContexts<OperatorContext>();
		}
		public OperatorContext @operator(int i) {
			return GetRuleContext<OperatorContext>(i);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public OperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operation; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperationContext operation() {
		OperationContext _localctx = new OperationContext(Context, State);
		EnterRule(_localctx, 130, RULE_operation);
		int _la;
		try {
			State = 724;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				{
				State = 703; varOrConst();
				State = 709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 704; @operator();
					State = 705; varOrConst();
					}
					}
					State = 711;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case LP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 712; Match(LP);
				{
				State = 713; varOrConst();
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 714; @operator();
					State = 715; varOrConst();
					}
					}
					State = 721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 722; Match(RP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDclContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public ITerminalNode VARIABLENAME() { return GetToken(GiraphParser.VARIABLENAME, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public OperationContext operation() {
			return GetRuleContext<OperationContext>(0);
		}
		public InlineDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDclContext inlineDcl() {
		InlineDclContext _localctx = new InlineDclContext(Context, State);
		EnterRule(_localctx, 132, RULE_inlineDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 726; allType();
			State = 727; Match(VARIABLENAME);
			State = 728; Match(EQUALS);
			State = 729; operation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ForeachConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachConditionContext foreachCondition() {
		ForeachConditionContext _localctx = new ForeachConditionContext(Context, State);
		EnterRule(_localctx, 134, RULE_foreachCondition);
		try {
			State = 743;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 731; Match(LP);
				State = 732; allType();
				State = 733; variable();
				State = 734; Match(IN);
				State = 735; variable();
				State = 736; Match(RP);
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 738; allType();
				State = 739; variable();
				State = 740; Match(IN);
				State = 741; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public AllTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeContext allType() {
		AllTypeContext _localctx = new AllTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_allType);
		try {
			State = 747;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745; Match(TYPE);
				}
				break;
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 746; objects();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeWithCollContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeWithCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypeWithColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypeWithColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeWithCollContext allTypeWithColl() {
		AllTypeWithCollContext _localctx = new AllTypeWithCollContext(Context, State);
		EnterRule(_localctx, 138, RULE_allTypeWithColl);
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 749; allType();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 750; Match(COLLECTION);
				State = 751; allType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDclContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public CollectionAssignmentContext collectionAssignment() {
			return GetRuleContext<CollectionAssignmentContext>(0);
		}
		public CollectionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDclContext collectionDcl() {
		CollectionDclContext _localctx = new CollectionDclContext(Context, State);
		EnterRule(_localctx, 140, RULE_collectionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754; Match(COLLECTION);
			State = 755; allType();
			State = 756; variable();
			State = 759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 757; Match(EQUALS);
				State = 758; collectionAssignment();
				}
			}

			{
			State = 761; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionAssignmentContext : ParserRuleContext {
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CollectionAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionAssignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionAssignmentContext collectionAssignment() {
		CollectionAssignmentContext _localctx = new CollectionAssignmentContext(Context, State);
		EnterRule(_localctx, 142, RULE_collectionAssignment);
		try {
			State = 765;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 763; returnQuery();
				}
				break;
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 764; variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQueryContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(GiraphParser.SET, 0); }
		public SetExpressionAtriSimContext[] setExpressionAtriSim() {
			return GetRuleContexts<SetExpressionAtriSimContext>();
		}
		public SetExpressionAtriSimContext setExpressionAtriSim(int i) {
			return GetRuleContext<SetExpressionAtriSimContext>(i);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SetExpressionVariContext[] setExpressionVari() {
			return GetRuleContexts<SetExpressionVariContext>();
		}
		public SetExpressionVariContext setExpressionVari(int i) {
			return GetRuleContext<SetExpressionVariContext>(i);
		}
		public SetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQueryContext setQuery() {
		SetQueryContext _localctx = new SetQueryContext(Context, State);
		EnterRule(_localctx, 144, RULE_setQuery);
		int _la;
		try {
			State = 797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767; Match(SET);
				State = 768; setExpressionAtriSim();
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 769; Match(COMMA);
					State = 770; setExpressionAtriSim();
					}
					}
					State = 775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 776; Match(IN);
				State = 777; variable();
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 778; where();
					}
				}

				{
				State = 781; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 783; Match(SET);
				State = 784; setExpressionVari();
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 785; Match(COMMA);
					State = 786; setExpressionVari();
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 792; where();
					}
				}

				{
				State = 795; Match(SC);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphSetQueryContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(GiraphParser.SET, 0); }
		public SetExpressionAtriContext[] setExpressionAtri() {
			return GetRuleContexts<SetExpressionAtriContext>();
		}
		public SetExpressionAtriContext setExpressionAtri(int i) {
			return GetRuleContext<SetExpressionAtriContext>(i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public GraphSetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphSetQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphSetQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphSetQueryContext graphSetQuery() {
		GraphSetQueryContext _localctx = new GraphSetQueryContext(Context, State);
		EnterRule(_localctx, 146, RULE_graphSetQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 799; Match(SET);
			State = 800; setExpressionAtri();
			State = 805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 801; Match(COMMA);
				State = 802; setExpressionAtri();
				}
				}
				State = 807;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 809;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 808; where();
				}
			}

			{
			State = 811; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionAtriContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SetExpressionAtriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpressionAtri; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpressionAtri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionAtriContext setExpressionAtri() {
		SetExpressionAtriContext _localctx = new SetExpressionAtriContext(Context, State);
		EnterRule(_localctx, 148, RULE_setExpressionAtri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 813; attribute();
			}
			{
			State = 814; compoundAssign();
			}
			State = 820;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,77,Context) ) {
			case 1:
				{
				{
				State = 815; Match(LP);
				State = 816; expression();
				State = 817; Match(RP);
				}
				}
				break;
			case 2:
				{
				{
				State = 819; expression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionAtriSimContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public SimpleExpressionContext simpleExpression() {
			return GetRuleContext<SimpleExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SetExpressionAtriSimContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpressionAtriSim; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpressionAtriSim(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionAtriSimContext setExpressionAtriSim() {
		SetExpressionAtriSimContext _localctx = new SetExpressionAtriSimContext(Context, State);
		EnterRule(_localctx, 150, RULE_setExpressionAtriSim);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 822; attribute();
			}
			{
			State = 823; compoundAssign();
			}
			State = 829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				{
				State = 824; Match(LP);
				State = 825; simpleExpression();
				State = 826; Match(RP);
				}
				}
				break;
			case 2:
				{
				{
				State = 828; simpleExpression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionVariContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public SetExpressionVariContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpressionVari; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpressionVari(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionVariContext setExpressionVari() {
		SetExpressionVariContext _localctx = new SetExpressionVariContext(Context, State);
		EnterRule(_localctx, 152, RULE_setExpressionVari);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 831; variable();
			}
			{
			State = 832; compoundAssign();
			}
			State = 838;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				{
				State = 833; Match(LP);
				State = 834; expression();
				State = 835; Match(RP);
				}
				}
				break;
			case 2:
				{
				{
				State = 837; expression();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ITerminalNode COMPOUNDASSIGN() { return GetToken(GiraphParser.COMPOUNDASSIGN, 0); }
		public CompoundAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignContext compoundAssign() {
		CompoundAssignContext _localctx = new CompoundAssignContext(Context, State);
		EnterRule(_localctx, 154, RULE_compoundAssign);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUALS || _la==COMPOUNDASSIGN) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 156, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 842; Match(SINGLEQUOTE);
			}
			State = 843; variable();
			{
			State = 844; Match(SINGLEQUOTE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOneAttriContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public SetOneAttriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOneAttri; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOneAttri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOneAttriContext setOneAttri() {
		SetOneAttriContext _localctx = new SetOneAttriContext(Context, State);
		EnterRule(_localctx, 158, RULE_setOneAttri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 846; attribute();
			{
			State = 847; compoundAssign();
			}
			{
			State = 848; varOrConst();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollNoReturnOpsContext : ParserRuleContext {
		public EnqueueOPContext enqueueOP() {
			return GetRuleContext<EnqueueOPContext>(0);
		}
		public PushOPContext pushOP() {
			return GetRuleContext<PushOPContext>(0);
		}
		public CollNoReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collNoReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollNoReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollNoReturnOpsContext collNoReturnOps() {
		CollNoReturnOpsContext _localctx = new CollNoReturnOpsContext(Context, State);
		EnterRule(_localctx, 160, RULE_collNoReturnOps);
		try {
			State = 852;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850; enqueueOP();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851; pushOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollReturnOpsContext : ParserRuleContext {
		public DequeueOPContext dequeueOP() {
			return GetRuleContext<DequeueOPContext>(0);
		}
		public PopOPContext popOP() {
			return GetRuleContext<PopOPContext>(0);
		}
		public ExtractMinOPContext extractMinOP() {
			return GetRuleContext<ExtractMinOPContext>(0);
		}
		public ExtractMaxOPContext extractMaxOP() {
			return GetRuleContext<ExtractMaxOPContext>(0);
		}
		public CollReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollReturnOpsContext collReturnOps() {
		CollReturnOpsContext _localctx = new CollReturnOpsContext(Context, State);
		EnterRule(_localctx, 162, RULE_collReturnOps);
		try {
			State = 858;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854; dequeueOP();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855; popOP();
				}
				break;
			case EXTRACTMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856; extractMinOP();
				}
				break;
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 857; extractMaxOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnqueueOPContext : ParserRuleContext {
		public ITerminalNode ENQUEUE() { return GetToken(GiraphParser.ENQUEUE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public EnqueueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enqueueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnqueueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnqueueOPContext enqueueOP() {
		EnqueueOPContext _localctx = new EnqueueOPContext(Context, State);
		EnterRule(_localctx, 164, RULE_enqueueOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 860; Match(ENQUEUE);
			State = 861; expression();
			State = 862; Match(TO);
			State = 863; variable();
			{
			State = 864; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DequeueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPContext dequeueOP() {
		DequeueOPContext _localctx = new DequeueOPContext(Context, State);
		EnterRule(_localctx, 166, RULE_dequeueOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; Match(DEQUEUE);
			State = 867; Match(FROM);
			State = 868; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopOPContext : ParserRuleContext {
		public ITerminalNode POP() { return GetToken(GiraphParser.POP, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public PopOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PopOPContext popOP() {
		PopOPContext _localctx = new PopOPContext(Context, State);
		EnterRule(_localctx, 168, RULE_popOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 870; Match(POP);
			State = 871; Match(FROM);
			State = 872; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushOPContext : ParserRuleContext {
		public ITerminalNode PUSH() { return GetToken(GiraphParser.PUSH, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PushOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pushOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushOPContext pushOP() {
		PushOPContext _localctx = new PushOPContext(Context, State);
		EnterRule(_localctx, 170, RULE_pushOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 874; Match(PUSH);
			State = 875; expression();
			State = 876; Match(TO);
			State = 877; variable();
			{
			State = 878; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMinOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMIN() { return GetToken(GiraphParser.EXTRACTMIN, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMinOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMinOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMinOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMinOPContext extractMinOP() {
		ExtractMinOPContext _localctx = new ExtractMinOPContext(Context, State);
		EnterRule(_localctx, 172, RULE_extractMinOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 880; Match(EXTRACTMIN);
			State = 882;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 881; attribute();
				}
			}

			State = 884; Match(FROM);
			State = 885; variable();
			State = 887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 886; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMaxOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMAX() { return GetToken(GiraphParser.EXTRACTMAX, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMaxOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMaxOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMaxOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMaxOPContext extractMaxOP() {
		ExtractMaxOPContext _localctx = new ExtractMaxOPContext(Context, State);
		EnterRule(_localctx, 174, RULE_extractMaxOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 889; Match(EXTRACTMAX);
			State = 891;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 890; attribute();
				}
			}

			State = 893; Match(FROM);
			State = 894; variable();
			State = 896;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				{
				State = 895; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 176, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 898; varOrConst();
			State = 903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 899; Match(COMMA);
				State = 900; varOrConst();
				}
				}
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintOptionsContext : ParserRuleContext {
		public PrintOptionContext[] printOption() {
			return GetRuleContexts<PrintOptionContext>();
		}
		public PrintOptionContext printOption(int i) {
			return GetRuleContext<PrintOptionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public PrintOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printOptions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintOptionsContext printOptions() {
		PrintOptionsContext _localctx = new PrintOptionsContext(Context, State);
		EnterRule(_localctx, 178, RULE_printOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 906; printOption();
			State = 911;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				{
				State = 907; Match(COMMA);
				}
				State = 908; printOption();
				}
				}
				State = 913;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintOptionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printOption; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintOptionContext printOption() {
		PrintOptionContext _localctx = new PrintOptionContext(Context, State);
		EnterRule(_localctx, 180, RULE_printOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 914; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(GiraphParser.PRINT, 0); }
		public PrintOptionsContext printOptions() {
			return GetRuleContext<PrintOptionsContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 182, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 916; Match(PRINT);
			State = 917; printOptions();
			{
			State = 918; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPOneLineContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public DequeueOPOneLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOPOneLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOPOneLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPOneLineContext dequeueOPOneLine() {
		DequeueOPOneLineContext _localctx = new DequeueOPOneLineContext(Context, State);
		EnterRule(_localctx, 184, RULE_dequeueOPOneLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 920; Match(DEQUEUE);
			State = 921; Match(FROM);
			State = 922; variable();
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 923; where();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLineContext : ParserRuleContext {
		public ITerminalNode COMMENTSTART() { return GetToken(GiraphParser.COMMENTSTART, 0); }
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public CommentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLineContext commentLine() {
		CommentLineContext _localctx = new CommentLineContext(Context, State);
		EnterRule(_localctx, 186, RULE_commentLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 926; Match(COMMENTSTART);
			State = 927; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		public CommentLineContext commentLine() {
			return GetRuleContext<CommentLineContext>(0);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 188, RULE_comments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; commentLine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveQueryContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(GiraphParser.REMOVE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public RemoveQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveQueryContext removeQuery() {
		RemoveQueryContext _localctx = new RemoveQueryContext(Context, State);
		EnterRule(_localctx, 190, RULE_removeQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 931; Match(REMOVE);
			State = 932; Match(FROM);
			State = 933; variable();
			State = 935;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 934; where();
				}
			}

			State = 937; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveAllQueryContext : ParserRuleContext {
		public ITerminalNode REMOVEALL() { return GetToken(GiraphParser.REMOVEALL, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public RemoveAllQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeAllQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemoveAllQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RemoveAllQueryContext removeAllQuery() {
		RemoveAllQueryContext _localctx = new RemoveAllQueryContext(Context, State);
		EnterRule(_localctx, 192, RULE_removeAllQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; Match(REMOVEALL);
			State = 940; Match(FROM);
			State = 941; variable();
			State = 943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 942; where();
				}
			}

			State = 945; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 42: return boolComparisons_sempred((BoolComparisonsContext)_localctx, predIndex);
		case 43: return simpleBoolComparison_sempred((SimpleBoolComparisonContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolComparisons_sempred(BoolComparisonsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool simpleBoolComparison_sempred(SimpleBoolComparisonContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'O', '\x3B6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x3', '\x2', '\x6', '\x2', '\xC6', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', '\xC7', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\xD1', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\xD6', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\xDA', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xE1', '\n', '\x6', 
		'\x5', '\x6', '\xE3', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\xEB', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xFB', '\n', 
		'\t', '\f', '\t', '\xE', '\t', '\xFE', '\v', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', 
		'\x106', '\n', '\n', '\f', '\n', '\xE', '\n', '\x109', '\v', '\n', '\x3', 
		'\v', '\x5', '\v', '\x10C', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', '\x112', '\n', '\v', '\f', '\v', '\xE', 
		'\v', '\x115', '\v', '\v', '\x5', '\v', '\x117', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', 
		'\f', '\x11F', '\n', '\f', '\f', '\f', '\xE', '\f', '\x122', '\v', '\f', 
		'\x3', '\r', '\x5', '\r', '\x125', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x12D', 
		'\n', '\r', '\f', '\r', '\xE', '\r', '\x130', '\v', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x5', '\xE', '\x135', '\n', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x13F', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x142', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x148', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x14B', '\v', '\x10', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x14F', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x15A', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\x15E', '\n', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x5', '\x12', '\x167', '\n', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x16B', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x171', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x177', 
		'\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x17C', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x180', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x189', '\n', 
		'\x1A', '\f', '\x1A', '\xE', '\x1A', '\x18C', '\v', '\x1A', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x196', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\a', 
		'\x1D', '\x19D', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1A0', '\v', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', 
		'\x1E', '\x1B0', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', 
		'\x1B9', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1BC', '\v', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C0', '\n', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x5', ' ', '\x1CF', '\n', ' ', '\x3', '!', '\x3', '!', '\x5', '!', 
		'\x1D3', '\n', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\a', '\"', 
		'\x1D8', '\n', '\"', '\f', '\"', '\xE', '\"', '\x1DB', '\v', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x1E2', 
		'\n', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '&', 
		'\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x1F2', '\n', ')', '\f', 
		')', '\xE', ')', '\x1F5', '\v', ')', '\x3', ')', '\x5', ')', '\x1F8', 
		'\n', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x20A', '\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x20F', 
		'\n', ',', '\x3', ',', '\a', ',', '\x212', '\n', ',', '\f', ',', '\xE', 
		',', '\x215', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x220', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x225', 
		'\n', '-', '\x3', '-', '\a', '-', '\x228', '\n', '-', '\f', '-', '\xE', 
		'-', '\x22B', '\v', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x244', '\n', '\x30', '\x3', 
		'\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x6', '\x32', '\x251', '\n', '\x32', '\r', '\x32', '\xE', '\x32', 
		'\x252', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x257', '\n', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x25B', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x5', '\x33', '\x263', '\n', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x269', '\n', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x26D', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x272', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\a', '\x37', '\x27B', '\n', '\x37', '\f', '\x37', 
		'\xE', '\x37', '\x27E', '\v', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x283', '\n', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\x5', '\x38', '\x28C', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x295', 
		'\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x29A', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\x2B0', '\n', '?', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x5', '@', '\x2B7', '\n', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x5', '\x41', '\x2BB', '\n', '\x41', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\a', '\x43', 
		'\x2C6', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x2C9', '\v', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\a', '\x43', '\x2D0', '\n', '\x43', '\f', '\x43', '\xE', '\x43', '\x2D3', 
		'\v', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x2D7', '\n', 
		'\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x2EA', '\n', '\x45', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x2EE', '\n', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x2F3', '\n', 'G', '\x3', 'H', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x2FA', '\n', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x300', 
		'\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\a', 'J', 
		'\x306', '\n', 'J', '\f', 'J', '\xE', 'J', '\x309', '\v', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', '\x30E', '\n', 'J', '\x3', 'J', 
		'\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\a', 'J', 
		'\x316', '\n', 'J', '\f', 'J', '\xE', 'J', '\x319', '\v', 'J', '\x3', 
		'J', '\x5', 'J', '\x31C', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x5', 'J', 
		'\x320', '\n', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 
		'K', '\x326', '\n', 'K', '\f', 'K', '\xE', 'K', '\x329', '\v', 'K', '\x3', 
		'K', '\x5', 'K', '\x32C', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x5', 'L', '\x337', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x340', '\n', 'M', 
		'\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x5', 'N', '\x349', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x357', '\n', 'R', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x35D', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'W', '\x3', 'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x375', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x37A', '\n', 
		'X', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x37E', '\n', 'Y', '\x3', 'Y', 
		'\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x383', '\n', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\a', 'Z', '\x388', '\n', 'Z', '\f', 'Z', '\xE', 'Z', 
		'\x38B', '\v', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\a', '[', '\x390', 
		'\n', '[', '\f', '[', '\xE', '[', '\x393', '\v', '[', '\x3', '\\', '\x3', 
		'\\', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', '^', '\x3', 
		'^', '\x3', '^', '\x3', '^', '\x5', '^', '\x39F', '\n', '^', '\x3', '_', 
		'\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x3', 
		'\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x3AA', '\n', '\x61', 
		'\x3', '\x61', '\x3', '\x61', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x5', '\x62', '\x3B2', '\n', '\x62', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x2', '\x4', 'V', 'X', '\x63', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', 
		'\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 
		'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\x2', '\a', '\x3', '\x2', 
		'\b', '\t', '\x3', '\x2', '\n', '\f', '\x3', '\x2', '\x5', '\a', '\x3', 
		'\x2', '\xE', '\xF', '\x4', '\x2', '\x1C', '\x1C', '\x42', '\x42', '\x2', 
		'\x3D2', '\x2', '\xC5', '\x3', '\x2', '\x2', '\x2', '\x4', '\xD0', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\n', '\xDB', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x14', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x124', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x134', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x143', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x159', '\x3', '\x2', '\x2', '\x2', '\"', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x16A', '\x3', '\x2', '\x2', '\x2', '&', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x17B', '\x3', '\x2', '\x2', '\x2', ',', '\x17F', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x181', '\x3', '\x2', '\x2', '\x2', '\x30', '\x183', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x36', '\x190', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x19A', '\x3', '\x2', '\x2', '\x2', ':', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1CE', '\x3', '\x2', '\x2', '\x2', '@', '\x1D2', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1E3', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1E5', '\x3', '\x2', '\x2', '\x2', 'J', '\x1E7', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1E9', '\x3', '\x2', '\x2', '\x2', 'N', '\x1EB', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1F9', '\x3', '\x2', '\x2', '\x2', 'T', '\x1FD', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x209', '\x3', '\x2', '\x2', '\x2', 'X', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x237', '\x3', '\x2', '\x2', '\x2', '^', '\x243', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x245', '\x3', '\x2', '\x2', '\x2', '\x62', '\x247', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x264', '\x3', '\x2', '\x2', '\x2', 'h', '\x26C', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x26E', '\x3', '\x2', '\x2', '\x2', 'l', '\x277', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x28D', '\x3', '\x2', '\x2', '\x2', 'r', '\x294', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x296', '\x3', '\x2', '\x2', '\x2', 'v', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x2A6', '\x3', '\x2', '\x2', '\x2', '|', '\x2AF', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2BA', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x86', '\x2D8', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x2F2', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x90', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x94', '\x321', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x32F', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x338', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x341', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x34A', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x350', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x356', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x35C', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x35E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x364', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x368', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x36C', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x372', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x37B', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x38C', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x394', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x396', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x39A', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x3A3', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\xC6', '\x5', '\x4', '\x3', '\x2', '\xC5', '\xC4', 
		'\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', 
		'\a', '\x2', '\x2', '\x3', '\xCA', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\xCB', '\xD1', '\x5', '\x36', '\x1C', '\x2', '\xCC', '\xD1', '\x5', '\x6', 
		'\x4', '\x2', '\xCD', '\xD1', '\x5', '\x62', '\x32', '\x2', '\xCE', '\xD1', 
		'\x5', '\xBE', '`', '\x2', '\xCF', '\xD1', '\x5', 'Z', '.', '\x2', '\xD0', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCC', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD6', '\x5', '\b', '\x5', 
		'\x2', '\xD3', '\xD6', '\x5', '\x8E', 'H', '\x2', '\xD4', '\xD6', '\x5', 
		'\f', '\a', '\x2', '\xD5', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\a', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x5', 
		'\n', '\x6', '\x2', '\xD8', '\xDA', '\x5', '\xE', '\b', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\xDA', '\t', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\x5', 
		'N', '(', '\x2', '\xDC', '\xE2', '\x5', '\x42', '\"', '\x2', '\xDD', '\xE0', 
		'\a', '\x1C', '\x2', '\x2', '\xDE', '\xE1', '\x5', '\x1C', '\xF', '\x2', 
		'\xDF', '\xE1', '\x5', '\x42', '\"', '\x2', '\xE0', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xDD', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\x10', '\x2', '\x2', '\xE5', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x4', '\x2', '\x2', 
		'\xE7', '\xEA', '\x5', '\x42', '\"', '\x2', '\xE8', '\xE9', '\a', '\x1C', 
		'\x2', '\x2', '\xE9', '\xEB', '\x5', '\x1C', '\xF', '\x2', '\xEA', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x10', 
		'\x2', '\x2', '\xED', '\r', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\a', '\x5', '\x2', '\x2', '\xEF', '\xF0', '\x5', '\x42', '\"', '\x2', 
		'\xF0', '\xF1', '\x5', '\x10', '\t', '\x2', '\xF1', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xFC', '\a', '\x16', '\x2', '\x2', '\xF3', '\xFB', 
		'\x5', '\x94', 'K', '\x2', '\xF4', '\xF5', '\x5', '\x12', '\n', '\x2', 
		'\xF5', '\xF6', '\a', '\x10', '\x2', '\x2', '\xF6', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\xF7', '\xF8', '\x5', '\x16', '\f', '\x2', '\xF8', '\xF9', 
		'\a', '\x10', '\x2', '\x2', '\xF9', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFE', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFF', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', 
		'\a', '\x17', '\x2', '\x2', '\x100', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x102', '\a', '\x6', '\x2', '\x2', '\x102', '\x107', '\x5', 
		'\x14', '\v', '\x2', '\x103', '\x104', '\a', '\x11', '\x2', '\x2', '\x104', 
		'\x106', '\x5', '\x14', '\v', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x109', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x13', '\x3', '\x2', '\x2', '\x2', '\x109', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x10A', '\x10C', '\x5', '\x42', '\"', '\x2', '\x10B', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x116', 
		'\a', '\x14', '\x2', '\x2', '\x10E', '\x113', '\x5', '\x1A', '\xE', '\x2', 
		'\x10F', '\x110', '\a', '\x11', '\x2', '\x2', '\x110', '\x112', '\x5', 
		'\x1A', '\xE', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\x15', '\x2', '\x2', '\x119', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x11B', '\a', '\a', '\x2', '\x2', '\x11B', '\x120', '\x5', 
		'\x18', '\r', '\x2', '\x11C', '\x11D', '\a', '\x11', '\x2', '\x2', '\x11D', 
		'\x11F', '\x5', '\x18', '\r', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x17', '\x3', '\x2', '\x2', '\x2', '\x122', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x123', '\x125', '\x5', '\x42', '\"', '\x2', '\x124', 
		'\x123', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', 
		'\a', '\x14', '\x2', '\x2', '\x127', '\x128', '\x5', '\x42', '\"', '\x2', 
		'\x128', '\x129', '\a', '\x11', '\x2', '\x2', '\x129', '\x12E', '\x5', 
		'\x42', '\"', '\x2', '\x12A', '\x12B', '\a', '\x11', '\x2', '\x2', '\x12B', 
		'\x12D', '\x5', '\x1A', '\xE', '\x2', '\x12C', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', '\x12D', '\x130', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x131', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x15', '\x2', '\x2', '\x132', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x133', '\x135', '\x5', '\x8A', '\x46', 
		'\x2', '\x134', '\x133', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x137', '\x5', '\x42', '\"', '\x2', '\x137', '\x138', '\x5', 
		'\x9C', 'O', '\x2', '\x138', '\x139', '\x5', '\x1C', '\xF', '\x2', '\x139', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x140', '\x5', ' ', '\x11', 
		'\x2', '\x13B', '\x13C', '\x5', ',', '\x17', '\x2', '\x13C', '\x13D', 
		'\x5', ' ', '\x11', '\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x142', '\x140', '\x3', '\x2', '\x2', '\x2', '\x143', '\x149', 
		'\x5', '\"', '\x12', '\x2', '\x144', '\x145', '\x5', ',', '\x17', '\x2', 
		'\x145', '\x146', '\x5', '\"', '\x12', '\x2', '\x146', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x144', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x14B', '\x3', '\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x149', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14F', '\x5', '\x42', '\"', '\x2', '\x14D', '\x14F', '\x5', 
		'\x44', '#', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x15A', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x15A', '\x5', '*', '\x16', '\x2', '\x151', '\x15A', 
		'\x5', '\x9E', 'P', '\x2', '\x152', '\x15A', '\x5', '<', '\x1F', '\x2', 
		'\x153', '\x154', '\a', '\x14', '\x2', '\x2', '\x154', '\x155', '\x5', 
		' ', '\x11', '\x2', '\x155', '\x156', '\a', '\x15', '\x2', '\x2', '\x156', 
		'\x15A', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\a', '\t', '\x2', 
		'\x2', '\x158', '\x15A', '\x5', ' ', '\x11', '\x2', '\x159', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x159', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x151', '\x3', '\x2', '\x2', '\x2', '\x159', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x153', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x15B', '\x15E', '\x5', '\x42', '\"', '\x2', '\x15C', '\x15E', 
		'\x5', '\x44', '#', '\x2', '\x15D', '\x15B', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x15F', '\x167', '\x5', '\x9E', 'P', '\x2', '\x160', 
		'\x161', '\a', '\x14', '\x2', '\x2', '\x161', '\x162', '\x5', '\"', '\x12', 
		'\x2', '\x162', '\x163', '\a', '\x15', '\x2', '\x2', '\x163', '\x167', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\a', '\t', '\x2', '\x2', 
		'\x165', '\x167', '\x5', '\"', '\x12', '\x2', '\x166', '\x15D', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x166', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x167', '#', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16B', '\x5', 
		'(', '\x15', '\x2', '\x169', '\x16B', '\x5', '*', '\x16', '\x2', '\x16A', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16B', '%', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x171', '\x5', 
		'(', '\x15', '\x2', '\x16D', '\x16E', '\x5', '*', '\x16', '\x2', '\x16E', 
		'\x16F', '\a', '\x10', '\x2', '\x2', '\x16F', '\x171', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x170', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x177', '\x5', '\x92', 'J', '\x2', '\x173', '\x177', '\x5', 
		'h', '\x35', '\x2', '\x174', '\x177', '\x5', '\xC2', '\x62', '\x2', '\x175', 
		'\x177', '\x5', '\xC0', '\x61', '\x2', '\x176', '\x172', '\x3', '\x2', 
		'\x2', '\x2', '\x176', '\x173', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', 
		'\x177', ')', '\x3', '\x2', '\x2', '\x2', '\x178', '\x17C', '\x5', '\x64', 
		'\x33', '\x2', '\x179', '\x17C', '\x5', '\x66', '\x34', '\x2', '\x17A', 
		'\x17C', '\x5', '\xA4', 'S', '\x2', '\x17B', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x17B', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17C', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x17D', '\x180', '\x5', '.', '\x18', '\x2', '\x17E', '\x180', '\x5', 
		'\x30', '\x19', '\x2', '\x17F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x17E', '\x3', '\x2', '\x2', '\x2', '\x180', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x182', '\t', '\x2', '\x2', '\x2', '\x182', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x184', '\t', '\x3', '\x2', '\x2', '\x184', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x185', '\x18A', '\x5', '\x34', '\x1B', 
		'\x2', '\x186', '\x187', '\a', '\x11', '\x2', '\x2', '\x187', '\x189', 
		'\x5', '\x34', '\x1B', '\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', 
		'\x189', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18B', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x18D', '\x18E', '\x5', '\x8C', 'G', '\x2', '\x18E', '\x18F', 
		'\x5', '\x42', '\"', '\x2', '\x18F', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x191', '\x5', '\x42', '\"', '\x2', '\x191', '\x192', '\a', 
		'.', '\x2', '\x2', '\x192', '\x193', '\x5', '\x8C', 'G', '\x2', '\x193', 
		'\x195', '\a', '\x14', '\x2', '\x2', '\x194', '\x196', '\x5', '\x32', 
		'\x1A', '\x2', '\x195', '\x194', '\x3', '\x2', '\x2', '\x2', '\x195', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x198', '\a', '\x15', '\x2', '\x2', '\x198', '\x199', 
		'\x5', '\x38', '\x1D', '\x2', '\x199', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', '\x19E', '\a', '\x16', '\x2', '\x2', '\x19B', '\x19D', '\x5', 
		'>', ' ', '\x2', '\x19C', '\x19B', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x1A0', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', 
		'\x1A1', '\x1A2', '\a', '\x17', '\x2', '\x2', '\x1A2', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', '$', '\x2', '\x2', '\x1A4', 
		'\x1A5', '\x5', '\x1C', '\xF', '\x2', '\x1A5', '\x1A6', '\a', '\x10', 
		'\x2', '\x2', '\x1A6', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\a', '$', '\x2', '\x2', '\x1A8', '\x1A9', '\x5', '<', '\x1F', '\x2', 
		'\x1A9', '\x1AA', '\a', '\x10', '\x2', '\x2', '\x1AA', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1AC', '\a', '$', '\x2', '\x2', '\x1AC', 
		'\x1AD', '\x5', 'V', ',', '\x2', '\x1AD', '\x1AE', '\a', '\x10', '\x2', 
		'\x2', '\x1AE', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1AF', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1B0', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1B1', '\x1B2', '\a', '/', '\x2', '\x2', '\x1B2', '\x1BF', 
		'\x5', '\x42', '\"', '\x2', '\x1B3', '\x1B4', '\a', '\x30', '\x2', '\x2', 
		'\x1B4', '\x1B5', '\a', '\x14', '\x2', '\x2', '\x1B5', '\x1BA', '\x5', 
		'@', '!', '\x2', '\x1B6', '\x1B7', '\a', '\x11', '\x2', '\x2', '\x1B7', 
		'\x1B9', '\x5', '@', '!', '\x2', '\x1B8', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1B8', 
		'\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		'\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\a', '\x15', '\x2', '\x2', '\x1BE', 
		'\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1B3', '\x3', '\x2', '\x2', 
		'\x2', '\x1BF', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C0', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1CF', '\x5', 'P', ')', '\x2', '\x1C2', 
		'\x1CF', '\x5', '\x6', '\x4', '\x2', '\x1C3', '\x1CF', '\x5', 'r', ':', 
		'\x2', '\x1C4', '\x1CF', '\x5', 'Z', '.', '\x2', '\x1C5', '\x1CF', '\x5', 
		':', '\x1E', '\x2', '\x1C6', '\x1CF', '\x5', '&', '\x14', '\x2', '\x1C7', 
		'\x1CF', '\x5', '\xA2', 'R', '\x2', '\x1C8', '\x1CF', '\x5', '\xBA', '^', 
		'\x2', '\x1C9', '\x1CA', '\x5', '<', '\x1F', '\x2', '\x1CA', '\x1CB', 
		'\a', '\x10', '\x2', '\x2', '\x1CB', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1CC', '\x1CF', '\x5', '\xB8', ']', '\x2', '\x1CD', '\x1CF', '\x5', 
		'\xBE', '`', '\x2', '\x1CE', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C3', '\x3', '\x2', '\x2', 
		'\x2', '\x1CE', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1CE', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1CE', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x1CF', '?', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', '\x5', 
		'\x42', '\"', '\x2', '\x1D1', '\x1D3', '\x5', '\x44', '#', '\x2', '\x1D2', 
		'\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D1', '\x3', '\x2', '\x2', 
		'\x2', '\x1D3', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D9', 
		'\a', '\x45', '\x2', '\x2', '\x1D5', '\x1D6', '\a', '\x1A', '\x2', '\x2', 
		'\x1D6', '\x1D8', '\a', '\x45', '\x2', '\x2', '\x1D7', '\x1D5', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1E2', '\x5', 'H', '%', '\x2', 
		'\x1DD', '\x1E2', '\x5', 'J', '&', '\x2', '\x1DE', '\x1E2', '\x5', 'L', 
		'\'', '\x2', '\x1DF', '\x1E2', '\x5', '\x46', '$', '\x2', '\x1E0', '\x1E2', 
		'\a', '>', '\x2', '\x2', '\x1E1', '\x1DC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DE', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E1', 
		'\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1E3', '\x1E4', '\a', 'N', '\x2', '\x2', '\x1E4', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\x1E5', '\x1E6', '\a', '\x43', '\x2', '\x2', '\x1E6', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x44', '\x2', 
		'\x2', '\x1E8', 'K', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', '\a', 
		'\x41', '\x2', '\x2', '\x1EA', 'M', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1EC', '\t', '\x4', '\x2', '\x2', '\x1EC', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1ED', '\x1EE', '\a', '\x13', '\x2', '\x2', '\x1EE', '\x1EF', 
		'\x5', 'V', ',', '\x2', '\x1EF', '\x1F3', '\x5', '\x38', '\x1D', '\x2', 
		'\x1F0', '\x1F2', '\x5', 'R', '*', '\x2', '\x1F1', '\x1F0', '\x3', '\x2', 
		'\x2', '\x2', '\x1F2', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F4', '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x1F5', '\x1F3', '\x3', 
		'\x2', '\x2', '\x2', '\x1F6', '\x1F8', '\x5', 'T', '+', '\x2', '\x1F7', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1F8', '\x3', '\x2', '\x2', 
		'\x2', '\x1F8', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FA', '\a', 
		'\x1E', '\x2', '\x2', '\x1FA', '\x1FB', '\x5', 'V', ',', '\x2', '\x1FB', 
		'\x1FC', '\x5', '\x38', '\x1D', '\x2', '\x1FC', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x1FD', '\x1FE', '\a', '\x1F', '\x2', '\x2', '\x1FE', '\x1FF', 
		'\x5', '\x38', '\x1D', '\x2', '\x1FF', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x200', '\x201', '\b', ',', '\x1', '\x2', '\x201', '\x202', '\a', '\x14', 
		'\x2', '\x2', '\x202', '\x203', '\x5', 'V', ',', '\x2', '\x203', '\x204', 
		'\a', '\x15', '\x2', '\x2', '\x204', '\x20A', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x206', '\a', '\r', '\x2', '\x2', '\x206', '\x20A', '\x5', 'V', 
		',', '\x6', '\x207', '\x20A', '\x5', '\x1C', '\xF', '\x2', '\x208', '\x20A', 
		'\x5', '\\', '/', '\x2', '\x209', '\x200', '\x3', '\x2', '\x2', '\x2', 
		'\x209', '\x205', '\x3', '\x2', '\x2', '\x2', '\x209', '\x207', '\x3', 
		'\x2', '\x2', '\x2', '\x209', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20A', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x20E', '\f', '\x5', '\x2', 
		'\x2', '\x20C', '\x20F', '\a', '\x3', '\x2', '\x2', '\x20D', '\x20F', 
		'\x5', '`', '\x31', '\x2', '\x20E', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20E', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20F', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x210', '\x212', '\x5', 'V', ',', '\x6', '\x211', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x212', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x211', '\x3', '\x2', '\x2', '\x2', '\x213', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x214', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x213', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', '\b', 
		'-', '\x1', '\x2', '\x217', '\x218', '\a', '\x14', '\x2', '\x2', '\x218', 
		'\x219', '\x5', 'X', '-', '\x2', '\x219', '\x21A', '\a', '\x15', '\x2', 
		'\x2', '\x21A', '\x220', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', 
		'\a', '\r', '\x2', '\x2', '\x21C', '\x220', '\x5', 'X', '-', '\x6', '\x21D', 
		'\x220', '\x5', '\x1E', '\x10', '\x2', '\x21E', '\x220', '\x5', '\\', 
		'/', '\x2', '\x21F', '\x216', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21F', '\x21D', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x220', '\x229', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x224', '\f', '\x5', '\x2', '\x2', '\x222', 
		'\x225', '\a', '\x3', '\x2', '\x2', '\x223', '\x225', '\x5', '`', '\x31', 
		'\x2', '\x224', '\x222', '\x3', '\x2', '\x2', '\x2', '\x224', '\x223', 
		'\x3', '\x2', '\x2', '\x2', '\x225', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'\x226', '\x228', '\x5', 'X', '-', '\x6', '\x227', '\x221', '\x3', '\x2', 
		'\x2', '\x2', '\x228', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x229', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', 'Y', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x229', '\x3', '\x2', 
		'\x2', '\x2', '\x22C', '\x22D', '\a', '\x32', '\x2', '\x2', '\x22D', '\x22E', 
		'\x5', '\x42', '\"', '\x2', '\x22E', '\x22F', '\a', '\x14', '\x2', '\x2', 
		'\x22F', '\x230', '\x5', '\x32', '\x1A', '\x2', '\x230', '\x231', '\a', 
		'\x15', '\x2', '\x2', '\x231', '\x232', '\a', '\x12', '\x2', '\x2', '\x232', 
		'\x233', '\a', '\x16', '\x2', '\x2', '\x233', '\x234', '\x5', 'X', '-', 
		'\x2', '\x234', '\x235', '\a', '\x17', '\x2', '\x2', '\x235', '\x236', 
		'\a', '\x10', '\x2', '\x2', '\x236', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x5', '\x42', '\"', '\x2', '\x238', '\x239', '\a', 
		'\x14', '\x2', '\x2', '\x239', '\x23A', '\x5', '\xB2', 'Z', '\x2', '\x23A', 
		'\x23B', '\a', '\x15', '\x2', '\x2', '\x23B', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23D', '\a', '+', '\x2', '\x2', '\x23D', '\x23E', '\a', 
		'\x14', '\x2', '\x2', '\x23E', '\x23F', '\x5', 'X', '-', '\x2', '\x23F', 
		'\x240', '\a', '\x15', '\x2', '\x2', '\x240', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x241', '\x242', '\a', '+', '\x2', '\x2', '\x242', '\x244', '\x5', 
		'X', '-', '\x2', '\x243', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x243', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x244', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x245', '\x246', '\t', '\x5', '\x2', '\x2', '\x246', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x248', '\a', '\x31', '\x2', '\x2', '\x248', 
		'\x249', '\x5', 'N', '(', '\x2', '\x249', '\x24A', '\x5', '\x8C', 'G', 
		'\x2', '\x24A', '\x24B', '\a', '\x1B', '\x2', '\x2', '\x24B', '\x24C', 
		'\x5', '\x42', '\"', '\x2', '\x24C', '\x256', '\a', '\x1B', '\x2', '\x2', 
		'\x24D', '\x24E', '\a', '\x12', '\x2', '\x2', '\x24E', '\x250', '\a', 
		'\x1B', '\x2', '\x2', '\x24F', '\x251', '\x5', '\x42', '\"', '\x2', '\x250', 
		'\x24F', '\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', 
		'\x2', '\x252', '\x250', '\x3', '\x2', '\x2', '\x2', '\x252', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\a', '\x1B', '\x2', '\x2', '\x255', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x256', 
		'\x257', '\x3', '\x2', '\x2', '\x2', '\x257', '\x25A', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x259', '\a', '\x1C', '\x2', '\x2', '\x259', '\x25B', 
		'\x5', '\x44', '#', '\x2', '\x25A', '\x258', '\x3', '\x2', '\x2', '\x2', 
		'\x25A', '\x25B', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x25C', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\a', '\x10', '\x2', '\x2', '\x25D', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', '(', '\x2', 
		'\x2', '\x25F', '\x260', '\a', '*', '\x2', '\x2', '\x260', '\x262', '\x5', 
		'\x42', '\"', '\x2', '\x261', '\x263', '\x5', '^', '\x30', '\x2', '\x262', 
		'\x261', '\x3', '\x2', '\x2', '\x2', '\x262', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x263', '\x65', '\x3', '\x2', '\x2', '\x2', '\x264', '\x265', 
		'\a', ')', '\x2', '\x2', '\x265', '\x266', '\a', '*', '\x2', '\x2', '\x266', 
		'\x268', '\x5', '\x42', '\"', '\x2', '\x267', '\x269', '\x5', '^', '\x30', 
		'\x2', '\x268', '\x267', '\x3', '\x2', '\x2', '\x2', '\x268', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x269', 'g', '\x3', '\x2', '\x2', '\x2', 
		'\x26A', '\x26D', '\x5', 'j', '\x36', '\x2', '\x26B', '\x26D', '\x5', 
		'l', '\x37', '\x2', '\x26C', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x26C', 
		'\x26B', '\x3', '\x2', '\x2', '\x2', '\x26D', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x271', '\a', ',', '\x2', '\x2', '\x26F', '\x272', '\x5', 
		'\x12', '\n', '\x2', '\x270', '\x272', '\x5', '\x16', '\f', '\x2', '\x271', 
		'\x26F', '\x3', '\x2', '\x2', '\x2', '\x271', '\x270', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x273', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', 
		'\a', ' ', '\x2', '\x2', '\x274', '\x275', '\x5', '\x42', '\"', '\x2', 
		'\x275', '\x276', '\a', '\x10', '\x2', '\x2', '\x276', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x277', '\x278', '\a', ',', '\x2', '\x2', '\x278', '\x27C', 
		'\x5', 'n', '\x38', '\x2', '\x279', '\x27B', '\x5', 'p', '\x39', '\x2', 
		'\x27A', '\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x27C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27C', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x280', 
		'\a', ' ', '\x2', '\x2', '\x280', '\x282', '\x5', '\x42', '\"', '\x2', 
		'\x281', '\x283', '\x5', '^', '\x30', '\x2', '\x282', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', '\a', '\x10', '\x2', 
		'\x2', '\x285', 'm', '\x3', '\x2', '\x2', '\x2', '\x286', '\x28C', '\x5', 
		'\x1C', '\xF', '\x2', '\x287', '\x288', '\a', '\x14', '\x2', '\x2', '\x288', 
		'\x289', '\x5', '\x1C', '\xF', '\x2', '\x289', '\x28A', '\a', '\x15', 
		'\x2', '\x2', '\x28A', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x28B', '\x287', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', 'o', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', '\x11', 
		'\x2', '\x2', '\x28E', '\x28F', '\x5', 'n', '\x38', '\x2', '\x28F', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x295', '\x5', 't', ';', '\x2', 
		'\x291', '\x295', '\x5', 'v', '<', '\x2', '\x292', '\x295', '\x5', 'x', 
		'=', '\x2', '\x293', '\x295', '\x5', 'z', '>', '\x2', '\x294', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x294', '\x291', '\x3', '\x2', '\x2', '\x2', 
		'\x294', '\x292', '\x3', '\x2', '\x2', '\x2', '\x294', '\x293', '\x3', 
		'\x2', '\x2', '\x2', '\x295', 's', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x297', '\a', '#', '\x2', '\x2', '\x297', '\x299', '\x5', '\x88', '\x45', 
		'\x2', '\x298', '\x29A', '\x5', '^', '\x30', '\x2', '\x299', '\x298', 
		'\x3', '\x2', '\x2', '\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29C', '\x5', 
		'\x38', '\x1D', '\x2', '\x29C', 'u', '\x3', '\x2', '\x2', '\x2', '\x29D', 
		'\x29E', '\a', '%', '\x2', '\x2', '\x29E', '\x29F', '\x5', 'V', ',', '\x2', 
		'\x29F', '\x2A0', '\x5', '\x38', '\x1D', '\x2', '\x2A0', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x2A1', '\x2A2', '\a', '&', '\x2', '\x2', '\x2A2', '\x2A3', 
		'\x5', '\x38', '\x1D', '\x2', '\x2A3', '\x2A4', '\a', '%', '\x2', '\x2', 
		'\x2A4', '\x2A5', '\x5', 'V', ',', '\x2', '\x2A5', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x2A6', '\x2A7', '\a', '\"', '\x2', '\x2', '\x2A7', '\x2A8', 
		'\x5', '|', '?', '\x2', '\x2A8', '\x2A9', '\x5', '\x38', '\x1D', '\x2', 
		'\x2A9', '{', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\x14', 
		'\x2', '\x2', '\x2AB', '\x2AC', '\x5', '~', '@', '\x2', '\x2AC', '\x2AD', 
		'\a', '\x15', '\x2', '\x2', '\x2AD', '\x2B0', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x2B0', '\x5', '~', '@', '\x2', '\x2AF', '\x2AA', '\x3', '\x2', 
		'\x2', '\x2', '\x2AF', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B0', '}', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B2', '\x5', '\x80', '\x41', '\x2', 
		'\x2B2', '\x2B3', '\a', ' ', '\x2', '\x2', '\x2B3', '\x2B6', '\x5', '\x1C', 
		'\xF', '\x2', '\x2B4', '\x2B5', '\a', '\x12', '\x2', '\x2', '\x2B5', '\x2B7', 
		'\x5', '\x1C', '\xF', '\x2', '\x2B6', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B6', '\x2B7', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x2B8', '\x2BB', '\x5', '\x82', '\x42', '\x2', '\x2B9', 
		'\x2BB', '\x5', '\x1C', '\xF', '\x2', '\x2BA', '\x2B8', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\x4', '\x2', '\x2', 
		'\x2BD', '\x2BE', '\x5', '\x42', '\"', '\x2', '\x2BE', '\x2BF', '\a', 
		'\x1C', '\x2', '\x2', '\x2BF', '\x2C0', '\x5', '\x1C', '\xF', '\x2', '\x2C0', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C7', '\x5', '@', '!', 
		'\x2', '\x2C2', '\x2C3', '\x5', ',', '\x17', '\x2', '\x2C3', '\x2C4', 
		'\x5', '@', '!', '\x2', '\x2C4', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C9', '\x3', 
		'\x2', '\x2', '\x2', '\x2C7', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2D7', '\x3', '\x2', '\x2', 
		'\x2', '\x2C9', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2CB', 
		'\a', '\x14', '\x2', '\x2', '\x2CB', '\x2D1', '\x5', '@', '!', '\x2', 
		'\x2CC', '\x2CD', '\x5', ',', '\x17', '\x2', '\x2CD', '\x2CE', '\x5', 
		'@', '!', '\x2', '\x2CE', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2CF', 
		'\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D3', '\x3', '\x2', '\x2', 
		'\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', 
		'\x3', '\x2', '\x2', '\x2', '\x2D2', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D3', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\a', 
		'\x15', '\x2', '\x2', '\x2D5', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2CA', '\x3', '\x2', '\x2', 
		'\x2', '\x2D7', '\x85', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x5', '\x8A', '\x46', '\x2', '\x2D9', '\x2DA', '\a', '\x45', '\x2', '\x2', 
		'\x2DA', '\x2DB', '\a', '\x1C', '\x2', '\x2', '\x2DB', '\x2DC', '\x5', 
		'\x84', '\x43', '\x2', '\x2DC', '\x87', '\x3', '\x2', '\x2', '\x2', '\x2DD', 
		'\x2DE', '\a', '\x14', '\x2', '\x2', '\x2DE', '\x2DF', '\x5', '\x8A', 
		'\x46', '\x2', '\x2DF', '\x2E0', '\x5', '\x42', '\"', '\x2', '\x2E0', 
		'\x2E1', '\a', '!', '\x2', '\x2', '\x2E1', '\x2E2', '\x5', '\x42', '\"', 
		'\x2', '\x2E2', '\x2E3', '\a', '\x15', '\x2', '\x2', '\x2E3', '\x2EA', 
		'\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\x5', '\x8A', '\x46', '\x2', 
		'\x2E5', '\x2E6', '\x5', '\x42', '\"', '\x2', '\x2E6', '\x2E7', '\a', 
		'!', '\x2', '\x2', '\x2E7', '\x2E8', '\x5', '\x42', '\"', '\x2', '\x2E8', 
		'\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2DD', '\x3', '\x2', '\x2', 
		'\x2', '\x2E9', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x89', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EE', '\a', '\x4', '\x2', '\x2', 
		'\x2EC', '\x2EE', '\x5', 'N', '(', '\x2', '\x2ED', '\x2EB', '\x3', '\x2', 
		'\x2', '\x2', '\x2ED', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F3', '\x5', '\x8A', '\x46', '\x2', 
		'\x2F0', '\x2F1', '\a', '-', '\x2', '\x2', '\x2F1', '\x2F3', '\x5', '\x8A', 
		'\x46', '\x2', '\x2F2', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F2', 
		'\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F5', '\a', '-', '\x2', '\x2', '\x2F5', '\x2F6', '\x5', 
		'\x8A', '\x46', '\x2', '\x2F6', '\x2F9', '\x5', '\x42', '\"', '\x2', '\x2F7', 
		'\x2F8', '\a', '\x1C', '\x2', '\x2', '\x2F8', '\x2FA', '\x5', '\x90', 
		'I', '\x2', '\x2F9', '\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', 
		'\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FB', '\x3', '\x2', '\x2', '\x2', 
		'\x2FB', '\x2FC', '\a', '\x10', '\x2', '\x2', '\x2FC', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x2FD', '\x300', '\x5', '*', '\x16', '\x2', '\x2FE', 
		'\x300', '\x5', '\x42', '\"', '\x2', '\x2FF', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FF', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x300', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x301', '\x302', '\a', '\'', '\x2', '\x2', 
		'\x302', '\x307', '\x5', '\x98', 'M', '\x2', '\x303', '\x304', '\a', '\x11', 
		'\x2', '\x2', '\x304', '\x306', '\x5', '\x98', 'M', '\x2', '\x305', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x306', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x307', '\x305', '\x3', '\x2', '\x2', '\x2', '\x307', '\x308', '\x3', 
		'\x2', '\x2', '\x2', '\x308', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x309', 
		'\x307', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30B', '\a', '!', '\x2', 
		'\x2', '\x30B', '\x30D', '\x5', '\x42', '\"', '\x2', '\x30C', '\x30E', 
		'\x5', '^', '\x30', '\x2', '\x30D', '\x30C', '\x3', '\x2', '\x2', '\x2', 
		'\x30D', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x30F', '\x310', '\a', '\x10', '\x2', '\x2', '\x310', 
		'\x320', '\x3', '\x2', '\x2', '\x2', '\x311', '\x312', '\a', '\'', '\x2', 
		'\x2', '\x312', '\x317', '\x5', '\x9A', 'N', '\x2', '\x313', '\x314', 
		'\a', '\x11', '\x2', '\x2', '\x314', '\x316', '\x5', '\x9A', 'N', '\x2', 
		'\x315', '\x313', '\x3', '\x2', '\x2', '\x2', '\x316', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\x317', '\x315', '\x3', '\x2', '\x2', '\x2', '\x317', 
		'\x318', '\x3', '\x2', '\x2', '\x2', '\x318', '\x31B', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31C', 
		'\x5', '^', '\x30', '\x2', '\x31B', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\x3', 
		'\x2', '\x2', '\x2', '\x31D', '\x31E', '\a', '\x10', '\x2', '\x2', '\x31E', 
		'\x320', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x301', '\x3', '\x2', '\x2', 
		'\x2', '\x31F', '\x311', '\x3', '\x2', '\x2', '\x2', '\x320', '\x93', 
		'\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\a', '\'', '\x2', '\x2', 
		'\x322', '\x327', '\x5', '\x96', 'L', '\x2', '\x323', '\x324', '\a', '\x11', 
		'\x2', '\x2', '\x324', '\x326', '\x5', '\x96', 'L', '\x2', '\x325', '\x323', 
		'\x3', '\x2', '\x2', '\x2', '\x326', '\x329', '\x3', '\x2', '\x2', '\x2', 
		'\x327', '\x325', '\x3', '\x2', '\x2', '\x2', '\x327', '\x328', '\x3', 
		'\x2', '\x2', '\x2', '\x328', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x329', 
		'\x327', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x32C', '\x5', '^', '\x30', 
		'\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', 
		'\x3', '\x2', '\x2', '\x2', '\x32C', '\x32D', '\x3', '\x2', '\x2', '\x2', 
		'\x32D', '\x32E', '\a', '\x10', '\x2', '\x2', '\x32E', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x32F', '\x330', '\x5', '\x9E', 'P', '\x2', '\x330', 
		'\x336', '\x5', '\x9C', 'O', '\x2', '\x331', '\x332', '\a', '\x14', '\x2', 
		'\x2', '\x332', '\x333', '\x5', '\x1C', '\xF', '\x2', '\x333', '\x334', 
		'\a', '\x15', '\x2', '\x2', '\x334', '\x337', '\x3', '\x2', '\x2', '\x2', 
		'\x335', '\x337', '\x5', '\x1C', '\xF', '\x2', '\x336', '\x331', '\x3', 
		'\x2', '\x2', '\x2', '\x336', '\x335', '\x3', '\x2', '\x2', '\x2', '\x337', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', '\x5', '\x9E', 'P', 
		'\x2', '\x339', '\x33F', '\x5', '\x9C', 'O', '\x2', '\x33A', '\x33B', 
		'\a', '\x14', '\x2', '\x2', '\x33B', '\x33C', '\x5', '\x1E', '\x10', '\x2', 
		'\x33C', '\x33D', '\a', '\x15', '\x2', '\x2', '\x33D', '\x340', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x340', '\x5', '\x1E', '\x10', '\x2', '\x33F', 
		'\x33A', '\x3', '\x2', '\x2', '\x2', '\x33F', '\x33E', '\x3', '\x2', '\x2', 
		'\x2', '\x340', '\x99', '\x3', '\x2', '\x2', '\x2', '\x341', '\x342', 
		'\x5', '\x42', '\"', '\x2', '\x342', '\x348', '\x5', '\x9C', 'O', '\x2', 
		'\x343', '\x344', '\a', '\x14', '\x2', '\x2', '\x344', '\x345', '\x5', 
		'\x1C', '\xF', '\x2', '\x345', '\x346', '\a', '\x15', '\x2', '\x2', '\x346', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x347', '\x349', '\x5', '\x1C', 
		'\xF', '\x2', '\x348', '\x343', '\x3', '\x2', '\x2', '\x2', '\x348', '\x347', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x34B', '\t', '\x6', '\x2', '\x2', '\x34B', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x34C', '\x34D', '\a', '\x1B', '\x2', '\x2', '\x34D', '\x34E', 
		'\x5', '\x42', '\"', '\x2', '\x34E', '\x34F', '\a', '\x1B', '\x2', '\x2', 
		'\x34F', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x5', 
		'\x9E', 'P', '\x2', '\x351', '\x352', '\x5', '\x9C', 'O', '\x2', '\x352', 
		'\x353', '\x5', '@', '!', '\x2', '\x353', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\x354', '\x357', '\x5', '\xA6', 'T', '\x2', '\x355', '\x357', 
		'\x5', '\xAC', 'W', '\x2', '\x356', '\x354', '\x3', '\x2', '\x2', '\x2', 
		'\x356', '\x355', '\x3', '\x2', '\x2', '\x2', '\x357', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\x358', '\x35D', '\x5', '\xA8', 'U', '\x2', '\x359', 
		'\x35D', '\x5', '\xAA', 'V', '\x2', '\x35A', '\x35D', '\x5', '\xAE', 'X', 
		'\x2', '\x35B', '\x35D', '\x5', '\xB0', 'Y', '\x2', '\x35C', '\x358', 
		'\x3', '\x2', '\x2', '\x2', '\x35C', '\x359', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35A', '\x3', '\x2', '\x2', '\x2', '\x35C', '\x35B', '\x3', 
		'\x2', '\x2', '\x2', '\x35D', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x35F', '\a', '\x36', '\x2', '\x2', '\x35F', '\x360', '\x5', '\x1C', 
		'\xF', '\x2', '\x360', '\x361', '\a', ' ', '\x2', '\x2', '\x361', '\x362', 
		'\x5', '\x42', '\"', '\x2', '\x362', '\x363', '\a', '\x10', '\x2', '\x2', 
		'\x363', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\a', '\x37', 
		'\x2', '\x2', '\x365', '\x366', '\a', '*', '\x2', '\x2', '\x366', '\x367', 
		'\x5', '\x42', '\"', '\x2', '\x367', '\xA9', '\x3', '\x2', '\x2', '\x2', 
		'\x368', '\x369', '\a', '\x33', '\x2', '\x2', '\x369', '\x36A', '\a', 
		'*', '\x2', '\x2', '\x36A', '\x36B', '\x5', '\x42', '\"', '\x2', '\x36B', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36D', '\a', '\x34', '\x2', 
		'\x2', '\x36D', '\x36E', '\x5', '\x1C', '\xF', '\x2', '\x36E', '\x36F', 
		'\a', ' ', '\x2', '\x2', '\x36F', '\x370', '\x5', '\x42', '\"', '\x2', 
		'\x370', '\x371', '\a', '\x10', '\x2', '\x2', '\x371', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x372', '\x374', '\a', ';', '\x2', '\x2', '\x373', 
		'\x375', '\x5', '\x9E', 'P', '\x2', '\x374', '\x373', '\x3', '\x2', '\x2', 
		'\x2', '\x374', '\x375', '\x3', '\x2', '\x2', '\x2', '\x375', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x376', '\x377', '\a', '*', '\x2', '\x2', 
		'\x377', '\x379', '\x5', '\x42', '\"', '\x2', '\x378', '\x37A', '\x5', 
		'^', '\x30', '\x2', '\x379', '\x378', '\x3', '\x2', '\x2', '\x2', '\x379', 
		'\x37A', '\x3', '\x2', '\x2', '\x2', '\x37A', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\x37B', '\x37D', '\a', '<', '\x2', '\x2', '\x37C', '\x37E', '\x5', 
		'\x9E', 'P', '\x2', '\x37D', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x380', '\a', '*', '\x2', '\x2', '\x380', '\x382', '\x5', 
		'\x42', '\"', '\x2', '\x381', '\x383', '\x5', '^', '\x30', '\x2', '\x382', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x384', '\x389', 
		'\x5', '@', '!', '\x2', '\x385', '\x386', '\a', '\x11', '\x2', '\x2', 
		'\x386', '\x388', '\x5', '@', '!', '\x2', '\x387', '\x385', '\x3', '\x2', 
		'\x2', '\x2', '\x388', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x389', '\x387', 
		'\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', 
		'\x38A', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x38C', '\x391', '\x5', '\xB6', '\\', '\x2', '\x38D', 
		'\x38E', '\a', '\x11', '\x2', '\x2', '\x38E', '\x390', '\x5', '\xB6', 
		'\\', '\x2', '\x38F', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x390', '\x393', 
		'\x3', '\x2', '\x2', '\x2', '\x391', '\x38F', '\x3', '\x2', '\x2', '\x2', 
		'\x391', '\x392', '\x3', '\x2', '\x2', '\x2', '\x392', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x393', '\x391', '\x3', '\x2', '\x2', '\x2', '\x394', 
		'\x395', '\x5', '\x1C', '\xF', '\x2', '\x395', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\x396', '\x397', '\a', '=', '\x2', '\x2', '\x397', '\x398', '\x5', 
		'\xB4', '[', '\x2', '\x398', '\x399', '\a', '\x10', '\x2', '\x2', '\x399', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', '\a', '\x37', '\x2', 
		'\x2', '\x39B', '\x39C', '\a', '*', '\x2', '\x2', '\x39C', '\x39E', '\x5', 
		'\x42', '\"', '\x2', '\x39D', '\x39F', '\x5', '^', '\x30', '\x2', '\x39E', 
		'\x39D', '\x3', '\x2', '\x2', '\x2', '\x39E', '\x39F', '\x3', '\x2', '\x2', 
		'\x2', '\x39F', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A1', 
		'\a', '@', '\x2', '\x2', '\x3A1', '\x3A2', '\a', 'N', '\x2', '\x2', '\x3A2', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x3A3', '\x3A4', '\x5', '\xBC', '_', 
		'\x2', '\x3A4', '\xBF', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', 
		'\a', '\x39', '\x2', '\x2', '\x3A6', '\x3A7', '\a', '*', '\x2', '\x2', 
		'\x3A7', '\x3A9', '\x5', '\x42', '\"', '\x2', '\x3A8', '\x3AA', '\x5', 
		'^', '\x30', '\x2', '\x3A9', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A9', 
		'\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AA', '\x3AB', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x3AC', '\a', '\x10', '\x2', '\x2', '\x3AC', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\a', ':', '\x2', '\x2', 
		'\x3AE', '\x3AF', '\a', '*', '\x2', '\x2', '\x3AF', '\x3B1', '\x5', '\x42', 
		'\"', '\x2', '\x3B0', '\x3B2', '\x5', '^', '\x30', '\x2', '\x3B1', '\x3B0', 
		'\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\x3', '\x2', '\x2', '\x2', 
		'\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\a', 
		'\x10', '\x2', '\x2', '\x3B4', '\xC3', '\x3', '\x2', '\x2', '\x2', ']', 
		'\xC7', '\xD0', '\xD5', '\xD9', '\xE0', '\xE2', '\xEA', '\xFA', '\xFC', 
		'\x107', '\x10B', '\x113', '\x116', '\x120', '\x124', '\x12E', '\x134', 
		'\x140', '\x149', '\x14E', '\x159', '\x15D', '\x166', '\x16A', '\x170', 
		'\x176', '\x17B', '\x17F', '\x18A', '\x195', '\x19E', '\x1AF', '\x1BA', 
		'\x1BF', '\x1CE', '\x1D2', '\x1D9', '\x1E1', '\x1F3', '\x1F7', '\x209', 
		'\x20E', '\x213', '\x21F', '\x224', '\x229', '\x243', '\x252', '\x256', 
		'\x25A', '\x262', '\x268', '\x26C', '\x271', '\x27C', '\x282', '\x28B', 
		'\x294', '\x299', '\x2AF', '\x2B6', '\x2BA', '\x2C7', '\x2D1', '\x2D6', 
		'\x2E9', '\x2ED', '\x2F2', '\x2F9', '\x2FF', '\x307', '\x30D', '\x317', 
		'\x31B', '\x31F', '\x327', '\x32B', '\x336', '\x33F', '\x348', '\x356', 
		'\x35C', '\x374', '\x379', '\x37D', '\x382', '\x389', '\x391', '\x39E', 
		'\x3A9', '\x3B1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
