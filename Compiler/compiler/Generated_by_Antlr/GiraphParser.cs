//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GiraphParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GiraphParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOOLOPERATOR=1, TYPE=2, GRAPHOBJ=3, VERTEXOBJ=4, EDGEOBJ=5, RESERVEDFUNC=6, 
		ISEMPTY=7, PLUS=8, MINUS=9, DIVIDE=10, MULT=11, MODULO=12, NOT=13, AND=14, 
		OR=15, SC=16, COMMA=17, COLON=18, IF=19, LP=20, RP=21, LCB=22, RCB=23, 
		LSB=24, RSB=25, DOT=26, SINGLEQUOTE=27, EQUALS=28, QUOTE=29, ELSEIF=30, 
		ELSE=31, TO=32, IN=33, FOR=34, FOREACH=35, RETURN=36, WHILE=37, DO=38, 
		SET=39, SELECT=40, SELECTALL=41, FROM=42, WHERE=43, ADD=44, COLLECTION=45, 
		RIGHTARROW=46, RUN=47, WITH=48, EXTEND=49, PREDICATE=50, POP=51, PUSH=52, 
		PEEK=53, ENQUEUE=54, DEQUEUE=55, INITIALLY=56, CONDITIONSEP=57, EXTRACTMIN=58, 
		EXTRACTMAX=59, PRINT=60, INF=61, UNDERSCORE=62, BOOL=63, INTEGER=64, FLOATNUM=65, 
		VARIABLENAME=66, LETTER=67, LOWLETTER=68, CAPLETTER=69, ZERO=70, DIGITNZ=71, 
		FUNCTIONID=72, ID=73, WhiteSpace=74, WS=75, STRING=76, SPECIALCHARS=77;
	public const int
		RULE_start = 0, RULE_program = 1, RULE_dcls = 2, RULE_objectDcl = 3, RULE_variableDcl = 4, 
		RULE_graphInitDcl = 5, RULE_graphDclBlock = 6, RULE_vertexDcls = 7, RULE_vertexDcl = 8, 
		RULE_edgeDcls = 9, RULE_edgeDcl = 10, RULE_assignment = 11, RULE_expression = 12, 
		RULE_expressionExtension = 13, RULE_query = 14, RULE_noReturnQuery = 15, 
		RULE_returnQuery = 16, RULE_operator = 17, RULE_simpleOperators = 18, 
		RULE_advancedOperators = 19, RULE_formalParams = 20, RULE_formalParam = 21, 
		RULE_functionDcl = 22, RULE_codeBlock = 23, RULE_returnBlock = 24, RULE_runFunction = 25, 
		RULE_codeBlockContent = 26, RULE_varOrConst = 27, RULE_varOrFuncOrConst = 28, 
		RULE_variable = 29, RULE_variableFunc = 30, RULE_dotFunction = 31, RULE_constant = 32, 
		RULE_string = 33, RULE_integer = 34, RULE_floatnum = 35, RULE_bool = 36, 
		RULE_objects = 37, RULE_ifElseIfElse = 38, RULE_boolComparisons = 39, 
		RULE_predicate = 40, RULE_predicateCall = 41, RULE_where = 42, RULE_andOr = 43, 
		RULE_extend = 44, RULE_select = 45, RULE_selectAll = 46, RULE_addQuery = 47, 
		RULE_addToGraph = 48, RULE_addToColl = 49, RULE_loopDcl = 50, RULE_forCondition = 51, 
		RULE_inlineDcl = 52, RULE_foreachCondition = 53, RULE_allType = 54, RULE_allTypeWithColl = 55, 
		RULE_collectionDcl = 56, RULE_setQuery = 57, RULE_setExpression = 58, 
		RULE_compoundAssign = 59, RULE_attribute = 60, RULE_setOneAttri = 61, 
		RULE_collNoReturnOps = 62, RULE_collReturnOps = 63, RULE_enqueueOP = 64, 
		RULE_dequeueOP = 65, RULE_popOP = 66, RULE_pushOP = 67, RULE_extractMinOP = 68, 
		RULE_extractMaxOP = 69, RULE_equalComp = 70, RULE_parameters = 71, RULE_printOptions = 72, 
		RULE_printOption = 73, RULE_print = 74, RULE_dequeueOPOneLine = 75, RULE_commentLine = 76, 
		RULE_comments = 77;
	public static readonly string[] ruleNames = {
		"start", "program", "dcls", "objectDcl", "variableDcl", "graphInitDcl", 
		"graphDclBlock", "vertexDcls", "vertexDcl", "edgeDcls", "edgeDcl", "assignment", 
		"expression", "expressionExtension", "query", "noReturnQuery", "returnQuery", 
		"operator", "simpleOperators", "advancedOperators", "formalParams", "formalParam", 
		"functionDcl", "codeBlock", "returnBlock", "runFunction", "codeBlockContent", 
		"varOrConst", "varOrFuncOrConst", "variable", "variableFunc", "dotFunction", 
		"constant", "string", "integer", "floatnum", "bool", "objects", "ifElseIfElse", 
		"boolComparisons", "predicate", "predicateCall", "where", "andOr", "extend", 
		"select", "selectAll", "addQuery", "addToGraph", "addToColl", "loopDcl", 
		"forCondition", "inlineDcl", "foreachCondition", "allType", "allTypeWithColl", 
		"collectionDcl", "setQuery", "setExpression", "compoundAssign", "attribute", 
		"setOneAttri", "collNoReturnOps", "collReturnOps", "enqueueOP", "dequeueOP", 
		"popOP", "pushOP", "extractMinOP", "extractMaxOP", "equalComp", "parameters", 
		"printOptions", "printOption", "print", "dequeueOPOneLine", "commentLine", 
		"comments"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'GRAPH'", "'VERTEX'", "'EDGE'", null, "'ISEMPTY'", 
		"'+'", "'-'", "'/'", "'*'", "'%'", "'!'", "'&'", "'|'", "';'", "','", 
		"':'", "'IF'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", "'''", 
		"'='", "'\"'", "'ELSEIF'", "'ELSE'", "'TO'", "'IN'", "'FOR'", "'FOREACH'", 
		"'RETURN'", "'WHILE'", "'DO'", "'SET'", "'SELECT'", "'SELECTALL'", "'FROM'", 
		"'WHERE'", "'ADD'", "'COLLECTION'", "'->'", "'RUN'", "'WITH'", "'EXTEND'", 
		"'PREDICATE'", "'POP'", "'PUSH'", "'PEEK'", "'ENQUEUE'", "'DEQUEUE'", 
		"'INITIALLY'", null, "'EXTRACTMIN'", "'EXTRACTMAX'", "'PRINT'", "'INF'", 
		"'_'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOOLOPERATOR", "TYPE", "GRAPHOBJ", "VERTEXOBJ", "EDGEOBJ", "RESERVEDFUNC", 
		"ISEMPTY", "PLUS", "MINUS", "DIVIDE", "MULT", "MODULO", "NOT", "AND", 
		"OR", "SC", "COMMA", "COLON", "IF", "LP", "RP", "LCB", "RCB", "LSB", "RSB", 
		"DOT", "SINGLEQUOTE", "EQUALS", "QUOTE", "ELSEIF", "ELSE", "TO", "IN", 
		"FOR", "FOREACH", "RETURN", "WHILE", "DO", "SET", "SELECT", "SELECTALL", 
		"FROM", "WHERE", "ADD", "COLLECTION", "RIGHTARROW", "RUN", "WITH", "EXTEND", 
		"PREDICATE", "POP", "PUSH", "PEEK", "ENQUEUE", "DEQUEUE", "INITIALLY", 
		"CONDITIONSEP", "EXTRACTMIN", "EXTRACTMAX", "PRINT", "INF", "UNDERSCORE", 
		"BOOL", "INTEGER", "FLOATNUM", "VARIABLENAME", "LETTER", "LOWLETTER", 
		"CAPLETTER", "ZERO", "DIGITNZ", "FUNCTIONID", "ID", "WhiteSpace", "WS", 
		"STRING", "SPECIALCHARS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GiraphParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GiraphParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GiraphParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GiraphParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StartContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GiraphParser.Eof, 0); }
		public ProgramContext[] program() {
			return GetRuleContexts<ProgramContext>();
		}
		public ProgramContext program(int i) {
			return GetRuleContext<ProgramContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 156; program();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << DIVIDE) | (1L << SET) | (1L << SELECT) | (1L << SELECTALL) | (1L << ADD) | (1L << COLLECTION) | (1L << EXTEND))) != 0) || _la==VARIABLENAME );
			State = 161; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		public FunctionDclContext functionDcl() {
			return GetRuleContext<FunctionDclContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public ExtendContext extend() {
			return GetRuleContext<ExtendContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		try {
			State = 168;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; functionDcl();
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; dcls();
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165; extend();
				}
				break;
			case SET:
			case SELECT:
			case SELECTALL:
			case ADD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166; query();
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167; comments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclsContext : ParserRuleContext {
		public ObjectDclContext objectDcl() {
			return GetRuleContext<ObjectDclContext>(0);
		}
		public CollectionDclContext collectionDcl() {
			return GetRuleContext<CollectionDclContext>(0);
		}
		public VariableDclContext variableDcl() {
			return GetRuleContext<VariableDclContext>(0);
		}
		public DclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DclsContext dcls() {
		DclsContext _localctx = new DclsContext(Context, State);
		EnterRule(_localctx, 4, RULE_dcls);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; objectDcl();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171; collectionDcl();
				}
				break;
			case TYPE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 172; variableDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDclContext : ParserRuleContext {
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public GraphInitDclContext graphInitDcl() {
			return GetRuleContext<GraphInitDclContext>(0);
		}
		public ObjectDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDclContext objectDcl() {
		ObjectDclContext _localctx = new ObjectDclContext(Context, State);
		EnterRule(_localctx, 6, RULE_objectDcl);
		int _la;
		try {
			State = 184;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 175; objects();
				State = 176; variable();
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUALS) {
					{
					State = 177; Match(EQUALS);
					State = 178; expression();
					}
				}

				{
				State = 181; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; graphInitDcl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDclContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDclContext variableDcl() {
		VariableDclContext _localctx = new VariableDclContext(Context, State);
		EnterRule(_localctx, 8, RULE_variableDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(TYPE);
			State = 187; variable();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 188; Match(EQUALS);
				State = 189; expression();
				}
			}

			{
			State = 192; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphInitDclContext : ParserRuleContext {
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public GraphDclBlockContext graphDclBlock() {
			return GetRuleContext<GraphDclBlockContext>(0);
		}
		public GraphInitDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphInitDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphInitDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphInitDclContext graphInitDcl() {
		GraphInitDclContext _localctx = new GraphInitDclContext(Context, State);
		EnterRule(_localctx, 10, RULE_graphInitDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(GRAPHOBJ);
			State = 195; variable();
			State = 196; graphDclBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GraphDclBlockContext : ParserRuleContext {
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public SetQueryContext[] setQuery() {
			return GetRuleContexts<SetQueryContext>();
		}
		public SetQueryContext setQuery(int i) {
			return GetRuleContext<SetQueryContext>(i);
		}
		public VertexDclsContext[] vertexDcls() {
			return GetRuleContexts<VertexDclsContext>();
		}
		public VertexDclsContext vertexDcls(int i) {
			return GetRuleContext<VertexDclsContext>(i);
		}
		public EdgeDclsContext[] edgeDcls() {
			return GetRuleContexts<EdgeDclsContext>();
		}
		public EdgeDclsContext edgeDcls(int i) {
			return GetRuleContext<EdgeDclsContext>(i);
		}
		public ITerminalNode[] SC() { return GetTokens(GiraphParser.SC); }
		public ITerminalNode SC(int i) {
			return GetToken(GiraphParser.SC, i);
		}
		public GraphDclBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_graphDclBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGraphDclBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GraphDclBlockContext graphDclBlock() {
		GraphDclBlockContext _localctx = new GraphDclBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_graphDclBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198; Match(LCB);
			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << SET))) != 0)) {
				{
				State = 206;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SET:
					{
					State = 199; setQuery();
					}
					break;
				case VERTEXOBJ:
					{
					{
					State = 200; vertexDcls();
					{
					State = 201; Match(SC);
					}
					}
					}
					break;
				case EDGEOBJ:
					{
					{
					State = 203; edgeDcls();
					{
					State = 204; Match(SC);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 211; Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public VertexDclContext[] vertexDcl() {
			return GetRuleContexts<VertexDclContext>();
		}
		public VertexDclContext vertexDcl(int i) {
			return GetRuleContext<VertexDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclsContext vertexDcls() {
		VertexDclsContext _localctx = new VertexDclsContext(Context, State);
		EnterRule(_localctx, 14, RULE_vertexDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(VERTEXOBJ);
			State = 214; vertexDcl();
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 215; Match(COMMA);
				State = 216; vertexDcl();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VertexDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public VertexDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vertexDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVertexDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VertexDclContext vertexDcl() {
		VertexDclContext _localctx = new VertexDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_vertexDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 222; variable();
				}
			}

			{
			State = 225; Match(LP);
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << INF) | (1L << BOOL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTEGER - 64)) | (1L << (FLOATNUM - 64)) | (1L << (VARIABLENAME - 64)) | (1L << (STRING - 64)))) != 0)) {
				{
				State = 226; assignment();
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 227; Match(COMMA);
					State = 228; assignment();
					}
					}
					State = 233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 236; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclsContext : ParserRuleContext {
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public EdgeDclContext[] edgeDcl() {
			return GetRuleContexts<EdgeDclContext>();
		}
		public EdgeDclContext edgeDcl(int i) {
			return GetRuleContext<EdgeDclContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public EdgeDclsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcls; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcls(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclsContext edgeDcls() {
		EdgeDclsContext _localctx = new EdgeDclsContext(Context, State);
		EnterRule(_localctx, 18, RULE_edgeDcls);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(EDGEOBJ);
			State = 239; edgeDcl();
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 240; Match(COMMA);
				State = 241; edgeDcl();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EdgeDclContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public EdgeDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edgeDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdgeDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EdgeDclContext edgeDcl() {
		EdgeDclContext _localctx = new EdgeDclContext(Context, State);
		EnterRule(_localctx, 20, RULE_edgeDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VARIABLENAME) {
				{
				State = 247; variable();
				}
			}

			{
			State = 250; Match(LP);
			State = 251; variable();
			{
			State = 252; Match(COMMA);
			}
			State = 253; variable();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 254; Match(COMMA);
				State = 255; assignment();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 261; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public EqualCompContext equalComp() {
			return GetRuleContext<EqualCompContext>(0);
		}
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		int _la;
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; variable();
				State = 264; Match(EQUALS);
				State = 265; expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 267; varOrConst();
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					State = 268; @operator();
					}
				}

				{
				State = 271; Match(EQUALS);
				}
				State = 272; runFunction();
				{
				State = 273; Match(SC);
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) {
					{
					State = 275; allType();
					}
				}

				State = 278; variable();
				State = 279; equalComp();
				State = 280; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public VariableFuncContext variableFunc() {
			return GetRuleContext<VariableFuncContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExpressionExtensionContext[] expressionExtension() {
			return GetRuleContexts<ExpressionExtensionContext>();
		}
		public ExpressionExtensionContext expressionExtension(int i) {
			return GetRuleContext<ExpressionExtensionContext>(i);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public CollReturnOpsContext collReturnOps() {
			return GetRuleContext<CollReturnOpsContext>(0);
		}
		public PredicateCallContext predicateCall() {
			return GetRuleContext<PredicateCallContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		try {
			int _alt;
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case VARIABLENAME:
					{
					State = 284; variableFunc();
					}
					break;
				case INF:
				case BOOL:
				case INTEGER:
				case FLOATNUM:
				case STRING:
					{
					State = 285; constant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 291;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 288; expressionExtension();
						}
						} 
					}
					State = 293;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; returnQuery();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295; collReturnOps();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 296; predicateCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 297; attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionExtensionContext : ParserRuleContext {
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public ExpressionExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionExtension; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionExtensionContext expressionExtension() {
		ExpressionExtensionContext _localctx = new ExpressionExtensionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expressionExtension);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; @operator();
			State = 301; varOrConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public NoReturnQueryContext noReturnQuery() {
			return GetRuleContext<NoReturnQueryContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 28, RULE_query);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
			case ADD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303; noReturnQuery();
				}
				break;
			case SELECT:
			case SELECTALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 304; returnQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoReturnQueryContext : ParserRuleContext {
		public SetQueryContext setQuery() {
			return GetRuleContext<SetQueryContext>(0);
		}
		public AddQueryContext addQuery() {
			return GetRuleContext<AddQueryContext>(0);
		}
		public NoReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noReturnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNoReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NoReturnQueryContext noReturnQuery() {
		NoReturnQueryContext _localctx = new NoReturnQueryContext(Context, State);
		EnterRule(_localctx, 30, RULE_noReturnQuery);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307; setQuery();
				}
				break;
			case ADD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308; addQuery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnQueryContext : ParserRuleContext {
		public SelectContext select() {
			return GetRuleContext<SelectContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SelectAllContext selectAll() {
			return GetRuleContext<SelectAllContext>(0);
		}
		public ReturnQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnQueryContext returnQuery() {
		ReturnQueryContext _localctx = new ReturnQueryContext(Context, State);
		EnterRule(_localctx, 32, RULE_returnQuery);
		try {
			State = 319;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311; select();
				State = 313;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 312; where();
					}
					break;
				}
				}
				break;
			case SELECTALL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 315; selectAll();
				State = 317;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
				case 1:
					{
					State = 316; where();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public SimpleOperatorsContext simpleOperators() {
			return GetRuleContext<SimpleOperatorsContext>(0);
		}
		public AdvancedOperatorsContext advancedOperators() {
			return GetRuleContext<AdvancedOperatorsContext>(0);
		}
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_operator);
		try {
			State = 323;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 321; simpleOperators();
				}
				break;
			case DIVIDE:
			case MULT:
			case MODULO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 322; advancedOperators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleOperatorsContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(GiraphParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public SimpleOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleOperatorsContext simpleOperators() {
		SimpleOperatorsContext _localctx = new SimpleOperatorsContext(Context, State);
		EnterRule(_localctx, 36, RULE_simpleOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			_la = TokenStream.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdvancedOperatorsContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(GiraphParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GiraphParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(GiraphParser.MODULO, 0); }
		public AdvancedOperatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_advancedOperators; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdvancedOperators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdvancedOperatorsContext advancedOperators() {
		AdvancedOperatorsContext _localctx = new AdvancedOperatorsContext(Context, State);
		EnterRule(_localctx, 38, RULE_advancedOperators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamsContext : ParserRuleContext {
		public FormalParamContext[] formalParam() {
			return GetRuleContexts<FormalParamContext>();
		}
		public FormalParamContext formalParam(int i) {
			return GetRuleContext<FormalParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public FormalParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParams; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamsContext formalParams() {
		FormalParamsContext _localctx = new FormalParamsContext(Context, State);
		EnterRule(_localctx, 40, RULE_formalParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; formalParam();
			State = 334;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 330; Match(COMMA);
				State = 331; formalParam();
				}
				}
				State = 336;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParamContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public FormalParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParam; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParam(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParamContext formalParam() {
		FormalParamContext _localctx = new FormalParamContext(Context, State);
		EnterRule(_localctx, 42, RULE_formalParam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; allType();
			State = 338; variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDclContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode RIGHTARROW() { return GetToken(GiraphParser.RIGHTARROW, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public FormalParamsContext formalParams() {
			return GetRuleContext<FormalParamsContext>(0);
		}
		public FunctionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDclContext functionDcl() {
		FunctionDclContext _localctx = new FunctionDclContext(Context, State);
		EnterRule(_localctx, 44, RULE_functionDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; variable();
			State = 341; Match(RIGHTARROW);
			State = 342; allTypeWithColl();
			State = 343; Match(LP);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) {
				{
				State = 344; formalParams();
				}
			}

			State = 347; Match(RP);
			State = 348; codeBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContext : ParserRuleContext {
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public CodeBlockContentContext[] codeBlockContent() {
			return GetRuleContexts<CodeBlockContentContext>();
		}
		public CodeBlockContentContext codeBlockContent(int i) {
			return GetRuleContext<CodeBlockContentContext>(i);
		}
		public CodeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContext codeBlock() {
		CodeBlockContext _localctx = new CodeBlockContext(Context, State);
		EnterRule(_localctx, 46, RULE_codeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350; Match(LCB);
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TYPE) | (1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ) | (1L << DIVIDE) | (1L << IF) | (1L << FOR) | (1L << FOREACH) | (1L << RETURN) | (1L << WHILE) | (1L << DO) | (1L << SET) | (1L << SELECT) | (1L << SELECTALL) | (1L << ADD) | (1L << COLLECTION) | (1L << RUN) | (1L << PREDICATE) | (1L << PUSH) | (1L << ENQUEUE) | (1L << DEQUEUE) | (1L << PRINT))) != 0)) {
				{
				{
				State = 351; codeBlockContent();
				}
				}
				State = 356;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357; Match(RCB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnBlockContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(GiraphParser.RETURN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public ReturnBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnBlockContext returnBlock() {
		ReturnBlockContext _localctx = new ReturnBlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_returnBlock);
		try {
			State = 369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; Match(RETURN);
				State = 360; variable();
				{
				State = 361; Match(SC);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 363; Match(RETURN);
				State = 364; runFunction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 365; Match(RETURN);
				State = 366; boolComparisons(0);
				{
				State = 367; Match(SC);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RunFunctionContext : ParserRuleContext {
		public ITerminalNode RUN() { return GetToken(GiraphParser.RUN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode WITH() { return GetToken(GiraphParser.WITH, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public RunFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRunFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RunFunctionContext runFunction() {
		RunFunctionContext _localctx = new RunFunctionContext(Context, State);
		EnterRule(_localctx, 50, RULE_runFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; Match(RUN);
			State = 372; variable();
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 373; Match(WITH);
				State = 374; Match(LP);
				State = 375; varOrConst();
				State = 380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 376; Match(COMMA);
					State = 377; varOrConst();
					}
					}
					State = 382;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 383; Match(RP);
				}
			}

			{
			State = 387; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeBlockContentContext : ParserRuleContext {
		public IfElseIfElseContext ifElseIfElse() {
			return GetRuleContext<IfElseIfElseContext>(0);
		}
		public DclsContext dcls() {
			return GetRuleContext<DclsContext>(0);
		}
		public LoopDclContext loopDcl() {
			return GetRuleContext<LoopDclContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ReturnBlockContext returnBlock() {
			return GetRuleContext<ReturnBlockContext>(0);
		}
		public QueryContext query() {
			return GetRuleContext<QueryContext>(0);
		}
		public CollNoReturnOpsContext collNoReturnOps() {
			return GetRuleContext<CollNoReturnOpsContext>(0);
		}
		public DequeueOPOneLineContext dequeueOPOneLine() {
			return GetRuleContext<DequeueOPOneLineContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public CommentsContext comments() {
			return GetRuleContext<CommentsContext>(0);
		}
		public CodeBlockContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeBlockContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCodeBlockContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeBlockContentContext codeBlockContent() {
		CodeBlockContentContext _localctx = new CodeBlockContentContext(Context, State);
		EnterRule(_localctx, 52, RULE_codeBlockContent);
		try {
			State = 400;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; ifElseIfElse();
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; dcls();
				}
				break;
			case FOR:
			case FOREACH:
			case WHILE:
			case DO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; loopDcl();
				}
				break;
			case PREDICATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 392; predicate();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 393; returnBlock();
				}
				break;
			case SET:
			case SELECT:
			case SELECTALL:
			case ADD:
				EnterOuterAlt(_localctx, 6);
				{
				State = 394; query();
				}
				break;
			case PUSH:
			case ENQUEUE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 395; collNoReturnOps();
				}
				break;
			case DEQUEUE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 396; dequeueOPOneLine();
				}
				break;
			case RUN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 397; runFunction();
				}
				break;
			case PRINT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 398; print();
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 399; comments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrConstContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VarOrConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrConstContext varOrConst() {
		VarOrConstContext _localctx = new VarOrConstContext(Context, State);
		EnterRule(_localctx, 54, RULE_varOrConst);
		try {
			State = 404;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402; variable();
				}
				break;
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 403; constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarOrFuncOrConstContext : ParserRuleContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public VariableFuncContext variableFunc() {
			return GetRuleContext<VariableFuncContext>(0);
		}
		public VarOrFuncOrConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varOrFuncOrConst; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarOrFuncOrConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarOrFuncOrConstContext varOrFuncOrConst() {
		VarOrFuncOrConstContext _localctx = new VarOrFuncOrConstContext(Context, State);
		EnterRule(_localctx, 56, RULE_varOrFuncOrConst);
		try {
			State = 408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 406; constant();
				}
				break;
			case VARIABLENAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 407; variableFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public ITerminalNode[] VARIABLENAME() { return GetTokens(GiraphParser.VARIABLENAME); }
		public ITerminalNode VARIABLENAME(int i) {
			return GetToken(GiraphParser.VARIABLENAME, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(GiraphParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(GiraphParser.DOT, i);
		}
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 58, RULE_variable);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 410; Match(VARIABLENAME);
			State = 415;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 411; Match(DOT);
					{
					State = 412; Match(VARIABLENAME);
					}
					}
					} 
				}
				State = 417;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableFuncContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public DotFunctionContext dotFunction() {
			return GetRuleContext<DotFunctionContext>(0);
		}
		public VariableFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableFunc; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableFuncContext variableFunc() {
		VariableFuncContext _localctx = new VariableFuncContext(Context, State);
		EnterRule(_localctx, 60, RULE_variableFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 418; variable();
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 419; dotFunction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotFunctionContext : ParserRuleContext {
		public ITerminalNode RESERVEDFUNC() { return GetToken(GiraphParser.RESERVEDFUNC, 0); }
		public ITerminalNode DOT() { return GetToken(GiraphParser.DOT, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public DotFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotFunction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotFunctionContext dotFunction() {
		DotFunctionContext _localctx = new DotFunctionContext(Context, State);
		EnterRule(_localctx, 62, RULE_dotFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 422; Match(DOT);
			}
			State = 423; Match(RESERVEDFUNC);
			{
			State = 424; Match(LP);
			}
			State = 433;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (INF - 61)) | (1L << (BOOL - 61)) | (1L << (INTEGER - 61)) | (1L << (FLOATNUM - 61)) | (1L << (VARIABLENAME - 61)) | (1L << (STRING - 61)))) != 0)) {
				{
				State = 425; varOrConst();
				State = 430;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 426; Match(COMMA);
					State = 427; varOrConst();
					}
					}
					State = 432;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			{
			State = 435; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public FloatnumContext floatnum() {
			return GetRuleContext<FloatnumContext>(0);
		}
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ITerminalNode INF() { return GetToken(GiraphParser.INF, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 64, RULE_constant);
		try {
			State = 442;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 437; integer();
				}
				break;
			case FLOATNUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 438; floatnum();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 439; @bool();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 440; @string();
				}
				break;
			case INF:
				EnterOuterAlt(_localctx, 5);
				{
				State = 441; Match(INF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 66, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 444; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GiraphParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 68, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatnumContext : ParserRuleContext {
		public ITerminalNode FLOATNUM() { return GetToken(GiraphParser.FLOATNUM, 0); }
		public FloatnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatnum; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatnumContext floatnum() {
		FloatnumContext _localctx = new FloatnumContext(Context, State);
		EnterRule(_localctx, 70, RULE_floatnum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 448; Match(FLOATNUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(GiraphParser.BOOL, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(Context, State);
		EnterRule(_localctx, 72, RULE_bool);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 450; Match(BOOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectsContext : ParserRuleContext {
		public ITerminalNode VERTEXOBJ() { return GetToken(GiraphParser.VERTEXOBJ, 0); }
		public ITerminalNode EDGEOBJ() { return GetToken(GiraphParser.EDGEOBJ, 0); }
		public ITerminalNode GRAPHOBJ() { return GetToken(GiraphParser.GRAPHOBJ, 0); }
		public ObjectsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objects; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjects(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectsContext objects() {
		ObjectsContext _localctx = new ObjectsContext(Context, State);
		EnterRule(_localctx, 74, RULE_objects);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GRAPHOBJ) | (1L << VERTEXOBJ) | (1L << EDGEOBJ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfElseContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GiraphParser.IF, 0); }
		public ITerminalNode[] LP() { return GetTokens(GiraphParser.LP); }
		public ITerminalNode LP(int i) {
			return GetToken(GiraphParser.LP, i);
		}
		public BoolComparisonsContext[] boolComparisons() {
			return GetRuleContexts<BoolComparisonsContext>();
		}
		public BoolComparisonsContext boolComparisons(int i) {
			return GetRuleContext<BoolComparisonsContext>(i);
		}
		public ITerminalNode[] RP() { return GetTokens(GiraphParser.RP); }
		public ITerminalNode RP(int i) {
			return GetToken(GiraphParser.RP, i);
		}
		public CodeBlockContext[] codeBlock() {
			return GetRuleContexts<CodeBlockContext>();
		}
		public CodeBlockContext codeBlock(int i) {
			return GetRuleContext<CodeBlockContext>(i);
		}
		public ITerminalNode[] ELSEIF() { return GetTokens(GiraphParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(GiraphParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(GiraphParser.ELSE, 0); }
		public IfElseIfElseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfElse; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfElseContext ifElseIfElse() {
		IfElseIfElseContext _localctx = new IfElseIfElseContext(Context, State);
		EnterRule(_localctx, 76, RULE_ifElseIfElse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(IF);
			State = 455; Match(LP);
			State = 456; boolComparisons(0);
			State = 457; Match(RP);
			State = 458; codeBlock();
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSEIF) {
				{
				{
				State = 459; Match(ELSEIF);
				State = 460; Match(LP);
				State = 461; boolComparisons(0);
				State = 462; Match(RP);
				State = 463; codeBlock();
				}
				}
				State = 469;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 470; Match(ELSE);
				State = 471; codeBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolComparisonsContext : ParserRuleContext {
		public BoolComparisonsContext left;
		public BoolComparisonsContext right;
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public BoolComparisonsContext[] boolComparisons() {
			return GetRuleContexts<BoolComparisonsContext>();
		}
		public BoolComparisonsContext boolComparisons(int i) {
			return GetRuleContext<BoolComparisonsContext>(i);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode NOT() { return GetToken(GiraphParser.NOT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BOOLOPERATOR() { return GetToken(GiraphParser.BOOLOPERATOR, 0); }
		public AndOrContext andOr() {
			return GetRuleContext<AndOrContext>(0);
		}
		public ITerminalNode ISEMPTY() { return GetToken(GiraphParser.ISEMPTY, 0); }
		public BoolComparisonsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolComparisons; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolComparisons(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolComparisonsContext boolComparisons() {
		return boolComparisons(0);
	}

	private BoolComparisonsContext boolComparisons(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolComparisonsContext _localctx = new BoolComparisonsContext(Context, _parentState);
		BoolComparisonsContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_boolComparisons, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				{
				State = 475; Match(LP);
				State = 476; boolComparisons(0);
				State = 477; Match(RP);
				}
				break;
			case NOT:
				{
				State = 479; Match(NOT);
				State = 480; boolComparisons(4);
				}
				break;
			case SINGLEQUOTE:
			case SELECT:
			case SELECTALL:
			case POP:
			case DEQUEUE:
			case EXTRACTMIN:
			case EXTRACTMAX:
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				{
				State = 481; expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 492;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						_localctx = new BoolComparisonsContext(_parentctx, _parentState);
						_localctx.left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boolComparisons);
						State = 484;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 487;
						ErrorHandler.Sync(this);
						switch (TokenStream.LA(1)) {
						case BOOLOPERATOR:
							{
							State = 485; Match(BOOLOPERATOR);
							}
							break;
						case AND:
						case OR:
							{
							State = 486; andOr();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 489; _localctx.right = boolComparisons(3);
						}
						break;
					case 2:
						{
						_localctx = new BoolComparisonsContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_boolComparisons);
						State = 490;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 491; Match(ISEMPTY);
						}
						break;
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ITerminalNode PREDICATE() { return GetToken(GiraphParser.PREDICATE, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public FormalParamsContext formalParams() {
			return GetRuleContext<FormalParamsContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ITerminalNode LCB() { return GetToken(GiraphParser.LCB, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public ITerminalNode RCB() { return GetToken(GiraphParser.RCB, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 80, RULE_predicate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(PREDICATE);
			State = 498; variable();
			State = 499; Match(LP);
			State = 500; formalParams();
			State = 501; Match(RP);
			State = 502; Match(COLON);
			State = 503; Match(LCB);
			State = 504; boolComparisons(0);
			State = 505; Match(RCB);
			{
			State = 506; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateCallContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public PredicateCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateCall; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicateCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateCallContext predicateCall() {
		PredicateCallContext _localctx = new PredicateCallContext(Context, State);
		EnterRule(_localctx, 82, RULE_predicateCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 508; variable();
			{
			State = 509; Match(LP);
			}
			State = 510; parameters();
			{
			State = 511; Match(RP);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(GiraphParser.WHERE, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public WhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhereContext where() {
		WhereContext _localctx = new WhereContext(Context, State);
		EnterRule(_localctx, 84, RULE_where);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 513; Match(WHERE);
				State = 514; Match(LP);
				State = 515; boolComparisons(0);
				State = 516; Match(RP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 518; Match(WHERE);
				State = 519; boolComparisons(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndOrContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(GiraphParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(GiraphParser.OR, 0); }
		public AndOrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andOr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndOrContext andOr() {
		AndOrContext _localctx = new AndOrContext(Context, State);
		EnterRule(_localctx, 86, RULE_andOr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendContext : ParserRuleContext {
		public ITerminalNode EXTEND() { return GetToken(GiraphParser.EXTEND, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ExtendContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extend; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtend(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendContext extend() {
		ExtendContext _localctx = new ExtendContext(Context, State);
		EnterRule(_localctx, 88, RULE_extend);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 524; Match(EXTEND);
			State = 525; objects();
			State = 526; Match(TYPE);
			{
			State = 527; Match(SINGLEQUOTE);
			}
			State = 528; variable();
			{
			State = 529; Match(SINGLEQUOTE);
			}
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 530; Match(COLON);
				{
				State = 531; Match(SINGLEQUOTE);
				}
				State = 533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 532; variable();
					}
					}
					State = 535;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==VARIABLENAME );
				{
				State = 537; Match(SINGLEQUOTE);
				}
				}
			}

			State = 543;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUALS) {
				{
				State = 541; Match(EQUALS);
				State = 542; constant();
				}
			}

			{
			State = 545; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(GiraphParser.SELECT, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableFuncContext variableFunc() {
			return GetRuleContext<VariableFuncContext>(0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 90, RULE_select);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 547; Match(SELECT);
			State = 548; allTypeWithColl();
			State = 549; Match(FROM);
			State = 550; variableFunc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAllContext : ParserRuleContext {
		public ITerminalNode SELECTALL() { return GetToken(GiraphParser.SELECTALL, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableFuncContext variableFunc() {
			return GetRuleContext<VariableFuncContext>(0);
		}
		public SelectAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAll; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectAll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectAllContext selectAll() {
		SelectAllContext _localctx = new SelectAllContext(Context, State);
		EnterRule(_localctx, 92, RULE_selectAll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 552; Match(SELECTALL);
			State = 553; allTypeWithColl();
			State = 554; Match(FROM);
			State = 555; variableFunc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddQueryContext : ParserRuleContext {
		public AddToGraphContext addToGraph() {
			return GetRuleContext<AddToGraphContext>(0);
		}
		public AddToCollContext addToColl() {
			return GetRuleContext<AddToCollContext>(0);
		}
		public AddQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddQueryContext addQuery() {
		AddQueryContext _localctx = new AddQueryContext(Context, State);
		EnterRule(_localctx, 94, RULE_addQuery);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557; addToGraph();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 558; addToColl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToGraphContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public VertexDclsContext vertexDcls() {
			return GetRuleContext<VertexDclsContext>(0);
		}
		public EdgeDclsContext edgeDcls() {
			return GetRuleContext<EdgeDclsContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public AddToGraphContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToGraph; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToGraph(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToGraphContext addToGraph() {
		AddToGraphContext _localctx = new AddToGraphContext(Context, State);
		EnterRule(_localctx, 96, RULE_addToGraph);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(ADD);
			State = 564;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VERTEXOBJ:
				{
				State = 562; vertexDcls();
				}
				break;
			case EDGEOBJ:
				{
				State = 563; edgeDcls();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 566; Match(TO);
			State = 567; variable();
			{
			State = 569;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 568; where();
				}
			}

			}
			{
			State = 571; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddToCollContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(GiraphParser.ADD, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public AddToCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addToColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddToColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddToCollContext addToColl() {
		AddToCollContext _localctx = new AddToCollContext(Context, State);
		EnterRule(_localctx, 98, RULE_addToColl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 573; Match(ADD);
			State = 574; variable();
			State = 575; Match(TO);
			State = 576; variable();
			{
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 577; where();
				}
			}

			}
			{
			State = 580; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopDclContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(GiraphParser.FOR, 0); }
		public ForConditionContext forCondition() {
			return GetRuleContext<ForConditionContext>(0);
		}
		public CodeBlockContext codeBlock() {
			return GetRuleContext<CodeBlockContext>(0);
		}
		public ITerminalNode DO() { return GetToken(GiraphParser.DO, 0); }
		public ITerminalNode WHILE() { return GetToken(GiraphParser.WHILE, 0); }
		public BoolComparisonsContext boolComparisons() {
			return GetRuleContext<BoolComparisonsContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(GiraphParser.FOREACH, 0); }
		public ForeachConditionContext foreachCondition() {
			return GetRuleContext<ForeachConditionContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public LoopDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoopDclContext loopDcl() {
		LoopDclContext _localctx = new LoopDclContext(Context, State);
		EnterRule(_localctx, 100, RULE_loopDcl);
		int _la;
		try {
			State = 602;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 582; Match(FOR);
				State = 583; forCondition();
				State = 584; codeBlock();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 586; Match(DO);
				State = 587; codeBlock();
				State = 588; Match(WHILE);
				State = 589; boolComparisons(0);
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 591; Match(WHILE);
				State = 592; boolComparisons(0);
				State = 593; codeBlock();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 595; Match(FOREACH);
				State = 596; foreachCondition();
				State = 598;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 597; where();
					}
				}

				State = 600; codeBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public InlineDclContext inlineDcl() {
			return GetRuleContext<InlineDclContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(GiraphParser.COLON, 0); }
		public ForConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForConditionContext forCondition() {
		ForConditionContext _localctx = new ForConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_forCondition);
		int _la;
		try {
			State = 645;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 604; Match(LP);
				State = 606;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
				case 1:
					{
					State = 605; inlineDcl();
					}
					break;
				}
				State = 610;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
				case 1:
					{
					State = 608; varOrConst();
					}
					break;
				case 2:
					{
					State = 609; assignment();
					}
					break;
				}
				State = 612; Match(TO);
				State = 615;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 613; varOrConst();
					}
					break;
				case 2:
					{
					State = 614; assignment();
					}
					break;
				}
				State = 622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 617; Match(COLON);
					State = 620;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						State = 618; varOrConst();
						}
						break;
					case 2:
						{
						State = 619; assignment();
						}
						break;
					}
					}
				}

				State = 624; Match(RP);
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
			case COLLECTION:
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 627;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 626; inlineDcl();
					}
					break;
				}
				State = 631;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 629; varOrConst();
					}
					break;
				case 2:
					{
					State = 630; assignment();
					}
					break;
				}
				State = 633; Match(TO);
				State = 636;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 634; varOrConst();
					}
					break;
				case 2:
					{
					State = 635; assignment();
					}
					break;
				}
				State = 643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 638; Match(COLON);
					State = 641;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
					case 1:
						{
						State = 639; varOrConst();
						}
						break;
					case 2:
						{
						State = 640; assignment();
						}
						break;
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineDclContext : ParserRuleContext {
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode VARIABLENAME() { return GetToken(GiraphParser.VARIABLENAME, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public InlineDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InlineDclContext inlineDcl() {
		InlineDclContext _localctx = new InlineDclContext(Context, State);
		EnterRule(_localctx, 104, RULE_inlineDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647; allTypeWithColl();
			State = 648; Match(VARIABLENAME);
			State = 649; Match(EQUALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachConditionContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public VariableFuncContext variableFunc() {
			return GetRuleContext<VariableFuncContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ForeachConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreachCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachConditionContext foreachCondition() {
		ForeachConditionContext _localctx = new ForeachConditionContext(Context, State);
		EnterRule(_localctx, 106, RULE_foreachCondition);
		try {
			State = 663;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				EnterOuterAlt(_localctx, 1);
				{
				State = 651; Match(LP);
				State = 652; allType();
				State = 653; variable();
				State = 654; Match(IN);
				State = 655; variableFunc();
				State = 656; Match(RP);
				}
				break;
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 658; allType();
				State = 659; variable();
				State = 660; Match(IN);
				State = 661; variableFunc();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GiraphParser.TYPE, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public AllTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allType; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeContext allType() {
		AllTypeContext _localctx = new AllTypeContext(Context, State);
		EnterRule(_localctx, 108, RULE_allType);
		try {
			State = 667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 665; Match(TYPE);
				}
				break;
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 2);
				{
				State = 666; objects();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllTypeWithCollContext : ParserRuleContext {
		public AllTypeContext allType() {
			return GetRuleContext<AllTypeContext>(0);
		}
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeWithCollContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allTypeWithColl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAllTypeWithColl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AllTypeWithCollContext allTypeWithColl() {
		AllTypeWithCollContext _localctx = new AllTypeWithCollContext(Context, State);
		EnterRule(_localctx, 110, RULE_allTypeWithColl);
		try {
			State = 672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
			case GRAPHOBJ:
			case VERTEXOBJ:
			case EDGEOBJ:
				EnterOuterAlt(_localctx, 1);
				{
				State = 669; allType();
				}
				break;
			case COLLECTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 670; Match(COLLECTION);
				State = 671; allType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionDclContext : ParserRuleContext {
		public ITerminalNode COLLECTION() { return GetToken(GiraphParser.COLLECTION, 0); }
		public AllTypeWithCollContext allTypeWithColl() {
			return GetRuleContext<AllTypeWithCollContext>(0);
		}
		public ITerminalNode VARIABLENAME() { return GetToken(GiraphParser.VARIABLENAME, 0); }
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public CollectionDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionDcl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollectionDcl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollectionDclContext collectionDcl() {
		CollectionDclContext _localctx = new CollectionDclContext(Context, State);
		EnterRule(_localctx, 112, RULE_collectionDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 674; Match(COLLECTION);
			State = 675; allTypeWithColl();
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 676; Match(VARIABLENAME);
				}
				break;
			case 2:
				{
				State = 677; assignment();
				}
				break;
			}
			{
			State = 680; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetQueryContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(GiraphParser.SET, 0); }
		public SetExpressionContext[] setExpression() {
			return GetRuleContexts<SetExpressionContext>();
		}
		public SetExpressionContext setExpression(int i) {
			return GetRuleContext<SetExpressionContext>(i);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(GiraphParser.IN, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public SetQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setQuery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetQueryContext setQuery() {
		SetQueryContext _localctx = new SetQueryContext(Context, State);
		EnterRule(_localctx, 114, RULE_setQuery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(SET);
			State = 683; setExpression();
			State = 688;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 684; Match(COMMA);
				State = 685; setExpression();
				}
				}
				State = 690;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 691; Match(IN);
				State = 692; variable();
				}
			}

			State = 696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 695; where();
				}
			}

			{
			State = 698; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExpressionContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ExpressionExtensionContext[] expressionExtension() {
			return GetRuleContexts<ExpressionExtensionContext>();
		}
		public ExpressionExtensionContext expressionExtension(int i) {
			return GetRuleContext<ExpressionExtensionContext>(i);
		}
		public SetExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetExpressionContext setExpression() {
		SetExpressionContext _localctx = new SetExpressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_setExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 702;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLENAME:
				{
				State = 700; variable();
				}
				break;
			case SINGLEQUOTE:
				{
				State = 701; attribute();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			State = 704; compoundAssign();
			}
			State = 722;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LP:
				{
				{
				State = 705; Match(LP);
				State = 706; varOrConst();
				State = 710;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 707; expressionExtension();
					}
					}
					State = 712;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 713; Match(RP);
				}
				}
				break;
			case INF:
			case BOOL:
			case INTEGER:
			case FLOATNUM:
			case VARIABLENAME:
			case STRING:
				{
				{
				State = 715; varOrConst();
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PLUS) | (1L << MINUS) | (1L << DIVIDE) | (1L << MULT) | (1L << MODULO))) != 0)) {
					{
					{
					State = 716; expressionExtension();
					}
					}
					State = 721;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ITerminalNode PLUS() { return GetToken(GiraphParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public ITerminalNode MULT() { return GetToken(GiraphParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GiraphParser.DIVIDE, 0); }
		public CompoundAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssign; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignContext compoundAssign() {
		CompoundAssignContext _localctx = new CompoundAssignContext(Context, State);
		EnterRule(_localctx, 118, RULE_compoundAssign);
		try {
			State = 733;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EQUALS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724; Match(EQUALS);
				}
				break;
			case PLUS:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 725; Match(PLUS);
				}
				{
				State = 726; Match(EQUALS);
				}
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 727; Match(MINUS);
				}
				{
				State = 728; Match(EQUALS);
				}
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 4);
				{
				{
				State = 729; Match(MULT);
				}
				{
				State = 730; Match(EQUALS);
				}
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 5);
				{
				{
				State = 731; Match(DIVIDE);
				}
				{
				State = 732; Match(EQUALS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode[] SINGLEQUOTE() { return GetTokens(GiraphParser.SINGLEQUOTE); }
		public ITerminalNode SINGLEQUOTE(int i) {
			return GetToken(GiraphParser.SINGLEQUOTE, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 120, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 735; Match(SINGLEQUOTE);
			}
			State = 736; variable();
			{
			State = 737; Match(SINGLEQUOTE);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetOneAttriContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public CompoundAssignContext compoundAssign() {
			return GetRuleContext<CompoundAssignContext>(0);
		}
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public SetOneAttriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setOneAttri; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetOneAttri(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetOneAttriContext setOneAttri() {
		SetOneAttriContext _localctx = new SetOneAttriContext(Context, State);
		EnterRule(_localctx, 122, RULE_setOneAttri);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 739; attribute();
			{
			State = 740; compoundAssign();
			}
			{
			State = 741; varOrConst();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollNoReturnOpsContext : ParserRuleContext {
		public EnqueueOPContext enqueueOP() {
			return GetRuleContext<EnqueueOPContext>(0);
		}
		public PushOPContext pushOP() {
			return GetRuleContext<PushOPContext>(0);
		}
		public CollNoReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collNoReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollNoReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollNoReturnOpsContext collNoReturnOps() {
		CollNoReturnOpsContext _localctx = new CollNoReturnOpsContext(Context, State);
		EnterRule(_localctx, 124, RULE_collNoReturnOps);
		try {
			State = 745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 743; enqueueOP();
				}
				break;
			case PUSH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 744; pushOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollReturnOpsContext : ParserRuleContext {
		public DequeueOPContext dequeueOP() {
			return GetRuleContext<DequeueOPContext>(0);
		}
		public PopOPContext popOP() {
			return GetRuleContext<PopOPContext>(0);
		}
		public ExtractMinOPContext extractMinOP() {
			return GetRuleContext<ExtractMinOPContext>(0);
		}
		public ExtractMaxOPContext extractMaxOP() {
			return GetRuleContext<ExtractMaxOPContext>(0);
		}
		public CollReturnOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collReturnOps; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollReturnOps(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CollReturnOpsContext collReturnOps() {
		CollReturnOpsContext _localctx = new CollReturnOpsContext(Context, State);
		EnterRule(_localctx, 126, RULE_collReturnOps);
		try {
			State = 751;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DEQUEUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 747; dequeueOP();
				}
				break;
			case POP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 748; popOP();
				}
				break;
			case EXTRACTMIN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 749; extractMinOP();
				}
				break;
			case EXTRACTMAX:
				EnterOuterAlt(_localctx, 4);
				{
				State = 750; extractMaxOP();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnqueueOPContext : ParserRuleContext {
		public ITerminalNode ENQUEUE() { return GetToken(GiraphParser.ENQUEUE, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public EnqueueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enqueueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnqueueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnqueueOPContext enqueueOP() {
		EnqueueOPContext _localctx = new EnqueueOPContext(Context, State);
		EnterRule(_localctx, 128, RULE_enqueueOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 753; Match(ENQUEUE);
			State = 754; variable();
			State = 755; Match(TO);
			State = 756; variable();
			State = 758;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 757; where();
				}
			}

			{
			State = 760; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public DequeueOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPContext dequeueOP() {
		DequeueOPContext _localctx = new DequeueOPContext(Context, State);
		EnterRule(_localctx, 130, RULE_dequeueOP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 762; Match(DEQUEUE);
			State = 763; Match(FROM);
			State = 764; variable();
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				{
				State = 765; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PopOPContext : ParserRuleContext {
		public ITerminalNode POP() { return GetToken(GiraphParser.POP, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public PopOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_popOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPopOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PopOPContext popOP() {
		PopOPContext _localctx = new PopOPContext(Context, State);
		EnterRule(_localctx, 132, RULE_popOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 768; Match(POP);
			State = 769; Match(FROM);
			State = 770; variable();
			State = 772;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 771; where();
				}
			}

			{
			State = 774; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PushOPContext : ParserRuleContext {
		public ITerminalNode PUSH() { return GetToken(GiraphParser.PUSH, 0); }
		public VariableContext[] variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode TO() { return GetToken(GiraphParser.TO, 0); }
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public PushOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pushOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPushOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PushOPContext pushOP() {
		PushOPContext _localctx = new PushOPContext(Context, State);
		EnterRule(_localctx, 134, RULE_pushOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 776; Match(PUSH);
			State = 777; variable();
			State = 778; Match(TO);
			State = 779; variable();
			State = 781;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 780; where();
				}
			}

			{
			State = 783; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMinOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMIN() { return GetToken(GiraphParser.EXTRACTMIN, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMinOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMinOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMinOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMinOPContext extractMinOP() {
		ExtractMinOPContext _localctx = new ExtractMinOPContext(Context, State);
		EnterRule(_localctx, 136, RULE_extractMinOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 785; Match(EXTRACTMIN);
			State = 787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 786; attribute();
				}
			}

			State = 789; Match(FROM);
			State = 790; variable();
			State = 792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				{
				State = 791; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtractMaxOPContext : ParserRuleContext {
		public ITerminalNode EXTRACTMAX() { return GetToken(GiraphParser.EXTRACTMAX, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public ExtractMaxOPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extractMaxOP; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtractMaxOP(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtractMaxOPContext extractMaxOP() {
		ExtractMaxOPContext _localctx = new ExtractMaxOPContext(Context, State);
		EnterRule(_localctx, 138, RULE_extractMaxOP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 794; Match(EXTRACTMAX);
			State = 796;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SINGLEQUOTE) {
				{
				State = 795; attribute();
				}
			}

			State = 798; Match(FROM);
			State = 799; variable();
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 800; where();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualCompContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(GiraphParser.PLUS, 0); }
		public ITerminalNode EQUALS() { return GetToken(GiraphParser.EQUALS, 0); }
		public ITerminalNode MINUS() { return GetToken(GiraphParser.MINUS, 0); }
		public ITerminalNode MULT() { return GetToken(GiraphParser.MULT, 0); }
		public ITerminalNode DIVIDE() { return GetToken(GiraphParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(GiraphParser.MODULO, 0); }
		public EqualCompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalComp; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualComp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EqualCompContext equalComp() {
		EqualCompContext _localctx = new EqualCompContext(Context, State);
		EnterRule(_localctx, 140, RULE_equalComp);
		try {
			State = 813;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803; Match(PLUS);
				{
				State = 804; Match(EQUALS);
				}
				}
				break;
			case MINUS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 805; Match(MINUS);
				{
				State = 806; Match(EQUALS);
				}
				}
				break;
			case MULT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; Match(MULT);
				{
				State = 808; Match(EQUALS);
				}
				}
				break;
			case DIVIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 809; Match(DIVIDE);
				{
				State = 810; Match(EQUALS);
				}
				}
				break;
			case MODULO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 811; Match(MODULO);
				{
				State = 812; Match(EQUALS);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public VarOrConstContext[] varOrConst() {
			return GetRuleContexts<VarOrConstContext>();
		}
		public VarOrConstContext varOrConst(int i) {
			return GetRuleContext<VarOrConstContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 142, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 815; varOrConst();
			State = 820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 816; Match(COMMA);
				State = 817; varOrConst();
				}
				}
				State = 822;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintOptionsContext : ParserRuleContext {
		public PrintOptionContext[] printOption() {
			return GetRuleContexts<PrintOptionContext>();
		}
		public PrintOptionContext printOption(int i) {
			return GetRuleContext<PrintOptionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(GiraphParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(GiraphParser.COMMA, i);
		}
		public PrintOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printOptions; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintOptionsContext printOptions() {
		PrintOptionsContext _localctx = new PrintOptionsContext(Context, State);
		EnterRule(_localctx, 144, RULE_printOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823; printOption();
			State = 828;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				{
				State = 824; Match(COMMA);
				}
				State = 825; printOption();
				}
				}
				State = 830;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintOptionContext : ParserRuleContext {
		public ITerminalNode VARIABLENAME() { return GetToken(GiraphParser.VARIABLENAME, 0); }
		public ITerminalNode LP() { return GetToken(GiraphParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(GiraphParser.RP, 0); }
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public VarOrConstContext varOrConst() {
			return GetRuleContext<VarOrConstContext>(0);
		}
		public ReturnQueryContext returnQuery() {
			return GetRuleContext<ReturnQueryContext>(0);
		}
		public RunFunctionContext runFunction() {
			return GetRuleContext<RunFunctionContext>(0);
		}
		public DotFunctionContext dotFunction() {
			return GetRuleContext<DotFunctionContext>(0);
		}
		public PrintOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printOption; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintOptionContext printOption() {
		PrintOptionContext _localctx = new PrintOptionContext(Context, State);
		EnterRule(_localctx, 146, RULE_printOption);
		int _la;
		try {
			State = 843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; Match(VARIABLENAME);
				State = 837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LP) {
					{
					State = 832; Match(LP);
					State = 834;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (((((_la - 61)) & ~0x3f) == 0 && ((1L << (_la - 61)) & ((1L << (INF - 61)) | (1L << (BOOL - 61)) | (1L << (INTEGER - 61)) | (1L << (FLOATNUM - 61)) | (1L << (VARIABLENAME - 61)) | (1L << (STRING - 61)))) != 0)) {
						{
						State = 833; parameters();
						}
					}

					State = 836; Match(RP);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 839; varOrConst();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 840; returnQuery();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 841; runFunction();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 842; dotFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(GiraphParser.PRINT, 0); }
		public PrintOptionsContext printOptions() {
			return GetRuleContext<PrintOptionsContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 148, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845; Match(PRINT);
			State = 846; printOptions();
			{
			State = 847; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DequeueOPOneLineContext : ParserRuleContext {
		public ITerminalNode DEQUEUE() { return GetToken(GiraphParser.DEQUEUE, 0); }
		public ITerminalNode FROM() { return GetToken(GiraphParser.FROM, 0); }
		public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		public ITerminalNode SC() { return GetToken(GiraphParser.SC, 0); }
		public WhereContext where() {
			return GetRuleContext<WhereContext>(0);
		}
		public DequeueOPOneLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dequeueOPOneLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDequeueOPOneLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DequeueOPOneLineContext dequeueOPOneLine() {
		DequeueOPOneLineContext _localctx = new DequeueOPOneLineContext(Context, State);
		EnterRule(_localctx, 150, RULE_dequeueOPOneLine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 849; Match(DEQUEUE);
			State = 850; Match(FROM);
			State = 851; variable();
			State = 853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 852; where();
				}
			}

			{
			State = 855; Match(SC);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentLineContext : ParserRuleContext {
		public ITerminalNode[] DIVIDE() { return GetTokens(GiraphParser.DIVIDE); }
		public ITerminalNode DIVIDE(int i) {
			return GetToken(GiraphParser.DIVIDE, i);
		}
		public ITerminalNode STRING() { return GetToken(GiraphParser.STRING, 0); }
		public CommentLineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentLine; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentLineContext commentLine() {
		CommentLineContext _localctx = new CommentLineContext(Context, State);
		EnterRule(_localctx, 152, RULE_commentLine);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 857; Match(DIVIDE);
			{
			State = 858; Match(DIVIDE);
			}
			State = 859; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentsContext : ParserRuleContext {
		public CommentLineContext commentLine() {
			return GetRuleContext<CommentLineContext>(0);
		}
		public CommentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGiraphParserVisitor<TResult> typedVisitor = visitor as IGiraphParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentsContext comments() {
		CommentsContext _localctx = new CommentsContext(Context, State);
		EnterRule(_localctx, 154, RULE_comments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861; commentLine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 39: return boolComparisons_sempred((BoolComparisonsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolComparisons_sempred(BoolComparisonsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'O', '\x362', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x3', '\x2', '\x6', '\x2', '\xA0', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\xA1', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\xAB', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\xB0', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xB6', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xBB', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xC1', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\xD1', 
		'\n', '\b', '\f', '\b', '\xE', '\b', '\xD4', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', 
		'\t', '\xDC', '\n', '\t', '\f', '\t', '\xE', '\t', '\xDF', '\v', '\t', 
		'\x3', '\n', '\x5', '\n', '\xE2', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\xE8', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xEB', '\v', '\n', '\x5', '\n', '\xED', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\a', '\v', '\xF5', '\n', '\v', '\f', '\v', '\xE', '\v', '\xF8', '\v', 
		'\v', '\x3', '\f', '\x5', '\f', '\xFB', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x103', '\n', '\f', '\f', '\f', '\xE', '\f', '\x106', '\v', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x110', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x117', 
		'\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x11D', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x121', 
		'\n', '\xE', '\x3', '\xE', '\a', '\xE', '\x124', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\x127', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x5', '\xE', '\x12D', '\n', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\x134', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x138', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x13C', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x140', '\n', '\x12', 
		'\x5', '\x12', '\x142', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x146', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', 
		'\x14F', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x152', '\v', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x15C', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\a', '\x19', '\x163', '\n', '\x19', '\f', '\x19', '\xE', '\x19', 
		'\x166', '\v', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x174', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x17D', '\n', 
		'\x1B', '\f', '\x1B', '\xE', '\x1B', '\x180', '\v', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x184', '\n', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x193', '\n', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\x197', '\n', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x19B', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x1A0', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x1A3', '\v', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x1A7', 
		'\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\a', '!', '\x1AF', '\n', '!', '\f', '!', '\xE', '!', '\x1B2', 
		'\v', '!', '\x5', '!', '\x1B4', '\n', '!', '\x3', '!', '\x3', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x1BD', '\n', '\"', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1D4', 
		'\n', '(', '\f', '(', '\xE', '(', '\x1D7', '\v', '(', '\x3', '(', '\x3', 
		'(', '\x5', '(', '\x1DB', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x1E5', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x1EA', 
		'\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', ')', '\x1EF', '\n', 
		')', '\f', ')', '\xE', ')', '\x1F2', '\v', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x20B', '\n', ',', '\x3', 
		'-', '\x3', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x6', '.', '\x218', 
		'\n', '.', '\r', '.', '\xE', '.', '\x219', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x21E', '\n', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x222', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x232', 
		'\n', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x237', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', 
		'\x32', '\x23C', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x245', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', 
		'\x34', '\x259', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x25D', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x261', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x265', '\n', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x26A', 
		'\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', 
		'\x26F', '\n', '\x35', '\x5', '\x35', '\x271', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x276', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x27A', '\n', '\x35', '\x3', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x27F', '\n', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x284', '\n', '\x35', 
		'\x5', '\x35', '\x286', '\n', '\x35', '\x5', '\x35', '\x288', '\n', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', 
		'\x3', '\x37', '\x5', '\x37', '\x29A', '\n', '\x37', '\x3', '\x38', '\x3', 
		'\x38', '\x5', '\x38', '\x29E', '\n', '\x38', '\x3', '\x39', '\x3', '\x39', 
		'\x3', '\x39', '\x5', '\x39', '\x2A3', '\n', '\x39', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x5', ':', '\x2A9', '\n', ':', '\x3', ':', 
		'\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', 
		'\x2B1', '\n', ';', '\f', ';', '\xE', ';', '\x2B4', '\v', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x2B8', '\n', ';', '\x3', ';', '\x5', ';', 
		'\x2BB', '\n', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x2C1', '\n', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\a', '<', '\x2C7', '\n', '<', '\f', '<', '\xE', '<', '\x2CA', '\v', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x2D0', '\n', 
		'<', '\f', '<', '\xE', '<', '\x2D3', '\v', '<', '\x5', '<', '\x2D5', '\n', 
		'<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x5', '=', '\x2E0', '\n', '=', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x5', '@', '\x2EC', '\n', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x5', 
		'\x41', '\x2F2', '\n', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x2F9', '\n', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x5', '\x43', '\x301', '\n', '\x43', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x307', '\n', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x310', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x316', '\n', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x31B', 
		'\n', '\x46', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x31F', '\n', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x324', '\n', 'G', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x330', '\n', 'H', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', '\x335', '\n', 'I', '\f', 
		'I', '\xE', 'I', '\x338', '\v', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', 
		'\a', 'J', '\x33D', '\n', 'J', '\f', 'J', '\xE', 'J', '\x340', '\v', 'J', 
		'\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x345', '\n', 'K', '\x3', 
		'K', '\x5', 'K', '\x348', '\n', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', 
		'\x3', 'K', '\x5', 'K', '\x34E', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 
		'M', '\x358', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', 
		'\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x2', '\x3', 
		'P', 'P', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x2', '\x6', '\x3', '\x2', '\n', '\v', '\x3', '\x2', '\f', '\xE', 
		'\x3', '\x2', '\x5', '\a', '\x3', '\x2', '\x10', '\x11', '\x2', '\x398', 
		'\x2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x4', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xAF', '\x3', '\x2', '\x2', '\x2', '\b', '\xBA', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xE', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x12', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x18', '\x11C', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x133', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x137', '\x3', '\x2', '\x2', '\x2', '\"', '\x141', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x145', '\x3', '\x2', '\x2', '\x2', '&', '\x147', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x14B', '\x3', '\x2', '\x2', '\x2', ',', '\x153', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x156', '\x3', '\x2', '\x2', '\x2', '\x30', '\x160', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x175', '\x3', '\x2', '\x2', '\x2', '\x36', '\x192', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x196', '\x3', '\x2', '\x2', '\x2', ':', '\x19A', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1A4', '\x3', '\x2', '\x2', '\x2', '@', '\x1A8', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1C2', '\x3', '\x2', '\x2', '\x2', 'J', '\x1C4', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1C6', '\x3', '\x2', '\x2', '\x2', 'N', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1E4', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1F3', '\x3', '\x2', '\x2', '\x2', 'T', '\x1FE', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x20A', '\x3', '\x2', '\x2', '\x2', 'X', '\x20C', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x20E', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x225', '\x3', '\x2', '\x2', '\x2', '^', '\x22A', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x231', '\x3', '\x2', '\x2', '\x2', '\x62', '\x233', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x25C', '\x3', '\x2', '\x2', '\x2', 'h', '\x287', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x289', '\x3', '\x2', '\x2', '\x2', 'l', '\x299', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x29D', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x2A2', '\x3', '\x2', '\x2', '\x2', 'r', '\x2A4', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x2AC', '\x3', '\x2', '\x2', '\x2', 'v', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x2DF', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x2E1', '\x3', '\x2', '\x2', '\x2', '|', '\x2E5', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x80', '\x2F1', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x2F3', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x2FC', '\x3', '\x2', '\x2', '\x2', '\x86', '\x302', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x313', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x31C', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x90', '\x331', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x339', '\x3', '\x2', '\x2', '\x2', '\x94', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x34F', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x353', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x35B', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', 
		'\x5', '\x4', '\x3', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x2', '\x2', '\x3', 
		'\xA4', '\x3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xAB', '\x5', '.', 
		'\x18', '\x2', '\xA6', '\xAB', '\x5', '\x6', '\x4', '\x2', '\xA7', '\xAB', 
		'\x5', 'Z', '.', '\x2', '\xA8', '\xAB', '\x5', '\x1E', '\x10', '\x2', 
		'\xA9', '\xAB', '\x5', '\x9C', 'O', '\x2', '\xAA', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xB0', '\x5', '\b', '\x5', '\x2', '\xAD', '\xB0', 
		'\x5', 'r', ':', '\x2', '\xAE', '\xB0', '\x5', '\n', '\x6', '\x2', '\xAF', 
		'\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xB2', '\x5', 'L', '\'', '\x2', '\xB2', 
		'\xB5', '\x5', '<', '\x1F', '\x2', '\xB3', '\xB4', '\a', '\x1E', '\x2', 
		'\x2', '\xB4', '\xB6', '\x5', '\x1A', '\xE', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\a', '\x12', '\x2', 
		'\x2', '\xB8', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\x5', 
		'\f', '\a', '\x2', '\xBA', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\x4', '\x2', '\x2', '\xBD', '\xC0', '\x5', 
		'<', '\x1F', '\x2', '\xBE', '\xBF', '\a', '\x1E', '\x2', '\x2', '\xBF', 
		'\xC1', '\x5', '\x1A', '\xE', '\x2', '\xC0', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x12', '\x2', '\x2', '\xC3', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x5', '\x2', 
		'\x2', '\xC5', '\xC6', '\x5', '<', '\x1F', '\x2', '\xC6', '\xC7', '\x5', 
		'\xE', '\b', '\x2', '\xC7', '\r', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xD2', '\a', '\x18', '\x2', '\x2', '\xC9', '\xD1', '\x5', 't', ';', '\x2', 
		'\xCA', '\xCB', '\x5', '\x10', '\t', '\x2', '\xCB', '\xCC', '\a', '\x12', 
		'\x2', '\x2', '\xCC', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\x5', '\x14', '\v', '\x2', '\xCE', '\xCF', '\a', '\x12', '\x2', '\x2', 
		'\xCF', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCD', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x19', '\x2', '\x2', 
		'\xD6', '\xF', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\a', '\x6', 
		'\x2', '\x2', '\xD8', '\xDD', '\x5', '\x12', '\n', '\x2', '\xD9', '\xDA', 
		'\a', '\x13', '\x2', '\x2', '\xDA', '\xDC', '\x5', '\x12', '\n', '\x2', 
		'\xDB', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE2', '\x5', '<', 
		'\x1F', '\x2', '\xE1', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE3', '\xEC', '\a', '\x16', '\x2', '\x2', '\xE4', '\xE9', '\x5', '\x18', 
		'\r', '\x2', '\xE5', '\xE6', '\a', '\x13', '\x2', '\x2', '\xE6', '\xE8', 
		'\x5', '\x18', '\r', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', 
		'\a', '\x17', '\x2', '\x2', '\xEF', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xF1', '\a', '\a', '\x2', '\x2', '\xF1', '\xF6', '\x5', '\x16', 
		'\f', '\x2', '\xF2', '\xF3', '\a', '\x13', '\x2', '\x2', '\xF3', '\xF5', 
		'\x5', '\x16', '\f', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xFB', '\x5', '<', '\x1F', '\x2', '\xFA', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x16', '\x2', '\x2', 
		'\xFD', '\xFE', '\x5', '<', '\x1F', '\x2', '\xFE', '\xFF', '\a', '\x13', 
		'\x2', '\x2', '\xFF', '\x104', '\x5', '<', '\x1F', '\x2', '\x100', '\x101', 
		'\a', '\x13', '\x2', '\x2', '\x101', '\x103', '\x5', '\x18', '\r', '\x2', 
		'\x102', '\x100', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x104', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\a', '\x17', '\x2', '\x2', '\x108', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10A', '\x5', '<', '\x1F', '\x2', '\x10A', '\x10B', '\a', '\x1E', 
		'\x2', '\x2', '\x10B', '\x10C', '\x5', '\x1A', '\xE', '\x2', '\x10C', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10F', '\x5', '\x38', 
		'\x1D', '\x2', '\x10E', '\x110', '\x5', '$', '\x13', '\x2', '\x10F', '\x10E', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\x1E', '\x2', '\x2', '\x112', '\x113', '\x5', '\x34', '\x1B', '\x2', 
		'\x113', '\x114', '\a', '\x12', '\x2', '\x2', '\x114', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x115', '\x117', '\x5', 'n', '\x38', '\x2', '\x116', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x117', '\x118', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', 
		'\x5', '<', '\x1F', '\x2', '\x119', '\x11A', '\x5', '\x8E', 'H', '\x2', 
		'\x11A', '\x11B', '\x5', '\x1A', '\xE', '\x2', '\x11B', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x109', '\x3', '\x2', '\x2', '\x2', '\x11C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x116', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', 
		'\x5', '>', ' ', '\x2', '\x11F', '\x121', '\x5', '\x42', '\"', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x125', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x124', '\x5', '\x1C', '\xF', '\x2', '\x123', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', '\x2', '\x125', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x127', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12D', '\x5', '\"', '\x12', '\x2', '\x129', 
		'\x12D', '\x5', '\x80', '\x41', '\x2', '\x12A', '\x12D', '\x5', 'T', '+', 
		'\x2', '\x12B', '\x12D', '\x5', 'z', '>', '\x2', '\x12C', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x12C', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', '$', '\x13', '\x2', 
		'\x12F', '\x130', '\x5', '\x38', '\x1D', '\x2', '\x130', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x134', '\x5', ' ', '\x11', '\x2', '\x132', 
		'\x134', '\x5', '\"', '\x12', '\x2', '\x133', '\x131', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x132', '\x3', '\x2', '\x2', '\x2', '\x134', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\x135', '\x138', '\x5', 't', ';', '\x2', 
		'\x136', '\x138', '\x5', '`', '\x31', '\x2', '\x137', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x136', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', '\x5', '\\', '/', '\x2', 
		'\x13A', '\x13C', '\x5', 'V', ',', '\x2', '\x13B', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x13D', '\x13F', '\x5', '^', '\x30', '\x2', 
		'\x13E', '\x140', '\x5', 'V', ',', '\x2', '\x13F', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x141', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x142', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x143', '\x146', '\x5', '&', '\x14', '\x2', '\x144', '\x146', 
		'\x5', '(', '\x15', '\x2', '\x145', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x147', '\x148', '\t', '\x2', '\x2', '\x2', '\x148', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', '\t', '\x3', '\x2', '\x2', 
		'\x14A', ')', '\x3', '\x2', '\x2', '\x2', '\x14B', '\x150', '\x5', ',', 
		'\x17', '\x2', '\x14C', '\x14D', '\a', '\x13', '\x2', '\x2', '\x14D', 
		'\x14F', '\x5', ',', '\x17', '\x2', '\x14E', '\x14C', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x152', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '+', '\x3', '\x2', '\x2', '\x2', '\x152', '\x150', '\x3', '\x2', 
		'\x2', '\x2', '\x153', '\x154', '\x5', 'n', '\x38', '\x2', '\x154', '\x155', 
		'\x5', '<', '\x1F', '\x2', '\x155', '-', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x157', '\x5', '<', '\x1F', '\x2', '\x157', '\x158', '\a', '\x30', '\x2', 
		'\x2', '\x158', '\x159', '\x5', 'p', '\x39', '\x2', '\x159', '\x15B', 
		'\a', '\x16', '\x2', '\x2', '\x15A', '\x15C', '\x5', '*', '\x16', '\x2', 
		'\x15B', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '\x17', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x30', 
		'\x19', '\x2', '\x15F', '/', '\x3', '\x2', '\x2', '\x2', '\x160', '\x164', 
		'\a', '\x18', '\x2', '\x2', '\x161', '\x163', '\x5', '\x36', '\x1C', '\x2', 
		'\x162', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x166', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x162', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', '\x3', '\x2', '\x2', 
		'\x2', '\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', 
		'\a', '\x19', '\x2', '\x2', '\x168', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x169', '\x16A', '\a', '&', '\x2', '\x2', '\x16A', '\x16B', '\x5', '<', 
		'\x1F', '\x2', '\x16B', '\x16C', '\a', '\x12', '\x2', '\x2', '\x16C', 
		'\x174', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16E', '\a', '&', '\x2', 
		'\x2', '\x16E', '\x174', '\x5', '\x34', '\x1B', '\x2', '\x16F', '\x170', 
		'\a', '&', '\x2', '\x2', '\x170', '\x171', '\x5', 'P', ')', '\x2', '\x171', 
		'\x172', '\a', '\x12', '\x2', '\x2', '\x172', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x173', '\x169', '\x3', '\x2', '\x2', '\x2', '\x173', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x173', '\x16F', '\x3', '\x2', '\x2', '\x2', 
		'\x174', '\x33', '\x3', '\x2', '\x2', '\x2', '\x175', '\x176', '\a', '\x31', 
		'\x2', '\x2', '\x176', '\x183', '\x5', '<', '\x1F', '\x2', '\x177', '\x178', 
		'\a', '\x32', '\x2', '\x2', '\x178', '\x179', '\a', '\x16', '\x2', '\x2', 
		'\x179', '\x17E', '\x5', '\x38', '\x1D', '\x2', '\x17A', '\x17B', '\a', 
		'\x13', '\x2', '\x2', '\x17B', '\x17D', '\x5', '\x38', '\x1D', '\x2', 
		'\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x180', '\x3', 
		'\x2', '\x2', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x181', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', 
		'\a', '\x17', '\x2', '\x2', '\x182', '\x184', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x177', '\x3', '\x2', '\x2', '\x2', '\x183', '\x184', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x185', '\x3', '\x2', '\x2', '\x2', '\x185', 
		'\x186', '\a', '\x12', '\x2', '\x2', '\x186', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x187', '\x193', '\x5', 'N', '(', '\x2', '\x188', '\x193', '\x5', 
		'\x6', '\x4', '\x2', '\x189', '\x193', '\x5', '\x66', '\x34', '\x2', '\x18A', 
		'\x193', '\x5', 'R', '*', '\x2', '\x18B', '\x193', '\x5', '\x32', '\x1A', 
		'\x2', '\x18C', '\x193', '\x5', '\x1E', '\x10', '\x2', '\x18D', '\x193', 
		'\x5', '~', '@', '\x2', '\x18E', '\x193', '\x5', '\x98', 'M', '\x2', '\x18F', 
		'\x193', '\x5', '\x34', '\x1B', '\x2', '\x190', '\x193', '\x5', '\x96', 
		'L', '\x2', '\x191', '\x193', '\x5', '\x9C', 'O', '\x2', '\x192', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x188', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x189', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x192', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x192', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x192', '\x18F', 
		'\x3', '\x2', '\x2', '\x2', '\x192', '\x190', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x191', '\x3', '\x2', '\x2', '\x2', '\x193', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x197', '\x5', '<', '\x1F', '\x2', '\x195', 
		'\x197', '\x5', '\x42', '\"', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x195', '\x3', '\x2', '\x2', '\x2', '\x197', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x19B', '\x5', '\x42', '\"', '\x2', 
		'\x199', '\x19B', '\x5', '>', ' ', '\x2', '\x19A', '\x198', '\x3', '\x2', 
		'\x2', '\x2', '\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x19C', '\x1A1', '\a', '\x44', '\x2', '\x2', 
		'\x19D', '\x19E', '\a', '\x1C', '\x2', '\x2', '\x19E', '\x1A0', '\a', 
		'\x44', '\x2', '\x2', '\x19F', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x1A0', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A2', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A4', 
		'\x1A6', '\x5', '<', '\x1F', '\x2', '\x1A5', '\x1A7', '\x5', '@', '!', 
		'\x2', '\x1A6', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1A9', '\a', '\x1C', '\x2', '\x2', '\x1A9', '\x1AA', '\a', 
		'\b', '\x2', '\x2', '\x1AA', '\x1B3', '\a', '\x16', '\x2', '\x2', '\x1AB', 
		'\x1B0', '\x5', '\x38', '\x1D', '\x2', '\x1AC', '\x1AD', '\a', '\x13', 
		'\x2', '\x2', '\x1AD', '\x1AF', '\x5', '\x38', '\x1D', '\x2', '\x1AE', 
		'\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B2', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B0', '\x1B1', 
		'\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B4', '\x3', '\x2', '\x2', '\x2', 
		'\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1B3', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1B5', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\a', '\x17', '\x2', 
		'\x2', '\x1B6', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1BD', 
		'\x5', '\x46', '$', '\x2', '\x1B8', '\x1BD', '\x5', 'H', '%', '\x2', '\x1B9', 
		'\x1BD', '\x5', 'J', '&', '\x2', '\x1BA', '\x1BD', '\x5', '\x44', '#', 
		'\x2', '\x1BB', '\x1BD', '\a', '?', '\x2', '\x2', '\x1BC', '\x1B7', '\x3', 
		'\x2', '\x2', '\x2', '\x1BC', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\a', 'N', '\x2', '\x2', 
		'\x1BF', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C1', '\a', '\x42', 
		'\x2', '\x2', '\x1C1', 'G', '\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C3', 
		'\a', '\x43', '\x2', '\x2', '\x1C3', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x1C4', '\x1C5', '\a', '\x41', '\x2', '\x2', '\x1C5', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1C6', '\x1C7', '\t', '\x4', '\x2', '\x2', '\x1C7', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x15', '\x2', '\x2', 
		'\x1C9', '\x1CA', '\a', '\x16', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', 
		'P', ')', '\x2', '\x1CB', '\x1CC', '\a', '\x17', '\x2', '\x2', '\x1CC', 
		'\x1D5', '\x5', '\x30', '\x19', '\x2', '\x1CD', '\x1CE', '\a', ' ', '\x2', 
		'\x2', '\x1CE', '\x1CF', '\a', '\x16', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x5', 'P', ')', '\x2', '\x1D0', '\x1D1', '\a', '\x17', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\x5', '\x30', '\x19', '\x2', '\x1D2', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1DA', 
		'\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D5', '\x3', '\x2', '\x2', '\x2', 
		'\x1D8', '\x1D9', '\a', '!', '\x2', '\x2', '\x1D9', '\x1DB', '\x5', '\x30', 
		'\x19', '\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DA', 
		'\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1DC', '\x1DD', '\b', ')', '\x1', '\x2', '\x1DD', '\x1DE', '\a', 
		'\x16', '\x2', '\x2', '\x1DE', '\x1DF', '\x5', 'P', ')', '\x2', '\x1DF', 
		'\x1E0', '\a', '\x17', '\x2', '\x2', '\x1E0', '\x1E5', '\x3', '\x2', '\x2', 
		'\x2', '\x1E1', '\x1E2', '\a', '\xF', '\x2', '\x2', '\x1E2', '\x1E5', 
		'\x5', 'P', ')', '\x6', '\x1E3', '\x1E5', '\x5', '\x1A', '\xE', '\x2', 
		'\x1E4', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1E4', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E4', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E5', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1E6', '\x1E9', '\f', '\x4', '\x2', 
		'\x2', '\x1E7', '\x1EA', '\a', '\x3', '\x2', '\x2', '\x1E8', '\x1EA', 
		'\x5', 'X', '-', '\x2', '\x1E9', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1EF', '\x5', 'P', ')', '\x5', '\x1EC', 
		'\x1ED', '\f', '\x5', '\x2', '\x2', '\x1ED', '\x1EF', '\a', '\t', '\x2', 
		'\x2', '\x1EE', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '\x34', '\x2', 
		'\x2', '\x1F4', '\x1F5', '\x5', '<', '\x1F', '\x2', '\x1F5', '\x1F6', 
		'\a', '\x16', '\x2', '\x2', '\x1F6', '\x1F7', '\x5', '*', '\x16', '\x2', 
		'\x1F7', '\x1F8', '\a', '\x17', '\x2', '\x2', '\x1F8', '\x1F9', '\a', 
		'\x14', '\x2', '\x2', '\x1F9', '\x1FA', '\a', '\x18', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\x5', 'P', ')', '\x2', '\x1FB', '\x1FC', '\a', '\x19', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\a', '\x12', '\x2', '\x2', '\x1FD', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x5', '<', '\x1F', '\x2', '\x1FF', 
		'\x200', '\a', '\x16', '\x2', '\x2', '\x200', '\x201', '\x5', '\x90', 
		'I', '\x2', '\x201', '\x202', '\a', '\x17', '\x2', '\x2', '\x202', 'U', 
		'\x3', '\x2', '\x2', '\x2', '\x203', '\x204', '\a', '-', '\x2', '\x2', 
		'\x204', '\x205', '\a', '\x16', '\x2', '\x2', '\x205', '\x206', '\x5', 
		'P', ')', '\x2', '\x206', '\x207', '\a', '\x17', '\x2', '\x2', '\x207', 
		'\x20B', '\x3', '\x2', '\x2', '\x2', '\x208', '\x209', '\a', '-', '\x2', 
		'\x2', '\x209', '\x20B', '\x5', 'P', ')', '\x2', '\x20A', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x20A', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20B', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\t', '\x5', '\x2', 
		'\x2', '\x20D', 'Y', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', '\a', 
		'\x33', '\x2', '\x2', '\x20F', '\x210', '\x5', 'L', '\'', '\x2', '\x210', 
		'\x211', '\a', '\x4', '\x2', '\x2', '\x211', '\x212', '\a', '\x1D', '\x2', 
		'\x2', '\x212', '\x213', '\x5', '<', '\x1F', '\x2', '\x213', '\x21D', 
		'\a', '\x1D', '\x2', '\x2', '\x214', '\x215', '\a', '\x14', '\x2', '\x2', 
		'\x215', '\x217', '\a', '\x1D', '\x2', '\x2', '\x216', '\x218', '\x5', 
		'<', '\x1F', '\x2', '\x217', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x219', '\x3', '\x2', '\x2', '\x2', '\x219', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21A', '\x21B', 
		'\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', '\x1D', '\x2', '\x2', 
		'\x21C', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x221', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\a', '\x1E', '\x2', 
		'\x2', '\x220', '\x222', '\x5', '\x42', '\"', '\x2', '\x221', '\x21F', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', '\x224', '\a', 
		'\x12', '\x2', '\x2', '\x224', '[', '\x3', '\x2', '\x2', '\x2', '\x225', 
		'\x226', '\a', '*', '\x2', '\x2', '\x226', '\x227', '\x5', 'p', '\x39', 
		'\x2', '\x227', '\x228', '\a', ',', '\x2', '\x2', '\x228', '\x229', '\x5', 
		'>', ' ', '\x2', '\x229', ']', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x22B', 
		'\a', '+', '\x2', '\x2', '\x22B', '\x22C', '\x5', 'p', '\x39', '\x2', 
		'\x22C', '\x22D', '\a', ',', '\x2', '\x2', '\x22D', '\x22E', '\x5', '>', 
		' ', '\x2', '\x22E', '_', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x232', 
		'\x5', '\x62', '\x32', '\x2', '\x230', '\x232', '\x5', '\x64', '\x33', 
		'\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x231', '\x230', 
		'\x3', '\x2', '\x2', '\x2', '\x232', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x233', '\x236', '\a', '.', '\x2', '\x2', '\x234', '\x237', '\x5', '\x10', 
		'\t', '\x2', '\x235', '\x237', '\x5', '\x14', '\v', '\x2', '\x236', '\x234', 
		'\x3', '\x2', '\x2', '\x2', '\x236', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x239', '\a', 
		'\"', '\x2', '\x2', '\x239', '\x23B', '\x5', '<', '\x1F', '\x2', '\x23A', 
		'\x23C', '\x5', 'V', ',', '\x2', '\x23B', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23E', '\a', '\x12', '\x2', '\x2', 
		'\x23E', '\x63', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\a', '.', 
		'\x2', '\x2', '\x240', '\x241', '\x5', '<', '\x1F', '\x2', '\x241', '\x242', 
		'\a', '\"', '\x2', '\x2', '\x242', '\x244', '\x5', '<', '\x1F', '\x2', 
		'\x243', '\x245', '\x5', 'V', ',', '\x2', '\x244', '\x243', '\x3', '\x2', 
		'\x2', '\x2', '\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x246', '\x247', '\a', '\x12', '\x2', '\x2', 
		'\x247', '\x65', '\x3', '\x2', '\x2', '\x2', '\x248', '\x249', '\a', '$', 
		'\x2', '\x2', '\x249', '\x24A', '\x5', 'h', '\x35', '\x2', '\x24A', '\x24B', 
		'\x5', '\x30', '\x19', '\x2', '\x24B', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', '(', '\x2', '\x2', '\x24D', '\x24E', '\x5', '\x30', 
		'\x19', '\x2', '\x24E', '\x24F', '\a', '\'', '\x2', '\x2', '\x24F', '\x250', 
		'\x5', 'P', ')', '\x2', '\x250', '\x25D', '\x3', '\x2', '\x2', '\x2', 
		'\x251', '\x252', '\a', '\'', '\x2', '\x2', '\x252', '\x253', '\x5', 'P', 
		')', '\x2', '\x253', '\x254', '\x5', '\x30', '\x19', '\x2', '\x254', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x255', '\x256', '\a', '%', '\x2', '\x2', 
		'\x256', '\x258', '\x5', 'l', '\x37', '\x2', '\x257', '\x259', '\x5', 
		'V', ',', '\x2', '\x258', '\x257', '\x3', '\x2', '\x2', '\x2', '\x258', 
		'\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', '\x3', '\x2', '\x2', 
		'\x2', '\x25A', '\x25B', '\x5', '\x30', '\x19', '\x2', '\x25B', '\x25D', 
		'\x3', '\x2', '\x2', '\x2', '\x25C', '\x248', '\x3', '\x2', '\x2', '\x2', 
		'\x25C', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x251', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x255', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x260', '\a', '\x16', '\x2', 
		'\x2', '\x25F', '\x261', '\x5', 'j', '\x36', '\x2', '\x260', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', '\x2', '\x2', '\x2', 
		'\x261', '\x264', '\x3', '\x2', '\x2', '\x2', '\x262', '\x265', '\x5', 
		'\x38', '\x1D', '\x2', '\x263', '\x265', '\x5', '\x18', '\r', '\x2', '\x264', 
		'\x262', '\x3', '\x2', '\x2', '\x2', '\x264', '\x263', '\x3', '\x2', '\x2', 
		'\x2', '\x265', '\x266', '\x3', '\x2', '\x2', '\x2', '\x266', '\x269', 
		'\a', '\"', '\x2', '\x2', '\x267', '\x26A', '\x5', '\x38', '\x1D', '\x2', 
		'\x268', '\x26A', '\x5', '\x18', '\r', '\x2', '\x269', '\x267', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x270', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26E', '\a', '\x14', '\x2', 
		'\x2', '\x26C', '\x26F', '\x5', '\x38', '\x1D', '\x2', '\x26D', '\x26F', 
		'\x5', '\x18', '\r', '\x2', '\x26E', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x271', '\x3', 
		'\x2', '\x2', '\x2', '\x270', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x271', '\x3', '\x2', '\x2', '\x2', '\x271', '\x272', '\x3', '\x2', '\x2', 
		'\x2', '\x272', '\x273', '\a', '\x17', '\x2', '\x2', '\x273', '\x288', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x276', '\x5', 'j', '\x36', '\x2', 
		'\x275', '\x274', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', '\x3', 
		'\x2', '\x2', '\x2', '\x276', '\x279', '\x3', '\x2', '\x2', '\x2', '\x277', 
		'\x27A', '\x5', '\x38', '\x1D', '\x2', '\x278', '\x27A', '\x5', '\x18', 
		'\r', '\x2', '\x279', '\x277', '\x3', '\x2', '\x2', '\x2', '\x279', '\x278', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x27E', '\a', '\"', '\x2', '\x2', '\x27C', '\x27F', '\x5', '\x38', 
		'\x1D', '\x2', '\x27D', '\x27F', '\x5', '\x18', '\r', '\x2', '\x27E', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27D', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x285', '\x3', '\x2', '\x2', '\x2', '\x280', '\x283', 
		'\a', '\x14', '\x2', '\x2', '\x281', '\x284', '\x5', '\x38', '\x1D', '\x2', 
		'\x282', '\x284', '\x5', '\x18', '\r', '\x2', '\x283', '\x281', '\x3', 
		'\x2', '\x2', '\x2', '\x283', '\x282', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x286', '\x3', '\x2', '\x2', '\x2', '\x285', '\x280', '\x3', '\x2', '\x2', 
		'\x2', '\x285', '\x286', '\x3', '\x2', '\x2', '\x2', '\x286', '\x288', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x25E', '\x3', '\x2', '\x2', '\x2', 
		'\x287', '\x275', '\x3', '\x2', '\x2', '\x2', '\x288', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x289', '\x28A', '\x5', 'p', '\x39', '\x2', '\x28A', '\x28B', 
		'\a', '\x44', '\x2', '\x2', '\x28B', '\x28C', '\a', '\x1E', '\x2', '\x2', 
		'\x28C', 'k', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x28E', '\a', '\x16', 
		'\x2', '\x2', '\x28E', '\x28F', '\x5', 'n', '\x38', '\x2', '\x28F', '\x290', 
		'\x5', '<', '\x1F', '\x2', '\x290', '\x291', '\a', '#', '\x2', '\x2', 
		'\x291', '\x292', '\x5', '>', ' ', '\x2', '\x292', '\x293', '\a', '\x17', 
		'\x2', '\x2', '\x293', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\x5', 'n', '\x38', '\x2', '\x295', '\x296', '\x5', '<', '\x1F', '\x2', 
		'\x296', '\x297', '\a', '#', '\x2', '\x2', '\x297', '\x298', '\x5', '>', 
		' ', '\x2', '\x298', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x299', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x299', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x29A', 'm', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x29E', '\a', '\x4', 
		'\x2', '\x2', '\x29C', '\x29E', '\x5', 'L', '\'', '\x2', '\x29D', '\x29B', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x29C', '\x3', '\x2', '\x2', '\x2', 
		'\x29E', 'o', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A3', '\x5', 'n', 
		'\x38', '\x2', '\x2A0', '\x2A1', '\a', '/', '\x2', '\x2', '\x2A1', '\x2A3', 
		'\x5', 'n', '\x38', '\x2', '\x2A2', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x2A2', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A3', 'q', '\x3', '\x2', 
		'\x2', '\x2', '\x2A4', '\x2A5', '\a', '/', '\x2', '\x2', '\x2A5', '\x2A8', 
		'\x5', 'p', '\x39', '\x2', '\x2A6', '\x2A9', '\a', '\x44', '\x2', '\x2', 
		'\x2A7', '\x2A9', '\x5', '\x18', '\r', '\x2', '\x2A8', '\x2A6', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', 
		'\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\a', '\x12', '\x2', 
		'\x2', '\x2AB', 's', '\x3', '\x2', '\x2', '\x2', '\x2AC', '\x2AD', '\a', 
		')', '\x2', '\x2', '\x2AD', '\x2B2', '\x5', 'v', '<', '\x2', '\x2AE', 
		'\x2AF', '\a', '\x13', '\x2', '\x2', '\x2AF', '\x2B1', '\x5', 'v', '<', 
		'\x2', '\x2B0', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B0', '\x3', '\x2', '\x2', '\x2', 
		'\x2B2', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B3', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2B4', '\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B5', 
		'\x2B6', '\a', '#', '\x2', '\x2', '\x2B6', '\x2B8', '\x5', '<', '\x1F', 
		'\x2', '\x2B7', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', 
		'\x3', '\x2', '\x2', '\x2', '\x2B8', '\x2BA', '\x3', '\x2', '\x2', '\x2', 
		'\x2B9', '\x2BB', '\x5', 'V', ',', '\x2', '\x2BA', '\x2B9', '\x3', '\x2', 
		'\x2', '\x2', '\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', 
		'\x3', '\x2', '\x2', '\x2', '\x2BC', '\x2BD', '\a', '\x12', '\x2', '\x2', 
		'\x2BD', 'u', '\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2C1', '\x5', '<', 
		'\x1F', '\x2', '\x2BF', '\x2C1', '\x5', 'z', '>', '\x2', '\x2C0', '\x2BE', 
		'\x3', '\x2', '\x2', '\x2', '\x2C0', '\x2BF', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2D4', '\x5', 
		'x', '=', '\x2', '\x2C3', '\x2C4', '\a', '\x16', '\x2', '\x2', '\x2C4', 
		'\x2C8', '\x5', '\x38', '\x1D', '\x2', '\x2C5', '\x2C7', '\x5', '\x1C', 
		'\xF', '\x2', '\x2C6', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2CA', 
		'\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2C8', '\x2C9', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CB', '\x3', 
		'\x2', '\x2', '\x2', '\x2CA', '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2CB', 
		'\x2CC', '\a', '\x17', '\x2', '\x2', '\x2CC', '\x2D5', '\x3', '\x2', '\x2', 
		'\x2', '\x2CD', '\x2D1', '\x5', '\x38', '\x1D', '\x2', '\x2CE', '\x2D0', 
		'\x5', '\x1C', '\xF', '\x2', '\x2CF', '\x2CE', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D4', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2CD', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x2D6', '\x2E0', '\a', '\x1E', '\x2', '\x2', '\x2D7', '\x2D8', '\a', 
		'\n', '\x2', '\x2', '\x2D8', '\x2E0', '\a', '\x1E', '\x2', '\x2', '\x2D9', 
		'\x2DA', '\a', '\v', '\x2', '\x2', '\x2DA', '\x2E0', '\a', '\x1E', '\x2', 
		'\x2', '\x2DB', '\x2DC', '\a', '\r', '\x2', '\x2', '\x2DC', '\x2E0', '\a', 
		'\x1E', '\x2', '\x2', '\x2DD', '\x2DE', '\a', '\f', '\x2', '\x2', '\x2DE', 
		'\x2E0', '\a', '\x1E', '\x2', '\x2', '\x2DF', '\x2D6', '\x3', '\x2', '\x2', 
		'\x2', '\x2DF', '\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2D9', 
		'\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2DB', '\x3', '\x2', '\x2', '\x2', 
		'\x2DF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2E0', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x2E1', '\x2E2', '\a', '\x1D', '\x2', '\x2', '\x2E2', '\x2E3', 
		'\x5', '<', '\x1F', '\x2', '\x2E3', '\x2E4', '\a', '\x1D', '\x2', '\x2', 
		'\x2E4', '{', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x5', 'z', 
		'>', '\x2', '\x2E6', '\x2E7', '\x5', 'x', '=', '\x2', '\x2E7', '\x2E8', 
		'\x5', '\x38', '\x1D', '\x2', '\x2E8', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x2E9', '\x2EC', '\x5', '\x82', '\x42', '\x2', '\x2EA', '\x2EC', '\x5', 
		'\x88', '\x45', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EB', 
		'\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x2ED', '\x2F2', '\x5', '\x84', '\x43', '\x2', '\x2EE', '\x2F2', 
		'\x5', '\x86', '\x44', '\x2', '\x2EF', '\x2F2', '\x5', '\x8A', '\x46', 
		'\x2', '\x2F0', '\x2F2', '\x5', '\x8C', 'G', '\x2', '\x2F1', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2F1', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F0', '\x3', 
		'\x2', '\x2', '\x2', '\x2F2', '\x81', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2F4', '\a', '\x38', '\x2', '\x2', '\x2F4', '\x2F5', '\x5', '<', '\x1F', 
		'\x2', '\x2F5', '\x2F6', '\a', '\"', '\x2', '\x2', '\x2F6', '\x2F8', '\x5', 
		'<', '\x1F', '\x2', '\x2F7', '\x2F9', '\x5', 'V', ',', '\x2', '\x2F8', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FB', 
		'\a', '\x12', '\x2', '\x2', '\x2FB', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FD', '\a', '\x39', '\x2', '\x2', '\x2FD', '\x2FE', '\a', 
		',', '\x2', '\x2', '\x2FE', '\x300', '\x5', '<', '\x1F', '\x2', '\x2FF', 
		'\x301', '\x5', 'V', ',', '\x2', '\x300', '\x2FF', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x301', '\x3', '\x2', '\x2', '\x2', '\x301', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x302', '\x303', '\a', '\x35', '\x2', '\x2', 
		'\x303', '\x304', '\a', ',', '\x2', '\x2', '\x304', '\x306', '\x5', '<', 
		'\x1F', '\x2', '\x305', '\x307', '\x5', 'V', ',', '\x2', '\x306', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x306', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\x307', '\x308', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\a', 
		'\x12', '\x2', '\x2', '\x309', '\x87', '\x3', '\x2', '\x2', '\x2', '\x30A', 
		'\x30B', '\a', '\x36', '\x2', '\x2', '\x30B', '\x30C', '\x5', '<', '\x1F', 
		'\x2', '\x30C', '\x30D', '\a', '\"', '\x2', '\x2', '\x30D', '\x30F', '\x5', 
		'<', '\x1F', '\x2', '\x30E', '\x310', '\x5', 'V', ',', '\x2', '\x30F', 
		'\x30E', '\x3', '\x2', '\x2', '\x2', '\x30F', '\x310', '\x3', '\x2', '\x2', 
		'\x2', '\x310', '\x311', '\x3', '\x2', '\x2', '\x2', '\x311', '\x312', 
		'\a', '\x12', '\x2', '\x2', '\x312', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x313', '\x315', '\a', '<', '\x2', '\x2', '\x314', '\x316', '\x5', 'z', 
		'>', '\x2', '\x315', '\x314', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', 
		'\x3', '\x2', '\x2', '\x2', '\x316', '\x317', '\x3', '\x2', '\x2', '\x2', 
		'\x317', '\x318', '\a', ',', '\x2', '\x2', '\x318', '\x31A', '\x5', '<', 
		'\x1F', '\x2', '\x319', '\x31B', '\x5', 'V', ',', '\x2', '\x31A', '\x319', 
		'\x3', '\x2', '\x2', '\x2', '\x31A', '\x31B', '\x3', '\x2', '\x2', '\x2', 
		'\x31B', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31E', '\a', '=', 
		'\x2', '\x2', '\x31D', '\x31F', '\x5', 'z', '>', '\x2', '\x31E', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\x31F', '\x320', '\x3', '\x2', '\x2', '\x2', '\x320', '\x321', '\a', 
		',', '\x2', '\x2', '\x321', '\x323', '\x5', '<', '\x1F', '\x2', '\x322', 
		'\x324', '\x5', 'V', ',', '\x2', '\x323', '\x322', '\x3', '\x2', '\x2', 
		'\x2', '\x323', '\x324', '\x3', '\x2', '\x2', '\x2', '\x324', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x325', '\x326', '\a', '\n', '\x2', '\x2', 
		'\x326', '\x330', '\a', '\x1E', '\x2', '\x2', '\x327', '\x328', '\a', 
		'\v', '\x2', '\x2', '\x328', '\x330', '\a', '\x1E', '\x2', '\x2', '\x329', 
		'\x32A', '\a', '\r', '\x2', '\x2', '\x32A', '\x330', '\a', '\x1E', '\x2', 
		'\x2', '\x32B', '\x32C', '\a', '\f', '\x2', '\x2', '\x32C', '\x330', '\a', 
		'\x1E', '\x2', '\x2', '\x32D', '\x32E', '\a', '\xE', '\x2', '\x2', '\x32E', 
		'\x330', '\a', '\x1E', '\x2', '\x2', '\x32F', '\x325', '\x3', '\x2', '\x2', 
		'\x2', '\x32F', '\x327', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x329', 
		'\x3', '\x2', '\x2', '\x2', '\x32F', '\x32B', '\x3', '\x2', '\x2', '\x2', 
		'\x32F', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x330', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x331', '\x336', '\x5', '\x38', '\x1D', '\x2', '\x332', 
		'\x333', '\a', '\x13', '\x2', '\x2', '\x333', '\x335', '\x5', '\x38', 
		'\x1D', '\x2', '\x334', '\x332', '\x3', '\x2', '\x2', '\x2', '\x335', 
		'\x338', '\x3', '\x2', '\x2', '\x2', '\x336', '\x334', '\x3', '\x2', '\x2', 
		'\x2', '\x336', '\x337', '\x3', '\x2', '\x2', '\x2', '\x337', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x338', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x339', '\x33E', '\x5', '\x94', 'K', '\x2', '\x33A', '\x33B', '\a', '\x13', 
		'\x2', '\x2', '\x33B', '\x33D', '\x5', '\x94', 'K', '\x2', '\x33C', '\x33A', 
		'\x3', '\x2', '\x2', '\x2', '\x33D', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x33E', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x33E', '\x33F', '\x3', 
		'\x2', '\x2', '\x2', '\x33F', '\x93', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x33E', '\x3', '\x2', '\x2', '\x2', '\x341', '\x347', '\a', '\x44', '\x2', 
		'\x2', '\x342', '\x344', '\a', '\x16', '\x2', '\x2', '\x343', '\x345', 
		'\x5', '\x90', 'I', '\x2', '\x344', '\x343', '\x3', '\x2', '\x2', '\x2', 
		'\x344', '\x345', '\x3', '\x2', '\x2', '\x2', '\x345', '\x346', '\x3', 
		'\x2', '\x2', '\x2', '\x346', '\x348', '\a', '\x17', '\x2', '\x2', '\x347', 
		'\x342', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x348', '\x34E', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34E', 
		'\x5', '\x38', '\x1D', '\x2', '\x34A', '\x34E', '\x5', '\"', '\x12', '\x2', 
		'\x34B', '\x34E', '\x5', '\x34', '\x1B', '\x2', '\x34C', '\x34E', '\x5', 
		'@', '!', '\x2', '\x34D', '\x341', '\x3', '\x2', '\x2', '\x2', '\x34D', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34A', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34C', 
		'\x3', '\x2', '\x2', '\x2', '\x34E', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x34F', '\x350', '\a', '>', '\x2', '\x2', '\x350', '\x351', '\x5', '\x92', 
		'J', '\x2', '\x351', '\x352', '\a', '\x12', '\x2', '\x2', '\x352', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x353', '\x354', '\a', '\x39', '\x2', '\x2', 
		'\x354', '\x355', '\a', ',', '\x2', '\x2', '\x355', '\x357', '\x5', '<', 
		'\x1F', '\x2', '\x356', '\x358', '\x5', 'V', ',', '\x2', '\x357', '\x356', 
		'\x3', '\x2', '\x2', '\x2', '\x357', '\x358', '\x3', '\x2', '\x2', '\x2', 
		'\x358', '\x359', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\a', 
		'\x12', '\x2', '\x2', '\x35A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x35B', 
		'\x35C', '\a', '\f', '\x2', '\x2', '\x35C', '\x35D', '\a', '\f', '\x2', 
		'\x2', '\x35D', '\x35E', '\a', 'N', '\x2', '\x2', '\x35E', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x35F', '\x360', '\x5', '\x9A', 'N', '\x2', '\x360', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x63', '\xA1', '\xAA', '\xAF', '\xB5', 
		'\xBA', '\xC0', '\xD0', '\xD2', '\xDD', '\xE1', '\xE9', '\xEC', '\xF6', 
		'\xFA', '\x104', '\x10F', '\x116', '\x11C', '\x120', '\x125', '\x12C', 
		'\x133', '\x137', '\x13B', '\x13F', '\x141', '\x145', '\x150', '\x15B', 
		'\x164', '\x173', '\x17E', '\x183', '\x192', '\x196', '\x19A', '\x1A1', 
		'\x1A6', '\x1B0', '\x1B3', '\x1BC', '\x1D5', '\x1DA', '\x1E4', '\x1E9', 
		'\x1EE', '\x1F0', '\x20A', '\x219', '\x21D', '\x221', '\x231', '\x236', 
		'\x23B', '\x244', '\x258', '\x25C', '\x260', '\x264', '\x269', '\x26E', 
		'\x270', '\x275', '\x279', '\x27E', '\x283', '\x285', '\x287', '\x299', 
		'\x29D', '\x2A2', '\x2A8', '\x2B2', '\x2B7', '\x2BA', '\x2C0', '\x2C8', 
		'\x2D1', '\x2D4', '\x2DF', '\x2EB', '\x2F1', '\x2F8', '\x300', '\x306', 
		'\x30F', '\x315', '\x31A', '\x31E', '\x323', '\x32F', '\x336', '\x33E', 
		'\x344', '\x347', '\x34D', '\x357',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
