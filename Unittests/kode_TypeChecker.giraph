extend edge int     'intSomethingLong':'intSom';
extend edge decimal 'decimalSomethingLong':'decSom';
extend edge edge    'edgeSomethingLong':'edgSom';
extend edge vertex  'vertexSomethingLong':'verSom';
extend edge graph   'graphSomethingLong':'graSom';
extend edge bool    'boolSomethingLong':'booSom';

extend vertex int     'intSomethingLong':'intSom';
extend vertex int     'intSomethingLong2':'intSom2';
extend vertex decimal 'decimalSomethingLong':'decSom';
extend vertex edge    'edgeSomethingLong':'edgSom';
extend vertex vertex  'vertexSomethingLong':'verSom';
extend vertex graph   'graphSomethingLong':'graSom';
extend vertex bool    'boolSomethingLong':'booSom';

extend graph int     'intSomethingLong':'intSom';
extend graph decimal 'decimalSomethingLong':'decSom';
extend graph edge    'edgeSomethingLong':'edgSom';
extend graph vertex  'vertexSomethingLong':'verSom';
extend graph graph   'graphSomethingLong':'graSom';
extend graph bool    'boolSomethingLong':'booSom';

extend graph collection int 'testintCollection';
extend graph collection decimal 'testdecimalCollection';
extend graph collection vertex 'testvertexCollection';
extend graph collection edge 'testedgeCollection';
extend graph collection bool 'testboolCollection';
extend graph collection graph 'testgraphCollection';

extend vertex collection int 'testintCollection';
extend vertex collection int 'testintCollection2';
extend vertex collection decimal 'testdecimalCollection';
extend vertex collection vertex 'testvertexCollection';
extend vertex collection edge 'testedgeCollection';
extend vertex collection bool 'testboolCollection';
extend vertex collection graph 'testgraphCollection';

extend edge collection int 'testintCollection';
extend edge collection decimal 'testdecimalCollection';
extend edge collection vertex 'testvertexCollection';
extend edge collection edge 'testedgeCollection';
extend edge collection bool 'testboolCollection';
extend edge collection graph 'testgraphCollection';

Main -> void () {
    graph g1
    [
        vertex va(), vb(), vc(), vd(), ve();
        edge x(vb, vd), y(vd, ve), z(va, vc);
        set 'Directed' = false;
    ]

	collection int tim;
	collection string hej;
	int timint = 5;
	set 'intSom' = 5.5 in g1.Edges;
	set 'testintCollection' = 5.5 in g1.Edges;

	extractmax 'booSom' from g1.Edges;
	extractmax 'intSom2' from g1.Edges;
	extractmax 'booSom' from g1.edgSom.testintCollection;
	extractmax from g1.edgSom.testboolCollection;
	extractmax from g1.intSom;

	extractmin 'booSom' from g1.Edges;
	extractmin 'intSom2' from g1.Edges;
	extractmin 'booSom' from g1.testintCollection;
	extractmin from g1.edgSom.testboolCollection;
	extractmin from g1.intSom;

	collection int fratim = selectall from timint;
	int endnuentim = select from timint;
	decimal timdouble = 15.5;
	push endnuentim+1+2.5+3 to tim;
	push timdouble to tim;
	pop from endnuentim;
	enqueue endnuentim+1+2.5+3 to tim;
	enqueue timdouble to tim;
	dequeue from endnuentim;
	
	vertex vcv = pop from g1.Vertices;
	add vertex kokoko() to g1;
	add vertex vvcv() to g1.Vertices;
	add timdouble to tim;
	add 5 to g1;
	add 5 to endnuentim;

	add vertex vcm(intSom = 1.5) to g1;
	add edge ecvc(endnuentim, vcv) to g1;
	add edge evvc(vcv, vcv, intSom = 2.5) to g1;

	graph g2
    [
		vertex vx(intSom = 4), vxx(intSom = 3);
		edge ex(vx, vxx, intSom = 5);
		set 'Directed' = 25;
	]


	collection int fratim2 = fratim2;
	collection int fratim3 = endnuentim;
	collection int fratim4 = hej;
	collection int fratim5 = selectall from hej;
	vertex vtim1 = pop from g1.Edges;

	collection void voidvar;
	int testinti = 5;
	bool adsf = testinti < 5;
	int expint = testinti + hej;
	int expint2 = fratim2 + fratim3;
	bool booltest123 = adsf < testinti;
	
}

voidFunc -> void (void parameter) {
	return 5;
}
wrongreturnFunc -> bool () {
	return 5;
}
collreturnfunc -> collection int () {
	collection int anotherintcoll;
	return 5;
}
newFunc -> void () {
	for(int fori = 1 to 10 : 2.5){
	}
	for(1 to 10 : 2.5){
	}


	collection int nyhej;
	foreach vertex v in nyhej{
	}
	void voidVar;
	int decitest = 1+1.5;
	int k = k;
	int i = i+i;
	print k, i+nyhej;

	run voidFunc with (k);
	run wrongreturnFunc with (k);
	run wrongreturnFunc with (2.5);
	run voidFunc with (2.5);
	run voidFunc;

	predicate po(int predint) : { predint < 5 };
	if (po(5.5)) {
	}
	remove from i;
	removeall from i;
}

anothervoidFunc -> void (void anothervoidparameter){
	string hej2;
	collection edge ecol = selectall from hej2;
	string hej3 = select from hej2;
	pop from hej2;
	dequeue from hej2;

	graph g3
    [
		vertex vvvx(intSom = 4), vxxxx(intSom = 3);
		edge exxxx(vvvx, vxxxx, intSom = 5);
		set 'Directed' = 10.5;
	]
	add vertex vcmmm(intSom = 73.5) to g3;

	bool testbool = hej2 < ecol;

	foreach edge e in g3.Vertices{
	}
	print g3;
	predicate prediTester(int predicateint) : { predicateint < 10 };
	if (prediTester(5.5)) {
	}
	remove from hej2;
	removeall from hej2;

	run voidFunc with (1, 2);
}
